{
    "ANKIConfig": {
        "GIT_URL": "https://github.com/assafelovic/gpt-researcher/blob/master/"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport": {
        "label": "DetailedReport",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 15,
        "endLineNo": 179,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L15-L179&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function defines a `GPTResearcher` class that generates a detailed research report on a given query. It leverages multiple AI assistants, conducts research, identifies subtopics, and compiles a structured report with introduction, subtopic reports, and a table of contents. \n\n## Inputs\n\n* **query:** The main research topic to be investigated.\n* **report_type:** Type of report to be generated (e.g., \"research_report\", \"subtopic_report\").\n* **report_source:** Source of information for the report.\n* **source_urls:** A list of URLs to be used as sources.\n* **config_path:** Path to a configuration file.\n* **tone:** Desired tone of the report (e.g., formal, informal).\n* **websocket:** A WebSocket object for communication.\n* **subtopics:** A list of subtopics within the main query.\n* **headers:** Additional headers for the API request.\n\n## Output\n\n* A complete research report containing:\n    * An introduction\n    * Subtopic reports\n    * A table of contents\n    * A list of visited URLs for referencing.  \n\n\n"
    },
    "backend__websocket_manager__WebSocketManager": {
        "label": "WebSocketManager",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/websocket_manager.py",
        "relativePath": "backend/websocket_manager.py",
        "lineNo": 12,
        "endLineNo": 63,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fwebsocket_manager.py%23L12-L63&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function `start_streaming` initiates a streaming process where it executes a given task within an AI agent, likely for information retrieval or generation.  The results are streamed back to the connected WebSocket client. This suggests a real-time interaction system.\n\n## Inputs\n\n* `task`:  A piece of work or query input for the AI agent.\n* `report_type`: A specific format or type of report expected from the agent. \n* `report_source`: The data source or context the agent should use for the task.\n* `source_urls`: URLs potentially providing additional context or data for the agent.\n* `tone`:  The desired communicative style of the agent's response (e.g., formal, informal, neutral).\n* `websocket`: A WebSocket connection object to send the streaming output.\n* `headers`: Optional additional headers for the WebSocket communication.\n\n## Output\n\n* `report`: A stream of data generated by the AI agent in response to the task, likely containing the processed information, analysis, or generated content. \n\n\n\n\n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport___get_subtopic_report": {
        "label": "_get_subtopic_report",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 119,
        "endLineNo": 169,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L119-L169&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Summary:\n\nThis function dynamically generates a subtopic report by leveraging a GPT-based assistant. It initiates research on a specific subtopic, crafts section titles, retrieves relevant existing content, and finally assembles a comprehensive report while avoiding duplication of previously generated information.  \n\n## Inputs:\n\n* `subtopic`:  Likely a dictionary containing information about the subtopic, including its task description.\n* `report_source`: The source of the research data (e.g., a knowledge base or API).\n* `websocket`:  A WebSocket connection for communication with the GPT assistant.\n* `headers`:  Headers to be included in the request to the GPT assistant.\n* `query`: The main research query for the entire report.\n* `subtopics`: A list of subtopics being researched. \n* `global_urls`:  A set of URLs already visited during research.\n* `global_context`: A list of context strings gathered from previous research.\n* `global_written_sections`: A list of previously generated report sections.\n* `existing_headers`: A list of previously generated section headers.\n \n## Output:\n\n*  `subtopic_report`: A string containing the generated subtopic report.\n\n\n\n"
    },
    "backend__server__websocket_endpoint": {
        "label": "websocket_endpoint",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 71,
        "endLineNo": 116,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L71-L116&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:** This function acts as a WebSocket server handler that receives tasks in JSON format. It processes these tasks, generating a report (potentially in PDF, DOCX, and markdown formats), saves these files, and sends their paths back to the client via the WebSocket. \n\n**Inputs:**\n\n* `websocket`:  Represents the active WebSocket connection.\n* `manager`: An object likely containing logic for task execution and report generation.\n* `data`: JSON data received from the client, structured to include:\n    * `task`: The type of report or analysis to perform.\n    * `report_type`:  The desired format of the output report.\n    * `source_urls`:  URLs containing the data to process for the report.\n    * `tone`: Desired tone of the generated report (e.g., formal, informal).\n    * `headers`:  (Optional) Headers to be included in the request.\n    * `report_source`: (Optional) Source of the report data.\n\n**Output:**\n\n*  JSON message sent back to the client containing:\n    *  `type`:  \"path\" indicating the message provides file paths.\n    * `output`:  A dictionary with  paths for generated files: \n       * `pdf`: Path to the PDF report. \n       * `docx`: Path to the DOCX report.\n       * `md`: Path to the markdown report. \n\n\n\n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 16,
        "endLineNo": 59,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L16-L59&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function initializes a GPT-based research assistant. It takes various parameters like query, report type, source URLs, and configuration paths to tailor the assistant's behavior. The purpose is to create a system capable of conducting research, generating reports, and potentially integrating with external tools via websockets.\n\n## Inputs\n\n* **query**: The initial research question or topic.\n* **report_type**: The desired format of the generated report.\n* **report_source**: The type of sources to prioritize (e.g., \"web\", \"books\").\n* **source_urls**: A list of specific URLs to use as sources.\n* **config_path**: Path to a configuration file containing settings for the assistant.\n* **tone**: The desired writing style (e.g., \"formal\", \"informal\").\n* **websocket**: A WebSocket object potentially used for communication with external services.\n* **subtopics**: A list of subtopics to focus on within the main query.\n* **headers**: Additional headers to include in API requests. \n\n## Output\n\n* **An initialized ResearchAssistant object**:  Prepared to execute research and generate reports based on the provided input parameters. \n\n\n\n"
    },
    "backend__websocket_manager__run_agent": {
        "label": "run_agent",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/websocket_manager.py",
        "relativePath": "backend/websocket_manager.py",
        "lineNo": 64,
        "endLineNo": 105,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fwebsocket_manager.py%23L64-L105&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis function runs a research task using an agent, tailored to a specified report type. It measures the execution time and sends a log message with the total runtime. The code aims to facilitate research tasks by leveraging an agent and providing detailed or basic reports based on user preferences.\n\n\n## Inputs\n\n* `task`: The research query or task to be executed.\n* `websocket`:  A websocket connection for communication with the agent.\n* `stream_output`:  Flag indicating whether to stream the agent's output.\n* `tone`: The desired tone of the agent's response (e.g., formal, casual).\n* `headers`: Additional headers to be included in the request.\n* `report_type`:  A string or enum value specifying the desired report type (\"multi_agents\" or \"DetailedReport\").\n* `report_source`:  The source of the research data (e.g., web, database).\n* `source_urls`:  URLs of sources used for research.\n* `config_path`:  Path to a customized JSON configuration file.\n\n\n\n## Output\n\n* `report`:  A string containing the generated research report. \n* Log message:  A message sent to the `websocket` indicating the total execution time. \n"
    },
    "backend__report_type__basic_report__basic_report__BasicReport": {
        "label": "BasicReport",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/basic_report/basic_report.py",
        "relativePath": "backend/report_type/basic_report/basic_report.py",
        "lineNo": 6,
        "endLineNo": 46,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fbasic_report%2Fbasic_report.py%23L6-L46&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function sets up and runs a research process using a GPT researcher object. It takes various parameters to define the research scope and output style, then initiates the research and report generation, ultimately returning the generated report.\n\n## Inputs\n\n* **query**: The research question or topic.\n* **report_type**: The desired format or style of the research report.\n* **report_source**: Information about the source of the report (e.g., for attribution).\n* **source_urls**: List of URLs potentially used as sources for the research.\n* **tone**:  Desired tone of the report (e.g., formal, informal, neutral).\n* **config_path**: Path to a configuration file likely containing researcher settings.\n* **websocket**: A WebSocket object, potentially for real-time communication with the researcher.\n* **headers**: Custom HTTP headers for making requests.\n\n## Output\n\n* **report**: \n    * A string containing the generated research report. \n\n\n"
    },
    "backend__utils__write_md_to_word": {
        "label": "write_md_to_word",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/utils.py",
        "relativePath": "backend/utils.py",
        "lineNo": 61,
        "endLineNo": 92,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Futils.py%23L61-L92&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Markdown to DOCX Converter\n\n**Quick Summary:** This function takes Markdown text as input, converts it to HTML, then transforms the HTML into a DOCX file. Finally, it returns the encoded file path of the generated DOCX document. The purpose of this code is to provide a way to convert Markdown formatted text into a more easily shareable and editable Microsoft Word document (.docx) format. \n\n**Inputs:**\n\n* `text (str)`:  The Markdown text to be converted.\n\n**Output:**\n\n* `encoded_file_path (str)`:  The file path of the generated DOCX document, encoded using `urllib.parse.quote`. \n\n\n\n\n"
    },
    "backend__server__get_config": {
        "label": "get_config",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 127,
        "endLineNo": 153,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L127-L153&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown \n\n**Quick Summary:** This function configures a system using environment variables and user-provided parameters. It sets up connections with various APIs and services, likely for a language model or AI application.  The goal is to provide a central place to manage and access these configurations.\n\n**Inputs:**\n\n*  `langchain_api_key`: API key for LangChain\n*  `openai_api_key`: API key for OpenAI\n*  `tavily_api_key`: API key for Tavily\n*  `google_api_key`: API key for Google services\n*  `google_cx_key`: Custom search engine key for Google\n*  `bing_api_key`: API key for Bing\n*  `serpapi_api_key`: API key for SerpApi\n*  `serper_api_key`: API key for Serper\n*  `searx_url`: URL for a SearX instance\n\n**Output:**\n\n*  `config`: A dictionary containing all the API keys and URLs  ready to be used by the application. \n\n\n"
    },
    "backend__utils__write_md_to_pdf": {
        "label": "write_md_to_pdf",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/utils.py",
        "relativePath": "backend/utils.py",
        "lineNo": 35,
        "endLineNo": 60,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Futils.py%23L35-L60&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:\n\n**[Quick Summary]**\n\nThis function converts Markdown text (`text`) into a PDF file (`file_path`). It utilizes the `md2pdf` library, styles the PDF using `pdf_styles.css`, and returns the encoded file path for potential download or linking.  \n\n    \n**[Inputs]**\n\n*  `text` (str): The Markdown text content to be transformed into a PDF.\n*  `filename` (str): A string presumably used to name the output PDF file, truncated to 60 characters.\n\n**[Output]**\n\n*  `encoded_file_path` (str): The file path of the generated PDF encoded using `urllib.parse.quote`, likely for safe embedding in URLs. \n\n\n\n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport___generate_subtopic_reports": {
        "label": "_generate_subtopic_reports",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 94,
        "endLineNo": 118,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L94-L118&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis async function fetches reports for each subtopic in a list. It gathers and combines the reports into a single body of text, potentially avoiding duplicate headers by extracting and passing them between subtopic reports. \n\n## Inputs\n\n* `subtopics`: A list of subtopics \n* `self._get_subtopic_report`: An internal method (likely async) for fetching a report for a given subtopic\n\n## Output\n\n* `subtopic_reports`: A list of dictionaries, each containing a subtopic and its corresponding report.\n* `subtopics_report_body`: A concatenated string containing all the subtopic reports. \n\n\n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport__run": {
        "label": "run",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 60,
        "endLineNo": 81,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L60-L81&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown \n\n**Quick Summary:** This Python function generates a detailed report based on internet research. It starts with initial research, gathers subtopics, drafts an introduction, generates subtopic reports, and finally assembles a comprehensive report incorporating all findings.\n\n**Inputs:**\n\n*  `self._initial_research()`: Likely a method that performs initial research tasks.\n*  `self._get_all_subtopics()`:  A method that identifies all relevant subtopics within the research area.\n*  `self.main_task_assistant`: An object (likely another class instance) responsible for writing the introduction and managing visited URLs.\n* `self.global_urls`: A collection of URLs visited during the research process.\n\n**Output:**\n\n\n* `report`: A complete and detailed report containing an introduction and subtopic-specific findings. \n\n\n\nLet me know if you want a deeper dive into any specific part of the code!\n"
    },
    "backend__report_type__basic_report__basic_report__BasicReport____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/basic_report/basic_report.py",
        "relativePath": "backend/report_type/basic_report/basic_report.py",
        "lineNo": 7,
        "endLineNo": 26,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fbasic_report%2Fbasic_report.py%23L7-L26&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:\n\n**[Quick summary]** \nThis function likely initializes an object designed to handle a specific type of report generation. It takes various parameters including a query, report type, source, URLs, desired tone, configuration file path, a WebSocket connection, and optional headers. The purpose is probably to set up the necessary components for generating and sending a report.\n\n**[Inputs]**\n\n* `query`: The search term or topic for the report.\n* `report_type`: The format or style of the report (e.g., summary, analysis, etc.).\n* `report_source`: The origin or provider of the data for the report.\n* `source_urls`:  A list of URLs potentially used as data sources for the report.\n* `tone`: The desired writing style or sentiment of the report (e.g., formal, informal, positive, etc.).\n* `config_path`: A file path to a configuration file containing additional settings.\n* `websocket`: A WebSocket connection, suggesting real-time communication for report delivery.\n* `headers`: Optional HTTP headers to be included in report requests/responses.\n\n**[Output]**\n\n*  This function likely doesn't return a direct output, but rather initializes an object ready to proceed with report generation and sending. \n\n\n"
    },
    "backend__report_type__basic_report__basic_report__BasicReport__run": {
        "label": "run",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/basic_report/basic_report.py",
        "relativePath": "backend/report_type/basic_report/basic_report.py",
        "lineNo": 27,
        "endLineNo": 46,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fbasic_report%2Fbasic_report.py%23L27-L46&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:** This function uses a `GPTResearcher` object to conduct research based on a given query and generate a report in a specified format. The purpose of the code is to automate the process of research and report writing using a large language model.\n\n**Inputs:**\n\n* `self.query`: The research question or topic.\n* `self.report_type`:  The desired format or style of the report (e.g., summary, essay, bullet points).\n* `self.report_source`:  The type of sources to be used for research (e.g., web, books, academic journals).\n* `self.source_urls`:  Specific URLs of sources to be included in the research.\n* `self.tone`:  The desired tone of the report (e.g., formal, informal, neutral).\n* `self.config_path`:  A path to a configuration file containing additional settings.\n* `self.websocket`:  A connection to a websocket server for real-time communication.\n* `self.headers`:  Headers to be included in API requests.\n\n**Output:**\n\n* `report`:  A string containing the generated research report. \n\n\n\n"
    },
    "backend__websocket_manager__WebSocketManager__start_sender": {
        "label": "start_sender",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/websocket_manager.py",
        "relativePath": "backend/websocket_manager.py",
        "lineNo": 21,
        "endLineNo": 39,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fwebsocket_manager.py%23L21-L39&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Summary\n\nThis function continuously listens for messages on a dedicated queue assigned to a websocket connection. If the connection is active, it sends the received messages back to the client. Ping-pong messages are handled specially.\n\n## Inputs\n\n*  `websocket`: The websocket object representing the client connection.\n*  `self.message_queues`: A dictionary mapping websockets to message queues for handling incoming messages.\n\n## Output\n\n*  Sends text messages to the connected client through the websocket. \n*  Handles ping-pong messages by sending a \"pong\" reply.  \n"
    },
    "backend__server__set_config": {
        "label": "set_config",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 155,
        "endLineNo": 171,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L155-L171&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze.  \n\n"
    },
    "backend__utils__write_to_file": {
        "label": "write_to_file",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/utils.py",
        "relativePath": "backend/utils.py",
        "lineNo": 5,
        "endLineNo": 21,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Futils.py%23L5-L21&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function asynchronously writes text to a file in UTF-8 encoding, ensuring proper handling of potential encoding issues. It's likely intended for situations where writing to files needs to be efficient and non-blocking, such as in web applications.\n\n\n## Inputs\n\n* `filename (str)`: The path to the file where the text will be written.\n* `text (str)`: The string containing the text data to be written to the file.\n\n## Output\n\n* The function doesn't directly return a value.\n* The text is written to the specified file in UTF-8 encoding. \n"
    },
    "backend__memory__research__ResearchState": {
        "label": "ResearchState",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/memory/research.py",
        "relativePath": "backend/memory/research.py",
        "lineNo": 5,
        "endLineNo": 20,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fmemory%2Fresearch.py%23L5-L20&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis\n\n**[Quick summary]** This code defines the structure for a research report. It outlines the various components of a report, including its content (research data, sections, etc.), layout (title, headers, date, etc.), and metadata (initial research, sources).\n\n**[Inputs]**\n\n* `task`: Likely a description of the overall research objective.\n* `initial_research`:  Possibly a brief summary of preliminary findings or background information.\n* `sections`: A list of the main topics or chapters that the report will cover.\n* `research_data`:  A list of dictionaries, probably containing structured data collected during the research.\n\n**[Output]**\n\n*  A well-structured research report with the specified components, formatted according to the defined layout. \n"
    },
    "backend__server__ConfigRequest": {
        "label": "ConfigRequest",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 27,
        "endLineNo": 41,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L27-L41&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Summary, Inputs, and Output\n\n**[Quick Summary]** This code snippet likely defines configuration settings for a language model application.  It sets up API keys for various services like Anthropic, LangChain, and OpenAI, as well as specifies data paths, retrieval methods, and search engine parameters. The purpose is to configure the application to interact with these external tools and resources.\n\n**[Inputs]**\n\n* `ANTHROPIC_API_KEY`: API key for the Anthropic AI platform.\n* `TAVILY_API_KEY`: API key for the Tavily platform (potentially for document processing).\n* `LANGCHAIN_TRACING_V2`:  Setting related to tracing or logging in LangChain.\n* `LANGCHAIN_API_KEY`: API key for the LangChain platform.\n* `OPENAI_API_KEY`: API key for the OpenAI platform (likely for GPT models).\n* `DOC_PATH`: Path to a document or dataset used by the application.\n* `RETRIEVER`: Designation for the document retrieval method used. \n* `GOOGLE_API_KEY`, `GOOGLE_CX_KEY`: API keys for Google services (search, etc.).\n* `BING_API_KEY`, `SERPAPI_API_KEY`, `SERPER_API_KEY`: API keys for Bing, SerpApi, and Serper (search engine APIs).\n* `SEARX_URL`: URL for a Searx instance (metasearch engine).\n\n**[Output]** \n\n* No explicit output defined.\n* The code likely configures the application environment for subsequent use. \n*  This configuration would enable the application to access external APIs and data sources.  \n\n\n\n\n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport___generate_subtopic_reports__fetch_report": {
        "label": "fetch_report",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 98,
        "endLineNo": 110,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L98-L110&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:** This function likely fetches reports on subtopics within a larger topic. It offers two implementation styles: sequential (to avoid information duplication) and asynchronous (for potential performance gains). \n\n**Inputs:**\n\n* `subtopic`:  Represents a specific subtopic within a larger topic.\n\n**Output:**\n\n* A dictionary containing:\n    * `topic`: The overarching topic.\n    * `report`: A report specific to the provided `subtopic`. \n\n\n"
    },
    "backend__server__upload_file": {
        "label": "upload_file",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 188,
        "endLineNo": 200,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L188-L200&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis:\n\n**[Quick summary]** \nThis function takes a file object as input, saves it to a specified directory (`DOC_PATH`), and then reloads the documents from that directory. Its purpose is likely to handle file uploads and update the available documents for processing.\n\n**[Inputs]**\n\n*  `file`: This object likely represents an incoming file, possibly from a user upload. \n    * `filename`: A property of the `file` object containing the filename.\n    * `file`:  A handle to the file's content.\n\n**[Output]**\n\n*  A dictionary containing:\n    * `\"filename\"`: The original filename of the uploaded file.\n    * `\"path\"`: The full path to where the file was saved on the system. \n\n\n"
    },
    "backend__utils__write_text_to_md": {
        "label": "write_text_to_md",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/utils.py",
        "relativePath": "backend/utils.py",
        "lineNo": 22,
        "endLineNo": 34,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Futils.py%23L22-L34&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis \n\n**Quick Summary**\n\nThis function writes a given string of text to a Markdown file named after a provided filename (truncated to 60 characters) and stored in an \"outputs\" folder. It then returns a URL-encoded path to the generated Markdown file.  This suggests the function is part of a system that generates and serves Markdown content, possibly for documentation or web pages.\n\n**Inputs**\n\n*  `text (str)`: The content to be written into the Markdown file.\n*   `filename`: A string representing the desired name for the Markdown file.\n\n**Output**\n\n*  `str`: A URL-encoded string representing the path to the newly created Markdown file. \n\n\n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport___construct_detailed_report": {
        "label": "_construct_detailed_report",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 170,
        "endLineNo": 179,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L170-L179&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary:\n\nThis function generates a text-based report by combining an introduction, a table of contents generated from report headers, and the main report body with appended source URLs. \n\nIt aims to create a structured and informative report with proper referencing.\n\n## Inputs:\n\n* `report_body`: This is likely the main content of the report, possibly formatted as a string.\n* `self.main_task_assistant.visited_urls`: This suggests an existing object (`self.main_task_assistant`) with a property (`visited_urls`) storing a list of URLs visited during the report generation process.\n\n## Output:\n\n* A formatted string containing:\n    * Introduction\n    * Table of contents generated from `report_body` headers\n    * `report_body` with source URLs appended at the end (likely formatted as citations)"
    },
    "backend__websocket_manager__WebSocketManager__disconnect": {
        "label": "disconnect",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/websocket_manager.py",
        "relativePath": "backend/websocket_manager.py",
        "lineNo": 47,
        "endLineNo": 56,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fwebsocket_manager.py%23L47-L56&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function disconnects a WebSocket connection from a larger system. It removes the connection from active lists, stops any pending tasks associated with it, and closes the communication channel. This ensures proper cleanup and resource management when a WebSocket connection is terminated.\n\n## Inputs\n\n* `websocket`:  Represents the WebSocket connection object to disconnect.\n\n## Output\n\n* None - This function does not explicitly return a value.\n"
    },
    "backend__server__delete_file": {
        "label": "delete_file",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 208,
        "endLineNo": 216,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L208-L216&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the code snippet:\n\n**[Quick Summary]**\n\nThis function attempts to delete a file at a specified path. If the file exists, it's deleted and a success message is returned. If the file doesn't exist, a \"File not found\" error with a 404 status code is returned.\n\n**[Inputs]**\n\n* `DOC_PATH`:  A string representing the directory where the document is stored. \n* `filename`: A string containing the name of the file to be deleted.\n\n**[Output]**\n\n* A dictionary with a \"message\" key:\n    * `\"File deleted successfully\"` if the file is deleted.\n    * `\"File not found\"` if the file is not found. \n\n\nLet me know if you have any other code snippets you'd like analyzed!\n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport___initial_research": {
        "label": "_initial_research",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 82,
        "endLineNo": 89,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L82-L89&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:**\nThis function updates a global context and URL list based on research conducted by a `main_task_assistant`. It likely serves as a way to share information gathered during research between different parts of a larger application.\n\n**Inputs:**\n\n* `self.main_task_assistant`:  An instance of a class presumably responsible for conducting research.\n \n**Outputs:**\n\n* `self.global_context`: Updated with the context gathered by the `main_task_assistant`.\n* `self.global_urls`: Updated with the URLs visited during the research conducted by the `main_task_assistant`. \n\n\n"
    },
    "backend__server__run_multi_agents": {
        "label": "run_multi_agents",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 118,
        "endLineNo": 125,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L118-L125&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick Summary**\n\nThis function attempts to run a research task named \"Is AI in a hype cycle?\" using an active WebSocket connection.  If a connection exists, it returns a report generated by the task; otherwise, it returns an error indicating no active connection.\n\n**Inputs**\n\n* `manager`: Likely an object managing WebSocket connections.\n* `stream_output`:  A mechanism for streaming output from the research task.\n\n* `run_research_task`: A function presumably responsible for executing the research task.\n\n**Output**\n\n* Dictionary:  \n    * `report`:  Contains the results of the \"Is AI in a hype cycle?\" research task.\n* `JSONResponse`:  A JSON response indicating an error if no WebSocket connection is found.  It will have a status code of 400 and a message \"No active WebSocket connection\".\n\n\n\n\n Let me know if you would like a deeper dive into any specific aspect!\n"
    },
    "backend__server__read_root": {
        "label": "read_root",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 60,
        "endLineNo": 66,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L60-L66&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**[Quick Summary]**\n\nThis code snippet appears to be a piece of a web application's routing logic. It renders an HTML template named \"index.html\" and passes it data related to a user's web request. It also indicates the absence of any report data, potentially leaving a placeholder for dynamic content.\n\n**[Inputs]**\n\n* `request`: This is likely a web request object containing information about the incoming user request, such as URL, headers, and possibly more.\n* `templates`: This seems to be a template rendering engine object, allowing the code to insert dynamic data into the \"index.html\" template.\n\n**[Output]**\n\n*  A rendered HTML response, combining the contents of \"index.html\" with the provided data. The `request` object's information  may be used to personalize the response, and the absence of a \"report\" suggests a flexible structure.  \n\n\n\n"
    },
    "backend__websocket_manager__WebSocketManager__connect": {
        "label": "connect",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/websocket_manager.py",
        "relativePath": "backend/websocket_manager.py",
        "lineNo": 40,
        "endLineNo": 46,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fwebsocket_manager.py%23L40-L46&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:** This function establishes a WebSocket connection, adds it to a list of active connections, sets up a message queue for that connection, and launches a background task to send messages through the connection. Its purpose is to manage individual WebSocket connections, enabling bidirectional communication.\n\n**Inputs:**\n\n* **websocket:** A WebSocket object representing the established connection.\n\n**Output:**\n\n*  None  (The function modifies internal state within the object it belongs to).\n\n\n\n"
    },
    "backend__websocket_manager__WebSocketManager__start_streaming": {
        "label": "start_streaming",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/websocket_manager.py",
        "relativePath": "backend/websocket_manager.py",
        "lineNo": 57,
        "endLineNo": 63,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fwebsocket_manager.py%23L57-L63&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis \n\n**[Quick Summary]** \nThis function `run_agent`  launches a task using an AI agent and streams the output. It  takes various parameters to configure the task, including the type of report, data sources, the desired tone of the response, and communication methods. \n\n**[Inputs]**\n\n*  `task`:  The specific task to be performed by the AI agent (e.g., summarize text, answer a question, generate creative content).\n* `report_type`: Specifies the format of the output report (e.g., text, JSON, markdown).\n*  `report_source`:  Indicates the origin or context of the data used for the task (e.g., a document, a website).\n* `source_urls`:  A list of URLs providing additional context or data for the task.\n* `tone`: The desired style or personality of the AI agent's response (e.g., formal, casual, informative).\n* `websocket`:  A WebSocket connection used for real-time streaming of the agent's output.\n*  `headers`:  Additional headers to be included in the request to the AI agent.\n\n**[Output]**\n\n* `report`: The AI agent's processed response, delivered in the specified `report_type` format.  \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "backend__memory__draft__DraftState": {
        "label": "DraftState",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/memory/draft.py",
        "relativePath": "backend/memory/draft.py",
        "lineNo": 5,
        "endLineNo": 10,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fmemory%2Fdraft.py%23L5-L10&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze.  \n\n"
    },
    "backend__server__startup_event": {
        "label": "startup_event",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 53,
        "endLineNo": 58,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L53-L58&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown\n\n**Quick Summary:**\n\nThis code snippet sets up a directory named \"outputs\" if it doesn't exist and then mounts it as a static file location within a web application. This allows the application to serve files generated and stored in the \"outputs\" directory to users accessing the application.\n\n**Inputs:**\n\n*  `os`: Likely refers to the `os` module in Python, providing operating system interactions.\n* `path.isdir()`: A function from the `os.path` module to check if a given path is a directory.\n* `\"outputs\"`: The name of the directory to create and mount.\n* `os.makedirs()`:   A function from the `os` module to create a directory and any necessary parent directories.\n* `app`: Likely an instance of a web application framework (e.g., Flask, Django)\n* `StaticFiles`: Likely a component within the web application framework to serve static files.\n* `\"outputs\"`: The path within the application's URL where the mounted directory will be accessible (e.g., accessing `/outputs` in the browser).\n\n**Output:**\n\n*  A directory named \"outputs\" will be created if it doesn't already exist.\n*  The \"outputs\" directory will be mounted as a static resource location within the web application. \n*  Users can access files stored in the \"outputs\" directory through the application's `/outputs` URL. \n\n\n\n"
    },
    "backend__websocket_manager__WebSocketManager____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/websocket_manager.py",
        "relativePath": "backend/websocket_manager.py",
        "lineNo": 15,
        "endLineNo": 20,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fwebsocket_manager.py%23L15-L20&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## WebSocketManager Initialization\n\n**Quick Summary:**\n\nThis code snippet initializes a `WebSocketManager` class, responsible for managing multiple WebSocket connections. It sets up data structures to track active connections, scheduled send tasks, and message queues for each connection. The purpose is to facilitate efficient bidirectional communication with multiple WebSocket clients. \n\n**Inputs:**\n\n*  `self`: Reference to the `WebSocketManager` instance.\n\n**Outputs:**\n\n* Initializes three dictionaries within the `WebSocketManager` instance:\n    * `active_connections`: Stores active WebSocket connections.\n    * `sender_tasks`: Assigns asyncio tasks to send messages for each WebSocket connection.\n    * `message_queues`: Provides queues for buffering messages destined for each WebSocket connection. \n\n\n\n"
    },
    "backend__server__ResearchRequest": {
        "label": "ResearchRequest",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 22,
        "endLineNo": 26,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L22-L26&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis:\n\n**[Quick summary]** \n\nThis function likely defines a method for managing or tracking tasks. It could be part of a task management system, where each task has a description, a type of report associated with it, and an assigned agent. The purpose is to store and possibly process information related to these tasks.\n\n**[Inputs]**\n\n*  `task`: A string describing the nature of the task.\n*  `report_type`: A string indicating the type of report generated for this task.\n*  `agent`: A string identifying the person or entity responsible for the task.\n\n**[Output]** \n\nIt's difficult to determine the exact output without knowing the function's implementation.  Possible outputs could include:\n\n*  A formatted string containing task details for display or logging.\n*  A dictionary or other data structure storing task information.\n*  A boolean value indicating success or failure of a task-related operation. \n\n\n\nLet me know if you have the function code, and I can give you a more precise analysis! \n"
    },
    "backend__server__list_files": {
        "label": "list_files",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 202,
        "endLineNo": 206,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L202-L206&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis function lists all files within a specified directory (`DOC_PATH`) and returns them as an organized dictionary with a key \"files\" containing the list of filenames. This is likely used to display a list of files in a particular directory or to prepare this list for further processing.\n\n\n## Inputs\n* `DOC_PATH`: This variable likely holds a string representing the absolute or relative path to the directory containing the files you want to list.\n\n\n## Output\n* A dictionary with the key \"files\" and its value being a list of strings, each string representing a filename within the specified directory. \n"
    },
    "backend__report_type__detailed_report__detailed_report__DetailedReport___get_all_subtopics": {
        "label": "_get_all_subtopics",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/report_type/detailed_report/detailed_report.py",
        "relativePath": "backend/report_type/detailed_report/detailed_report.py",
        "lineNo": 90,
        "endLineNo": 93,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Freport_type%2Fdetailed_report%2Fdetailed_report.py%23L90-L93&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis\n\n**Quick Summary:**\n\nThis function retrieves a list of subtopics from a \"main_task_assistant\" object. It likely fetches this information from an external API or database and formats it as a Python list.\n\nThe purpose of this code is to provide a structured way to access and utilize subtopics associated with a main task.\n\n**Inputs:**\n\n*  `self.main_task_assistant`:  An instance of an object (presumably designed to handle task-related information)\n\n**Output:** \n\n* A Python list of subtopics extracted from the `main_task_assistant`. \n\n\n"
    },
    "backend__server__sanitize_filename": {
        "label": "sanitize_filename",
        "systemPath": "/home/sanjay/Development/explore/gpt-researcher/backend/server.py",
        "relativePath": "backend/server.py",
        "lineNo": 67,
        "endLineNo": 69,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fassafelovic%2Fgpt-researcher%2Fblob%2Fmaster%2Fbackend%2Fserver.py%23L67-L69&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## File Sanitization Function Breakdown\n\n**[Quick summary]**  This Python function cleans a filename by removing all characters that are not alphanumeric, spaces, or hyphens. It then removes any leading or trailing whitespace. The purpose is likely to prepare a filename for safe use in a file system or other application where only certain characters are allowed. \n\n**[Inputs]**\n\n*  `filename`: A string representing the original filename.\n\n**[Output]**\n* A sanitized string representing the filename with only alphanumeric characters, spaces, and hyphens. \n\n\n"
    }
}