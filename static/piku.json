{"ANKIConfig":{"GIT_URL":"https://github.com/piku/piku/blob/master/"},"piku__spawn_app":{"label":"spawn_app","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":719,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L719-L1065&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","endLineNo":1065,"description":"## Quick Summary\nThis function configures and manages UWSGI workers for a web application. It checks for changes in worker counts, spawns new workers as needed, and terminates unnecessary workers. \n\n## Inputs\n* **app_path**: Path to the app root directory\n* **procfile**: Procfile for the app\n* **env_file**:  Environment variables file\n * **settings**: Overrides for environment variables\n * **env_file**: Additional environment variables\n * **live_env**: Live environment variables file\n * **scaling**:\n*\n\n## Output\n* **worker_count**: Dictionary of worker counts per worker type\n* **env**: Updated environment variables\n"},"piku__spawn_worker":{"label":"spawn_worker","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1066,"endLineNo":1239,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1066-L1239&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function configures and deploys a single worker process for a given application and type (e.g., wsgi, php, cron).  It generates an uWSGI configuration file and sets up the environment for the worker. The overall purpose is to automate the deployment and configuration of web applications using uWSGI.\n\n\n## Inputs\n\n* `kind`:  Type of worker (e.g., wsgi, php, cron).\n* `app`:  Name of the application.\n* `env`:  Environment variables containing settings like `UWSGI_MAX_REQUESTS`, `UWSGI_LISTEN`, `PYTHON_VERSION`,  etc.\n* `command`: Command to execute for the worker (e.g., path to the Python WSGI file).\n\n## Output\n\n* Creates two files:\n    * `available`:  A template uWSGI configuration file. \n    * `enabled`: A copy of the `available` file, now ready to be used by uWSGI.  \n* Configures the worker environment based on the provided settings. \n \n*  Adjusts the worker behavior based on the type (`kind`) (e.g., PHP worker, cron job).\n"},"piku__do_deploy":{"label":"do_deploy","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":368,"endLineNo":441,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L368-L441&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Code Analysis\n\n**Quick Summary:** This function deploys a web application by resetting the working directory to the app's location, fetching updates, and running various deployment commands based on the detected runtime environment. It aims to automate the deployment process for different types of applications.\n\n**Inputs:**\n\n* `app`:  The name of the application to deploy.\n* `newrev`:  A Git commit hash representing the new revision to deploy (optional).\n* `deltas`: Likely a list or dictionary containing files/changes to be deployed.\n* `APP_ROOT`: The root directory where all applications are stored.\n* `LOG_ROOT`: The root directory for application logs.\n\n**Output:**\n\n* Successfully deploys the application (prints green messages).\n* Prints error messages if the app is not found, the Procfile is invalid, or deployment commands fail.\n* Exits with a non-zero error code if deployment fails. \n\n\n"},"piku__deploy_nodeX":{"label":"deploy_node","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":614,"endLineNo":674,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L614-L674&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"[Quick summary]\nThis Python function deploys a Node.js application. It handles setting up a virtual environment, installing Node.js and dependencies, and potentially updating Node.js to a specific version. \n\nThe main purpose is to streamline the deployment process for Node.js applications within a server environment.\n\n[Inputs]\n- `app`:  The name of the application being deployed.\n- `deltas`: Likely a list of changes or updates to apply during deployment (not fully clear from the snippet).\n- `ENV_ROOT`: Root directory for application environments.\n- `APP_ROOT`: Root directory for applications.\n- `UWSGI_ENABLED`: Directory containing UWSGI configuration files (if applicable). \n\n\n[Output]\n- The function is expected to start the deployed application.\n-  The output will likely include logs related to the deployment process (e.g., creating directories, installing packages).\n-  Potentially, it might return true/false to indicate deployment success or failure. \n\n\n\n"},"piku__multi_tail":{"label":"multi_tail","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1259,"endLineNo":1311,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1259-L1311&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis Python function continuously monitors log files for updates, yielding each new log line along with a file prefix for easy identification. It effectively combines and streams the output of multiple log files in real-time.\n\n\n\n## Inputs\n\n* `filenames`: A list of paths to log files to be monitored. \n* `catch_up`: A number determining how many lines to read initially from each log file to provide some historical context (adjust as needed).\n\n\n\n## Output\n\n* A generator that yields strings in the format: `[file_prefix] | [log_line]`,  where `file_prefix` is the file name without extension and `log_line` is the content of the new log line. \n"},"piku__cmd_destroy":{"label":"cmd_destroy","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1441,"endLineNo":1479,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1441-L1479&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function gracefully removes all traces of a specified application across various directories and files. Its purpose is to clean up and uninstall an application from a server environment, ensuring data and configuration files are properly deleted.\n\n## Inputs\n\n*  `app`: A string representing the name of the application to be removed. \n\n## Output \n\n* All application-related files and folders are removed from designated locations.\n* Key system-level files specific to the application, such as Nginx configuration and SSL certificates are deleted. \n* A message is displayed indicating which folders have been preserved (data and cache).  \n\n\n"},"piku__deploy_python":{"label":"deploy_python","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":675,"endLineNo":711,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L675-L711&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function deploys a Python application by creating a virtual environment, installing dependencies, and then spawning the application. It aims to provide a consistent and isolated environment for running different Python applications. \n\n## Inputs\n\n* `app`: The name of the Python application to deploy.\n* `ENV_ROOT`: The root directory where virtual environments for different applications will be stored.\n* `APP_ROOT`: The root directory containing all application code and configuration files.\n* `deltas`: This argument's meaning is unclear from the given context. It might be used for passing deployment-specific configurations or delta updates.\n\n\n## Output\n\n* The deployed Python application, running inside its own virtual environment. \n"},"piku__cmd_setup":{"label":"cmd_setup","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1566,"endLineNo":1601,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1566-L1601&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Piku Script Environment Setup \n\n**Quick Summary**\n\nThis function sets up the environment for a Python application, likely named \"Piku.\" It creates necessary directories, configures a uWSGI server, and makes the script executable. The purpose is to prepare the application for deployment and running as a standalone service.\n\n**Inputs**\n\n* **APP_ROOT, CACHE_ROOT, DATA_ROOT, GIT_ROOT, ENV_ROOT, UWSGI_ROOT, UWSGI_AVAILABLE, UWSGI_ENABLED, LOG_ROOT, NGINX_ROOT:** Parameters defining file paths and locations for various application components. \n* **UWSGI_LOG_MAXSIZE:**  A value setting the maximum size of uWSGI log files.\n* **cpu_count():** A function call to determine the number of CPU cores.\n* **PIKU_SCRIPT:** Path to the main Python script file.\n\n**Output**\n\n* Created directories at the specified paths.\n* A configured uWSGI configuration file (`uwsgi.ini`) in the `UWSGI_ROOT` directory.\n* The `PIKU_SCRIPT` file marked as executable. \n\n\n\n"},"piku__parse_procfile":{"label":"parse_procfile","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":276,"endLineNo":311,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L276-L311&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Quick Summary\n\nThis function parses a Procfile, a configuration file used by tools like Gunicorn and Passenger,  to extract information about the worker types. It enforces a limit of one worker of each type, giving preference to WSGI workers.\n\n## Inputs\n\n* `filename`:  The path to the Procfile file.\n\n## Output\n\n* A dictionary where keys are worker types (e.g., 'web', 'cron') and values are their corresponding commands. \n"},"piku__deploy_go":{"label":"deploy_go","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":572,"endLineNo":604,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L572-L604&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Analysis \n\n**Quick Summary:** This function deploys a Go application by setting up its environment, updating dependencies, and then launching the application. The purpose of the code is to streamline the deployment process for Go applications by handling dependency management and environment configurations.\n\n**Inputs:**\n* `app`: This likely represents the name or identifier of the Go application being deployed.\n* `ENV_ROOT`: This likely specifies the root directory where the application will be deployed.\n* `APP_ROOT`: This likely specifies the root directory of the application itself.\n* `deltas`: This is likely a  list of changes or configuration updates specific to the deployment.\n\n\n**Output:**\n* It spawns the deployed application. \n* The function may return a process ID (PID) or handle for the spawned application. \n* It assumes successful deployment and application launch as the default output.  \n\n\n\n\n"},"piku__deploy_java_maven":{"label":"deploy_java_maven","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":471,"endLineNo":501,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L471-L501&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Maven Deploy Function Analysis\n\n**[Quick Summary]**\n\nThis function deploys a Java application built with Maven. It handles building the application from source if necessary, managing environment variables for the deployment, and ultimately spawns the deployed application.  The purpose is to streamline the deployment process for Java applications.\n\n**[Inputs]**\n\n*  `app`: String representing the name of the Java application.\n*  `deltas`: (unspecified) Potential input for managing application configurations or deployment updates.\n*  `ENV_ROOT`: (assumed constant) Path to a root directory for application environments. \n*  `APP_ROOT`: (assumed constant) Path to a root directory for all applications.\n\n**[Output]**\n\n*  A spawned application instance.  \n\n\n"},"piku__deploy_java_gradle":{"label":"deploy_java_gradle","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":442,"endLineNo":470,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L442-L470&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Analysis\n\n**Quick Summary:**  This function deploys a Java application packaged with Gradle. It handles building the application from source code (if necessary) or rebuilding from previous builds and then launches the application.\n\n**Inputs:**\n\n* `app`: The name or identifier of the Java application to be deployed.\n* `deltas`: Likely represents any modification or configuration change files needed for the application deployment.\n\n**Output:**\n\n*  Spawns the deployed Java application. \n\n\n"},"piku__cmd_ps_scale":{"label":"cmd_ps_scale","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1513,"endLineNo":1537,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1513-L1537&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Function Breakdown:\n\n**Quick Summary:**\n\nThis function scales the number of workers for a specified `app` based on user-defined `settings`.  It reads worker configurations from a `procfile`, interprets scaling deltas, and calls a `do_deploy` function to adjust worker counts.  The purpose of the code is to dynamically manage the number of worker processes running for a given application.\n\n\n**Inputs:**\n\n* `app`: The name of the application to scale.\n* `settings`: A list of strings, each representing a scaling instruction in the format \"[worker_type]=[delta]\".\n\n\n**Output:**\n\n*  Modifies the number of worker processes for the given application based on the provided scaling instructions. \n*  Logs errors if scaling instructions are invalid or if worker types are not found in the configuration.\n\n\n\n"},"piku__deploy_ruby":{"label":"deploy_ruby","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":547,"endLineNo":571,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L547-L571&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Ruby Application Deployment\n\n**Quick Summary:** \n\nThis function deploys a Ruby application. It sets up a virtual environment, installs dependencies, and then starts the application.  The code is designed to streamline the deployment process for Ruby-based web applications.\n\n**Inputs:**\n\n* `app`:  The name of the Ruby application to deploy.\n* `deltas`:  Likely represents deployment-related changes or configurations (e.g.,  database updates, file modifications).\n\n\n\n**Output:**\n\n*  A running instance of the Ruby application. \n"},"piku__cmd_setup_ssh":{"label":"cmd_setup_ssh","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1604,"endLineNo":1627,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1604-L1627&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Function Breakdown:  \n\n**Quick Summary:** This function  adds a public SSH key to an authorized_keys file, allowing access to a server. It handles both files from disk or piped input (stdin).\n\n**Inputs:**\n\n* `public_key_file`: Path to a public SSH key file or \"-\" for reading from stdin.\n* `PIKU_SCRIPT`: Likely a variable representing the path to a script used for setting up authorized keys.\n\n**Output:**\n\n* Logs a success message with the key fingerprint if the addition is successful.\n* Logs an error message with specific details if the key file is invalid or not found. \n\n\n"},"piku__deploy_clojure_leiningen":{"label":"deploy_clojure_leiningen","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":524,"endLineNo":546,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L524-L546&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Analysis\n\n**Quick Summary:** This function deploys a Clojure application. It builds the application (cleaning and creating a uberjar), sets up the environment, and finally spawns the application. The purpose is to automate the deployment process for Clojure applications.\n\n**Inputs:**\n\n* `app`: The name of the Clojure application to deploy.\n* `deltas`: This input is unclear without context. It may represent application-specific configuration or deployment options.\n\n**Output:**\n\n* A spawned Clojure application instance. \n\n\n"},"piku__cmd_git_hook":{"label":"cmd_git_hook","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1640,"endLineNo":1661,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1640-L1661&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Function Breakdown:\n\n**[Quick summary]** This code implements a post-receive Git hook designed to automatically deploy a web application upon receiving a push to the repository. It clones the application code, creates necessary directories, and then executes a deployment script (`do_deploy`).\n\n**[Inputs]**\n* `stdin`: Stream containing git push information (old revision, new revision, branch name).\n* `app`: Name of the web application being deployed (extracted from `stdin`).\n\n**[Output]**\n* Deployment of the web application to `APP_ROOT` directory.\n* Creation of necessary directories for the application and its data. \n\n\n"},"piku__deploy_clojure_cli":{"label":"deploy_clojure_cli","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":502,"endLineNo":523,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L502-L523&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Clojure Application Deployment Function Analysis \n\n**Quick Summary:** This function deploys a Clojure application by building a release package, customizing the environment, and then spawning the application.  It aims to streamline the deployment process for Clojure applications. \n\n**Inputs:**\n* `app`: The name of the Clojure application to deploy.\n* `deltas`:  Likely a list of configuration changes or updates to apply to the deployed application. `ENV_ROOT` and `APP_ROOT` are environment variables defining the root directories for environments and applications respectively.\n\n**Output:**\n\n* A running instance of the deployed Clojure application.  \n\n\n\n"},"piku__cmd_config_set":{"label":"cmd_config_set","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1379,"endLineNo":1397,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1379-L1397&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Analysis\n\n**Quick Summary:** This function takes application name and key-value pairs as input, updates the configuration file of the specified application with the new settings, and then deploys the application.  \n\nIts purpose is to allow dynamic modification and deployment of application configurations.\n\n**Inputs:**\n\n*  `app`: The name of the application.\n*  `settings`: A list of strings, each representing a key-value pair in the format \"key=value\".\n\n**Output:**\n\n*  The configuration file for the specified application is updated with the new settings.\n*  The application is deployed. \n*  Informational messages about successful settings updates or malformed settings. \n"},"piku__parse_settings":{"label":"parse_settings","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":331,"endLineNo":349,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L331-L349&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Python Function Analysis\n\n**Quick Summary:**\n\nThis function reads a settings file, parses key-value pairs, and expands environment variables within the values. It stores the parsed settings in a dictionary and returns it. The purpose is to load configuration settings from a file into a usable format, potentially for use in an application.\n\n**Inputs:**\n\n* **`filename`:**  The path to the settings file.\n\n**Output:**\n\n* **`env`:** A dictionary where keys are setting names and values are the expanded setting values.  \n\n\n\n"},"piku___get_plugin_commands":{"label":"_get_plugin_commands","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1704,"endLineNo":1721,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1704-L1721&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function scans a directory for subdirectories, imports modules from each subdirectory, and aggregates their publicly accessible `cli_commands()` function results.\n\nIt aims to dynamically discover and load command-line interface functionality from multiple modules within a structured directory.\n\n\n## Inputs\n\n*  `path`: A string representing the absolute path to the directory containing subdirectories with potential CLI modules. \n\n\n## Output\n\n* `cli_commands`: A list of lists, where each inner list represents the commands defined by a module. \n"},"piku__cmd_setup_ssh__add_helper":{"label":"add_helper","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1607,"endLineNo":1624,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1607-L1624&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function attempts to add a public key to an authorized keys file. It takes a public key file path as input and reads the key content. If the file exists, it verifies the key's format and adds it to the authorized keys file. If the file is '-', it reads the public key from standard input and adds it.\n\n## Inputs\n\n* **key_file**: Path to the public key file.\n* **PIKU_SCRIPT**: Likely the path to a script used for configuring authorized keys.\n* **public_key_file**:  Alternante input for public key - if set to '-', reads from stdin.\n\n## Output\n\n*  Adds the public key to the authorized keys file if valid.\n* Prints a success message with the fingerprint of the added key in white.\n* Prints an error message in red if the file is not found or the key is invalid.  \n\n\n"},"piku__cmd_update":{"label":"cmd_update","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1730,"endLineNo":1746,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1730-L1746&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Function Analysis \n\n**Quick Summary:** This function updates a local copy of the \"piku\" script. It downloads the latest version from a specified URL and replaces the existing script if the download is successful. If the download fails, it informs the user.\n\n**Inputs:**\n\n* **PIKU_RAW_SOURCE_URL:** The URL pointing to the raw source code of the piku script.\n* **PIKU_SCRIPT:** The local file path where the piku script is stored.\n\n**Output:**\n\n*  A success message indicating the update was successful.\n*  An error message if the URL is inaccessible. \n\n\n"},"piku__cmd_config_unset":{"label":"cmd_config_unset","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1401,"endLineNo":1415,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1401-L1415&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Code Breakdown \n\n**Quick Summary:**\n\nThis function `piku config:unset` removes specified settings (`settings`) from the configuration file of a given application (`app`). It then updates the configuration file and performs a deployment (`do_deploy`) for the modified application. Likely, this is part of a larger tool for managing application configurations and deployments. \n\n**Inputs:**\n\n*  `app`: The name of the application whose configuration needs modification.\n*  `settings`: A list of settings to be removed from the application's configuration. \n\n**Output:**\n\n* A message indicating which settings were unset for the given application.\n* An updated configuration file for the application with the specified settings removed.\n*  A deployment of the modified application. \n\n\n\n\n"},"piku__cmd_config_get":{"label":"cmd_config_get","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1362,"endLineNo":1375,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1362-L1375&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Code Analysis\n\n**[Quick Summary]**\nThis function retrieves a configuration setting from a file specific to a given application. It searches for a configuration file within the `ENV_ROOT` directory, parses it, checks if the desired setting exists, and then outputs its value if found. If the configuration file is missing, a warning message is displayed. \n\n**[Inputs]**\n\n*  `app`:  The name of the application for which the configuration setting is being retrieved.\n\n* `setting`: The specific configuration setting to be retrieved from the app's configuration file.\n\n* `ENV_ROOT`: A path variable likely representing the root directory where application environments are stored.\n\n**[Output]**\n\n* The value of the requested `setting` from the configuration file, if found.\n* A warning message if the configuration file for the specified `app` is not present. \n\n\n\n\n"},"piku__cmd_git_receive_pack":{"label":"cmd_git_receive_pack","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1664,"endLineNo":1677,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1664-L1677&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Analysis\n\n**[Quick Summary]** This Python function sets up a Git hook to automatically execute a script (`post-receive`) whenever a remote branch is pushed to a repository.  It initializes a bare repository and writes a bash script to the hook.\n\n**[Inputs]**\n\n* `app`: A string representing the name of the app, likely sanitized for safety.\n\n\n**[Output]**\n\n* A new (bare) Git repository is created at `GIT_ROOT/app`\n* A `post-receive` hook script is created at `GIT_ROOT/app/hooks/post-receive` and will be executed upon any push events. \n\n\n\n"},"piku__cmd_run":{"label":"cmd_run","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1541,"endLineNo":1554,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1541-L1554&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## piku_run function analysis:\n\n**Quick Summary:** This function executes a given command within a specific application's environment. It loads environment variables from a configuration file, sets standard output and error to non-blocking modes, and runs the command in the application's directory using the modified environment.\n\n**Inputs:**\n\n* `app`: The name of the application to execute the command in.\n* `cmd`: A list of strings representing the command to be executed (e.g., `['ls', '-al']`).\n* `stdin`: An input stream used to provide input to the command.\n* `stdout`: An output stream used to receive the command's standard output.\n* `stderr`: An error stream used to receive the command's standard error.\n\n**Output:**\n\n*  The function `communicate()` is called on the spawned process (`p`), likely expecting it to return the command's output and error messages. \n"},"manage__main":{"label":"main","systemPath":"/home/sanjay/Development/explore/piku/examples/python-postgres/manage.py","relativePath":"examples/python-postgres/manage.py","lineNo":7,"endLineNo":19,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fexamples%2Fpython-postgres%2Fmanage.py%23L7-L19&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Analysis\n\n**Quick Summary**\n\nThis Python code snippet sets up a Django environment and executes management commands from the command line. It ensures the correct settings module is loaded and handles potential Django import errors. The purpose is to allow running Django commands (like `runserver` or `migrate`) directly from the terminal.\n\n**Inputs**\n\n*  `os.environ`:  This is a dictionary-like object holding environment variables.\n*  `sys.argv`: A list containing command-line arguments passed to the script.\n\n**Output**\n\n*  Execution of the specified Django management command. \n*  Possible error messages if Django cannot be imported or if there are issues with the command itself. \n\n\n\n\n"},"piku__cmd_logs":{"label":"cmd_logs","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1483,"endLineNo":1495,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1483-L1495&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary \n\nThis Python function tails running logs for a specified application and (optional) process. Its purpose is to provide a live view of log messages for debugging and monitoring purposes.\n\n## Inputs\n\n*  `app`: The name of the application for which logs should be retrieved.\n*  `process`: (Optional) The name of the specific process within the application to focus on.\n\n\n## Output\n\n* A live stream of log messages from the specified application and process.\n* A message indicating no logs were found for the given application. \n"},"piku__setup_authorized_keys":{"label":"setup_authorized_keys","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":263,"endLineNo":275,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L263-L275&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function sets up an authorized_keys file that redirects all SSH commands to an external script, effectively controlling how SSH connects are handled. This is likely used for security purposes, such as logging actions or enforcing specific access policies.\n\n\n## Inputs\n\n*  `environ['HOME']`: The user's home directory path.\n*  `ssh_fingerprint`: The SSH fingerprint of the key being used for authentication.\n*  `script_path`: The path to the external script that will handle the redirected SSH commands.\n*  `pubkey`: The public key for SSH authentication.\n\n## Output\n\n*  An `authorized_keys` file is created or updated in the user's `.ssh` directory, containing the restricted SSH command.\n*  File permissions are set appropriately for the user to have read and write access to the `authorized_keys` file and its parent directory. \n\n\n"},"piku__check_requirements":{"label":"check_requirements","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":350,"endLineNo":361,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L350-L361&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Quick Summary\n\nThis function verifies if a list of specified binaries (`binaries`) exist in the system and are executable. Its purpose is to ensure that the necessary tools are available before proceeding with a script or program.\n\n## Inputs\n\n* `binaries`: This is a list of binary file names (e.g., `[\"gcc\", \"make\", \"python3\"]`).\n\n## Output\n\n* `True`: If all binaries exist and are executable.\n* `False`: If any binary is missing or not executable. \n\n\n"},"piku__cmd_apps":{"label":"cmd_apps","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1333,"endLineNo":1344,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1333-L1344&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Code Analysis\n\n**[Quick Summary]**  This Python function lists all deployed applications within a specific directory (`APP_ROOT`). It checks if each application is currently running based on the presence of a corresponding configuration file in the `UWSGI_ENABLED` directory. The output displays the application names in green, with an asterisk indicating running applications.\n\n**[Inputs]** \n\n* **`APP_ROOT`**:  A string representing the directory path where deployed applications are located.\n* **`UWSGI_ENABLED`**: A string representing the directory path where application configuration files for UWSGI are stored.\n\n**[Output]** \n\n* A list of deployed application names, displayed in green.\n* Running applications are marked with an asterisk (*) prefix. \n* If no applications are found, a message indicating this is printed. \n\n\n\n"},"piku__cmd_config":{"label":"cmd_config","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1347,"endLineNo":1358,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1347-L1358&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Piku Config Function Analysis\n\n**Quick Summary:** This function, likely part of a larger tool named \"Piku,\" retrieves and displays the configuration file for a specified application. It searches for a file named \"ENV\" within the application directory under the `ENV_ROOT` environment variable. \n\n**Inputs:**\n\n* `app`: The name of the application whose configuration is to be displayed.\n\n**Output:**\n\n* The content of the \"ENV\" configuration file if found.\n* A warning message if the application is not deployed and the config file is absent. \n\n\n"},"piku__cmd_config_live":{"label":"cmd_config_live","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1418,"endLineNo":1429,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1418-L1429&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Quick Summary\nThis function retrieves and displays the live environment configuration for a specified application. It searches for a file containing the configuration within a designated `ENV_ROOT` directory. If the file is not found, a warning message is printed.  Purpose: To provide a way to easily access and view the live environment settings for an application.\n\n## Inputs \n* `<app>`: The name of the application for which to retrieve the configuration.\n\n## Output\n* The contents of the `LIVE_ENV` configuration file for the specified application, formatted in white text.\n* A yellow-colored warning message if the application is not found or the configuration file does not exist. \n\n\n"},"piku__cmd_ps":{"label":"cmd_ps","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1498,"endLineNo":1509,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1498-L1509&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Analysis\n\n**Quick Summary**\n\nThis function aims to display the number of worker processes running for a specific application. It reads a configuration file located in the `ENV_ROOT` directory and prints the contents if found. If the file is missing, it displays an error message.\n\n**Inputs**\n\n*  `app`: The name of the application for which to check the worker process count.\n\n**Output**\n\n* If a configuration file for the application is found, it will print the contents of the file to the console in white text.\n* If no configuration file is found, it will print an error message indicating that no workers were found for the given application in red text. \n\n\n"},"piku__do_stop":{"label":"do_stop","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1240,"endLineNo":1250,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1240-L1250&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary \n\nThis function attempts to stop a deployed application named `app`. It searches for configuration files (`.ini` files) associated with the app in the `UWSGI_ENABLED` directory and removes them if found, effectively stopping the UWSGI instance.\n\n## Inputs\n\n* **app:**  The name of the application to stop.\n* **UWSGI_ENABLED:** A directory path likely containing configuration files for UWSGI applications.\n\n\n\n## Output\n\n* If configuration files are found and removed:\n    * A yellow-colored message indicating the app is being stopped.\n\n* If no configuration files are found:\n    * A red-colored message indicating the app was not deployed. \n \n"},"piku__exit_if_invalid":{"label":"exit_if_invalid","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":228,"endLineNo":237,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L228-L237&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Function Summary\n\nThis function checks if a given application name exists in a specified root directory. It sanitizes the application name and then checks if a directory with that name exists within the `APP_ROOT` directory. If the application is not found, it prints an error message and exits the program.\n\n\n## Inputs\n\n* **app:**  The name of the application to check.\n\n## Output\n\n* **app:** The sanitized application name (if the app exists).\n* **Error message and exit:** If the application is not found. \n"},"piku__expandvars":{"label":"expandvars","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":312,"endLineNo":321,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L312-L321&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis Python function takes a buffer of text and substitutes any occurrences of shell-style environment variables with their actual values. It handles both simple variable names and variables enclosed in curly braces.\n\n## Inputs\n\n*  `buffer`: The text string in which environment variables need to be expanded.\n*  `env`: A dictionary-like object representing the environment variables and their values. For example, `os.environ`\n*  `default`: (Optional) A default value to return if an environment variable is not found.\n*  `skip_escaped`: (Optional)  A boolean indicating whether to skip escaped variables (variables preceded by a backslash).\n\n## Output\n\n*  A modified version of the input `buffer` with all shell-style environment variables replaced by their corresponding values from the `env` dictionary. \n"},"piku__get_free_port":{"label":"get_free_port","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":238,"endLineNo":247,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L238-L247&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary \n\nThis function randomly finds a free TCP port. It creates a socket, binds it to a specified `address` and a free port number (0), retrieves the assigned port, and then closes the socket. The purpose is to obtain a unique, available port for network communication.\n\n## Inputs\n\n* `address`: A string representing the network address (e.g., \"127.0.0.1\").\n\n\n## Output\n\n* `port`: An integer representing the randomly chosen free TCP port. \n"},"piku__cmd_git_upload_pack":{"label":"cmd_git_upload_pack","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1688,"endLineNo":1696,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1688-L1696&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function handles the upload of a Git pack for a specified application.  It sanitizes the application name, uses  'git-shell' to execute the upload command within the Git repository's root directory. \n\n## Inputs\n\n*  `app`: The name of the application for which the Git pack should be uploaded.\n*  `argv`: A list of command-line arguments, with the second element (`argv[1]`) likely containing the upload command itself.\n\n## Output\n\n*  The function expects to be triggered by a Git hook after the upload is complete.\n*  It doesn't explicitly return any value."},"piku__command_output":{"label":"command_output","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":322,"endLineNo":330,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L322-L330&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary\n\nThis function executes a given command using a shell and captures both standard output and standard error as a single string. It aims to simplify command execution and output retrieval within a Python script.\n\n\n## Inputs\n\n*  `cmd`: This is the command string to be executed.\n*  `environ`:  Likely a dictionary containing environment variables to be used during command execution.\n\n\n## Output\n\n* A string containing the combined output (stdout and stderr) of the executed command. If the command fails or encounters an error, an empty string will be returned. \n"},"piku__deploy_rust":{"label":"deploy_rust","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":605,"endLineNo":613,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L605-L613&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Summary:\n\nThis function deploys a Rust application. It builds the application using `cargo build`, then spawns the application using the provided `spawn_app` function. This is likely part of a larger system for managing and deploying Rust applications. \n\n## Inputs: \n\n* `app_path`:  The path to the Rust application directory.\n* `app`: The name of the application.\n* `APP_ROOT`: The root directory where applications are stored.\n* `deltas`:  Likely configuration options or data related to the application deployment.\n\n## Output: \n\n*  The output of the `spawn_app` function, which likely represents the running application process. \n"},"piku__write_config":{"label":"write_config","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":254,"endLineNo":262,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L254-L262&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Quick Summary\n\nThis function writes a configuration file from a dictionary.  It iterates through key-value pairs in the `bag` dictionary and writes each pair to a file specified by `filename` in a format suitable for a config file. \n\n## Inputs\n\n* **filename:**  The path to the file where the configuration will be written.\n* **bag:** A dictionary containing key-value pairs that represent the configuration settings. \n\n## Output\n\n*  A file at the specified `filename` containing key-value pairs from the `bag` dictionary, each on a separate line, formatted as \"key separator value\".\n\n\n"},"piku__cmd_restart":{"label":"cmd_restart","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1557,"endLineNo":1564,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1557-L1564&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Function Analysis \n\n**[Quick Summary]** \nThis function handles the restarting of a specified application. It takes the application name as input, validates it, and then calls another function `do_restart` to perform the actual restart action. This likely forms part of a command-line tool or scripting environment.\n\n**[Inputs]**\n* `app`:  This represents the name of the application to be restarted.\n\n**[Output]**\n* The function does not explicitly return any value. \n* It is assumed that the `do_restart` function handles the process of restarting the application and may produce its own output (e.g., success/failure messages).  \n\n"},"piku__cmd_stop":{"label":"cmd_stop","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1630,"endLineNo":1637,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1630-L1637&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"Let's break down the code snippet.\n\n**Quick Summary**\n\nThis code defines a function that appears to be part of a command-line tool. It takes an app name as input, validates it, and then calls another function (`do_stop`) to stop that application. The overall purpose is to provide a way to stop running applications from a command line interface.\n\n**Inputs**\n\n* `app`: A string representing the name of the application to be stopped.\n\n**Output**\n\n* The `do_stop` function likely handles the actual stopping process and might return an indication of success or failure. \n\n\nLet me know if you have any more code snippets you'd like me to analyze!\n"},"piku__do_restart":{"label":"do_restart","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1251,"endLineNo":1258,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1251-L1258&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"[Quick Summary]\nThis function, `restart_app`, restarts a deployed application, handling the case when the application is already stopped. It does this by first stopping the application, then restarting it.\n\n[Inputs]\n- app: This likely represents the name or identifier of the application to be restarted.\n\n[Output]\n- A running application identified by 'app'. \n\n\n"},"piku__multi_tail__peek":{"label":"peek","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1263,"endLineNo":1270,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1263-L1270&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Breakdown\n\n**[Quick Summary]**\n\nThis function reads a line from a file handle. If the end of the file is reached, it resets the file pointer to its original position and returns `None`. Otherwise, it returns the read line. This pattern suggests a mechanism for attempting to read a specific line from a file without consuming subsequent lines if the desired line is not found.\n\n**[Inputs]**\n\n* **handle:** A file object (likely opened in read mode).\n   \n\n**[Output]**\n\n*  `None`:  Indicates the end of the file was reached.\n* **line:** The read line from the file handle as a string. \n\n\n\n\n"},"piku__cleanup":{"label":"cleanup","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1325,"endLineNo":1331,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1325-L1331&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"Please provide the code selection you'd like me to analyze. 😊 \n\n"},"piku__cmd_deploy":{"label":"cmd_deploy","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1432,"endLineNo":1438,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1432-L1438&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Deployment Function Analysis\n\n**Quick Summary:**\n\nThis function handles the deployment of an application. It takes the application name as input, validates it, and then calls a separate function `do_deploy` to perform the actual deployment.  \n\n**Inputs:**\n\n* `<app>`: The name of the application to be deployed. \n\n**Output:**\n\n* Successfully deploys the specified application. \n* Potentially handles errors or invalid inputs. \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze! "},"piku__deploy_identity":{"label":"deploy_identity","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":712,"endLineNo":718,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L712-L718&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Python Function Analysis\n\n**Quick Summary:**\n\nThis function sets up a virtual environment for a given application ('app') at a specified path ('ENV_ROOT') and launches the application with provided deltas.  Its purpose is likely managing application development environments with isolated dependencies.\n\n**Inputs:**\n\n* `ENV_ROOT`: A string representing the root directory where environment folders will be created.\n* `app`: A string representing the name of the specific application.\n* `deltas`: This could be a list of arguments, configuration files, or other data specific to the application launch.\n\n**Output:**\n\n*  A running instance of the application ('app') within the newly created environment. \n\n\n\n\n"},"piku__sanitize_app_name":{"label":"sanitize_app_name","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":221,"endLineNo":227,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L221-L227&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"[Quick summary]\nThis function sanitizes an app name to remove invalid characters and create a valid file path. It aims to ensure a clean and consistent app name for use in file system operations.\n\n[Inputs]\n-  `app`: A string representing the app name, potentially containing invalid characters.\n\n[Output]\n- A sanitized string representing the app name suitable for use in a file path. \n\n\n"},"piku__found_app":{"label":"found_app","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":362,"endLineNo":367,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L362-L367&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Function Breakdown\n\n**Quick Summary:** This function, likely part of a larger detection system, identifies a specific type of \"app\" (the meaning of \"kind\" is unclear without context). Upon detection, it prints a green message to the console indicating the app type detected. \n\n[Inputs]\n\n*  `kind`: A string representing the type of app detected.  \n\n\n[Output]\n\n*   A green-colored console message indicating the detected app type, formatted as: \"-----> {kind} app detected.\" \n"},"piku__get_boolean":{"label":"get_boolean","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":248,"endLineNo":253,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L248-L253&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"[Quick Summary]\nThis function converts a string that could represent a boolean value (like \"1\", \"true\", \"yes\") into a Python boolean (True or False).  Its purpose is to handle user input or data that might be in a text format representing a true/false condition. \n\n[Inputs]\n*  `value`: A string that might represent a boolean value.\n\n[Output]\n*  `True`: If the input string is equivalent to \"1\", \"on\", \"true\", \"enabled\", \"yes\", or \"y\".\n*  `False`: If the input string is not equivalent to any of the above. \n \n\n\n"},"piku__cmd_help":{"label":"cmd_help","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1724,"endLineNo":1728,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1724-L1728&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"The provided code snippet defines a function designed to display help information for something called \"piku.\" It retrieves help text from an object named \"ctx.parent\" and then outputs it using the \"echo\" function.\n\n## Inputs:\n\n- `ctx`: An object likely containing context information about the current execution environment.\n\n- `ctx.parent`: Another object, probably a parent component or context, holding the \"piku\" related help text. \n\n\n## Output:\n\n-  The help text for \"piku,\" formatted and displayed.  \n"},"piku__cmd_scp":{"label":"cmd_scp","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":1699,"endLineNo":1703,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L1699-L1703&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"##  Code Analysis\n\n**Quick Summary:**\n\nThis function executes an `scp` command to transfer files using the arguments provided within the `ctx.args` variable.  The command is run from the `GIT_ROOT` directory, indicating it's likely used for interacting with a Git repository.\n\n**Inputs:**\n\n* `ctx.args`: This likely represents a list of strings containing the arguments for the `scp` command, specifying the source, destination, and potentially other options.\n* `GIT_ROOT`: This variable points to the root directory of a Git repository.\n\n**Output:**\n\n* The function does not explicitly return a value.\n* The output of the `scp` command is executed directly in the terminal or shell environment. \n\n\n\n"},"piku__expandvars__replace_var":{"label":"replace_var","systemPath":"/home/sanjay/Development/explore/piku/piku.py","relativePath":"piku.py","lineNo":315,"endLineNo":317,"emgithubIframeLink":"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fpiku%2Fpiku%2Fblob%2Fmaster%2Fpiku.py%23L315-L317&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on","description":"## Code Breakdown:\n\n**Quick Summary:**\n\nThis function retrieves a value from an environment object (`env`) using a regular expression match. It prioritizes a value based on the matched group, falling back to a provided default or original match if a suitable group isn't found.\n\n**Inputs:**\n\n* `match`:  A match object resulting from a successful regular expression match.\n* `env`: An environment object that stores key-value pairs.\n* `default`: An optional default value to return if no matching group is found.\n\n**Output:**\n\n* A value retrieved from the environment object (`env`) based on the regex match. \n* The value could be:\n    * The value associated with a specific captured group in the regex match.\n    * The default value provided if no suitable group is found.\n    * The original matched string if a default value is not provided. \n\n\n\n\n"}}