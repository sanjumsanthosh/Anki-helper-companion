{
    "ANKIConfig": {
        "GIT_URL": "https://github.com/FujiwaraChoki/MoneyPrinter/blob/main/"
    },
    "gpt__generate_metadata": {
        "label": "generate_metadata",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/gpt.py",
        "relativePath": "Backend/gpt.py",
        "lineNo": 230,
        "endLineNo": 264,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fgpt.py%23L230-L264&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]** This Python function generates metadata (title, description, and keywords) for a YouTube Shorts video based on a given subject and script. It utilizes an AI model to create compelling and SEO-optimized content.\n\n**[Inputs]**\n\n* `video_subject (str)`:  The topic or theme of the video.\n* `script (str)`:  The written text of the video.\n* `ai_model (str)`: The name or identifier of the AI model to be used.\n\n**[Output]**\n\n* `title (str)`:  A catchy and SEO-friendly title for the video.\n* `description (str)`: A brief and engaging description of the video.\n* `keywords (List[str])`: A list of relevant keywords for the video. \n\n\n"
    },
    "gpt__generate_response": {
        "label": "generate_response",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/gpt.py",
        "relativePath": "Backend/gpt.py",
        "lineNo": 22,
        "endLineNo": 68,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fgpt.py%23L22-L68&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick summary]\nThis function generates a script for a video based on a given subject using different AI models. It determines the appropriate AI model (g4f, openai, gemmini) and sends a prompt to generate the video script. The purpose of this code is to automate the process of scriptwriting for videos using AI.\n\n[Inputs]\n* `video_subject (str)`: The topic or theme of the video.\n* `ai_model (str)`: The specific AI model to be used for script generation (e.g., 'g4f', 'gpt3.5-turbo', 'gpt4', 'gemmini').\n\n[Output]\n* `str`: A script generated by the chosen AI model for the provided video subject.  \n\n\n"
    },
    "gpt__generate_script": {
        "label": "generate_script",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/gpt.py",
        "relativePath": "Backend/gpt.py",
        "lineNo": 69,
        "endLineNo": 158,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fgpt.py%23L69-L158&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown \n\n**[Quick summary]** This function generates a video script based on a given subject, desired paragraph number, and selected AI model. It cleans the generated script, removes unnecessary formatting, and selects the required number of paragraphs.\n\n**[Inputs]**\n\n*  `video_subject` (str): The topic of the video.\n*  `paragraph_number` (int): The number of paragraphs the script should have.\n* `ai_model` (str): The AI model to use for script generation.\n\n\n\n**[Output]**\n\n*  A string containing the generated video script with the specified number of paragraphs. \n"
    },
    "gpt__get_search_terms": {
        "label": "get_search_terms",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/gpt.py",
        "relativePath": "Backend/gpt.py",
        "lineNo": 159,
        "endLineNo": 229,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fgpt.py%23L159-L229&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick Summary:** This function generates a list of stock video search terms based on a provided video subject. It leverages an AI model to generate the terms, ensuring they are relevant and formatted as a JSON-array of strings. The purpose is to assist in finding suitable stock footage for video projects.\n\n**Inputs:**\n\n* `video_subject`:  A string describing the main topic of the video.\n* `amount`: An integer specifying the number of search terms to generate.\n* `script`: The full script of the video (likely used for context by the AI model).\n* `ai_model`: A string identifying the AI model to be used for term generation.\n\n**Output:**\n\n* A list of strings representing relevant stock video search terms. This list is formatted as a JSON-array. \n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "main__cancel": {
        "label": "cancel",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/main.py",
        "relativePath": "Backend/main.py",
        "lineNo": 346,
        "endLineNo": 354,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fmain.py%23L346-L354&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]**\n\nThis Python function handles cancellation requests for a video generation process. It sets a global flag indicating that generation should stop, sends a success message to the client, and returns a JSON response confirming cancellation. \n\n**[Inputs]**\n\n- `colored(\"[!] Received cancellation request...\", \"yellow\")`: A print statement likely used for logging or displaying a message to the user.\n- `global GENERATING`: Declares the `GENERATING` variable as global, meaning it can be modified within the function.\n- `GENERATING = False`: Sets the `GENERATING` flag to False, effectively stopping the video generation process.\n- `jsonify({\"status\": \"success\", \"message\": \"Cancelled video generation.\"})`:  A function call to convert a Python dictionary containing status and message information into a JSON format for transmission to the client.\n\n**[Output]**\n\n- A JSON response object with the following structure: `{\"status\": \"success\", \"message\": \"Cancelled video generation.\"}`. This response indicates successful cancellation to the client that initiated the request. \n"
    },
    "main__generate": {
        "label": "generate",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/main.py",
        "relativePath": "Backend/main.py",
        "lineNo": 43,
        "endLineNo": 344,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fmain.py%23L43-L344&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis of Code Snippet\n\n**Quick Summary:**\n\nThis function generates a short video using AI-generated script, stock footage, and optional music. It aims to automate video creation based on user-provided text prompts and parameters, potentially for educational or entertainment purposes.\n\n**Inputs:**\n\n* `request`:  Contains user-defined parameters for video generation (likely a JSON object).\n* `global GENERATING`:  A flag likely used to signal whether video generation should proceed or be canceled.\n* `os.getenv(\"PEXELS_API_KEY\")`:  An API key for accessing the Pexels stock video library.\n* `client_secrets_file`: Path to a Google Cloud Platform credentials file potentially used for YouTube integration.\n\n**Output:**\n\n* Returns a JSON object:\n    *  `status`: Indicates success (\"success\") or failure (\"error\").\n    *  `message`:  Provides a brief description of the outcome.\n    *  `data`:  Contains the path to the generated video file.\n\n\n\n"
    },
    "search__search_for_stock_videos": {
        "label": "search_for_stock_videos",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/search.py",
        "relativePath": "Backend/search.py",
        "lineNo": 9,
        "endLineNo": 72,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fsearch.py%23L9-L72&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown: Stock Video Search\n\n**Quick Summary:**\nThis Python function searches the Pexels API for stock videos matching a given query. It filters videos based on minimum duration, selects the highest resolution available for each video, and provides a list of resulting video URLs. The purpose is to retrieve relevant and high-quality stock videos programmatically.\n\n**Inputs:**\n\n* `query (str)`: The text search term used to find videos on Pexels. \n* `api_key (str)`:  A unique API key for authentication with the Pexels API.\n* `it` (int): Number of video results to return. \n* `min_dur` (int): Minimum video duration in seconds.\n\n**Output:**\n\n*  A list of strings, each representing a URL for a stock video. \n\n\n"
    },
    "tiktokvoice__generate_audio": {
        "label": "generate_audio",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/tiktokvoice.py",
        "relativePath": "Backend/tiktokvoice.py",
        "lineNo": 112,
        "endLineNo": 120,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Ftiktokvoice.py%23L112-L120&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Summarry: This function sends a text string and a voice preference to a text-to-speech API endpoint. It receives the generated audio content as a response and returns it. The purpose of the code is to convert written text into an audio file using an external API. \n\nInputs:\n* `text`: The text string to be converted to speech.\n* `voice`:  A parameter specifying the desired voice for the synthesized speech (likely a code or identifier).\n* `current_endpoint`:  A variable holding the URL of the currently active text-to-speech API endpoint.\n* `ENDPOINTS`: A dictionary or list likely containing various text-to-speech API endpoints.\n\nOutput:\n* `response.content`: The raw binary audio data generated by the API. \n\n\n"
    },
    "tiktokvoice__get_api_response": {
        "label": "get_api_response",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/tiktokvoice.py",
        "relativePath": "Backend/tiktokvoice.py",
        "lineNo": 98,
        "endLineNo": 104,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Ftiktokvoice.py%23L98-L104&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis\n\n**[Quick summary]** This function fetches audio from a given endpoint URL, likely an API, and returns the raw response object. The purpose seems to be retrieving audio data for processing or playback.\n\n**[Inputs]**\n* `current_endpoint`: Likely a string representing the API endpoint URL.\n\n**[Output]**\n* `response`: A `requests.Response` object containing the audio data retrieved from the endpoint. \n\n\n"
    },
    "tiktokvoice__save_audio_file": {
        "label": "save_audio_file",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/tiktokvoice.py",
        "relativePath": "Backend/tiktokvoice.py",
        "lineNo": 105,
        "endLineNo": 111,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Ftiktokvoice.py%23L105-L111&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:\n\n**Quick Summary:** This code snippet takes a base64 encoded audio string (`base64_data`), decodes it, and saves the raw audio data to a file specified by the `filename` parameter. The purpose is to download and store audio data received in a base64 encoded format.\n\n**Inputs:**\n- `base64_data`: A string containing base64 encoded audio data.\n- `filename`: A string representing the desired name for the saved audio file.\n\n**Output:**\n- The raw audio data is saved as a file on the system. \n- The filename specified by the user determines the name of the saved audio file. \n\n\n"
    },
    "tiktokvoice__split_string": {
        "label": "split_string",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/tiktokvoice.py",
        "relativePath": "Backend/tiktokvoice.py",
        "lineNo": 79,
        "endLineNo": 97,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Ftiktokvoice.py%23L79-L97&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the code:\n\n**[Quick Summary]**\n\nThis Python function takes a string as input and breaks it into chunks of a specified maximum size. It iterates through the words in the string, adding them to a temporary buffer until the buffer's length exceeds the desired chunk size.  The function then appends the formed chunk to a result list and resets the buffer for the next chunk. \n\n**[Inputs]**\n\n*  `string`: The input string to be chunked.\n* `chunk_size`:  An integer representing the maximum number of characters allowed in each chunk.\n\n**[Output]**\n\n* `result`: A list of strings, where each string is a chunk of the original string, respecting the `chunk_size` limit.  \n\n\nLet me know if you have any other coding snippets you'd like me to analyze! \n"
    },
    "tiktokvoice__tts": {
        "label": "tts",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/tiktokvoice.py",
        "relativePath": "Backend/tiktokvoice.py",
        "lineNo": 121,
        "endLineNo": 207,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Ftiktokvoice.py%23L121-L207&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the provided code:\n\n**Quick Summary**\n\nThis function takes text as input, converts it to speech using a TikTok Text-to-Speech (TTS) API, and saves the generated audio to a file (with an option to play it). Its purpose is to demonstrate how to leverage TikTok's TTS capabilities for generating audio from text. \n\n**Inputs**\n\n* `text`: The text string to be converted into speech.\n* `voice`:  The desired voice for the TTS output (e.g., \"female,\" \"male\").\n* `filename`: The name of the audio file to save the output to.\n* `play_sound`: A boolean flag indicating whether to play the generated audio immediately.\n\n**Output**\n\n* An audio file saved to the specified `filename`.\n* A success or error message printed to the console depending on the outcome of the TTS process.\n* If `play_sound` is `True`, the generated audio will be played. \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "tiktokvoice__tts__generate_audio_thread": {
        "label": "generate_audio_thread",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/tiktokvoice.py",
        "relativePath": "Backend/tiktokvoice.py",
        "lineNo": 172,
        "endLineNo": 184,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Ftiktokvoice.py%23L172-L184&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n **[Quick Summary]** This function  generates audio from given text (`text_part`) using a specified voice (`voice`). It extracts the base64 encoded audio data, potentially from different sources depending on the `current_endpoint`. Finally, it stores the audio data in a list (`audio_base64_data`).\n\n**[Inputs]**\n\n* `text_part`:  The text string to be converted into audio.\n* `voice`:  The desired voice identifier or name.\n* `current_endpoint`: An integer likely indicating the source or index of the audio generation endpoint.\n* `index`: An integer specifying the position within the `audio_base64_data` list where the generated audio should be stored.\n* `audio_base64_data`: A list presumably holding base64 encoded audio data.\n\n **[Output]**\n\n* `audio_base64_data`: The list potentially modified to include the base64 encoded audio data at the specified `index`.\n*  \"error\":  A string indicating an error occurred during audio generation.\n\n\n"
    },
    "utils__check_env_vars": {
        "label": "check_env_vars",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/utils.py",
        "relativePath": "Backend/utils.py",
        "lineNo": 96,
        "endLineNo": 118,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Futils.py%23L96-L118&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Environment Variable Checker Code Analysis\n\n**Quick Summary:** This function checks if required environment variables (`PEXELS_API_KEY`, `TIKTOK_SESSION_ID`, `IMAGEMAGICK_BINARY`) are set. If any are missing, it prints an error message and exits the program. \n\n**Purpose:** To ensure the necessary environmental settings are in place before the program runs.\n\n**Inputs:**\n\n* `required_vars`:  A list of required environment variable names (strings)\n*  `os`: Likely the Python `os` module for system-level operations.\n\n**Output:**\n\n*  None if all environment variables are set\n    * Error message and program termination if any required environment variable is missing.  \n"
    },
    "utils__choose_random_song": {
        "label": "choose_random_song",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/utils.py",
        "relativePath": "Backend/utils.py",
        "lineNo": 80,
        "endLineNo": 95,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Futils.py%23L80-L95&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown \n\n**Quick Summary:** \nThis Python function randomly selects a song from a directory named \"Songs\" located one level above the script's directory. It logs the chosen song's name and returns its full path.  The purpose of the code is to provide a way to play a random song from a music library. \n\n**Inputs:**\n* None - It doesn't explicitly take any input arguments.\n\n**Output:**\n* A string representing the full path to the randomly chosen song file. \n\n\n"
    },
    "utils__clean_dir": {
        "label": "clean_dir",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/utils.py",
        "relativePath": "Backend/utils.py",
        "lineNo": 16,
        "endLineNo": 39,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Futils.py%23L16-L39&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis function aims to completely empty a specified directory. It first checks if the directory exists and creates it if it doesn't. Then, it iterates through all files within the directory and removes them individually. \n\nThe code's purpose is to provide a way to clean out a directory, potentially for maintenance or resetting its contents.\n\n## Inputs\n\n* `path` (str):  \n    * Represents the full path to the directory that needs to be cleaned.\n\n## Output\n\n*  None:  \n    * The function doesn't explicitly return a value. \n*  Log messages:\n    * `logger.info` statements will output information about the directory creation, file removals, and the completion status, providing feedback on the operation's progress. \n*  Potential error messages: \n    *  `logger.error` statements will log any exceptions encountered during the process, helping in identifying issues. \n\n\n"
    },
    "utils__fetch_songs": {
        "label": "fetch_songs",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/utils.py",
        "relativePath": "Backend/utils.py",
        "lineNo": 40,
        "endLineNo": 79,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Futils.py%23L40-L79&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]** This function downloads a zip file of songs from a given URL, extracts the songs, and saves them in a \"Songs\" directory for use with generated videos. It handles directory creation and error handling during the process.\n\n\n**[Inputs]**\n*  `zip_url (str)`: The URL of the zip file containing the songs.\n\n**[Output]**\n* None, but the function successfully downloads and extracts the songs into the \"Songs\" directory. \n\n\n"
    },
    "video____generate_subtitles_assemblyai": {
        "label": "__generate_subtitles_assemblyai",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 40,
        "endLineNo": 71,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L40-L71&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis Python function generates subtitles from an audio file using the AssemblyAI API. It takes the audio file path as input, detects the language, transcribes the audio, and exports the subtitles in SRT format. The function aims to provide automated speech-to-text transcription and subtitle creation. \n\n## Inputs\n\n-  `audio_path (str)`: The full path to the audio file.\n\n## Output\n\n- `subtitles (str)`: A string containing the generated subtitles in SRT format. \n\n\n\n"
    },
    "video____generate_subtitles_locally": {
        "label": "__generate_subtitles_locally",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 72,
        "endLineNo": 104,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L72-L104&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis \n\n**[Quick Summary]** This function generates SRT (SubRip) formatted subtitles from a list of sentences and corresponding audio clips.  It calculates the start and end times for each subtitle based on the duration of the audio clips and then combines them into a single string. The purpose is to create a text file containing timed subtitles for a video or audio production.\n\n**[Inputs]**\n* `sentences`: A list of strings representing each spoken sentence in the audio.\n* `audio_clips`:  A list of `AudioFileClip` objects, where each object represents a segment of the audio containing one or more sentences.\n\n**[Output]**\n* A string containing the generated SRT subtitles formatted with indices, start/end times, and the corresponding sentences. \n"
    },
    "video__combine_videos": {
        "label": "combine_videos",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 146,
        "endLineNo": 207,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L146-L207&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function takes a list of video files and combines them into a single video file. It ensures the combined video doesn't exceed a specified maximum duration and each individual clip is within a maximum clip duration limit.\n\n## Inputs\n\n* **video_paths:** A list of paths to the input video files.\n* **max_duration:** The maximum allowed duration for the combined video.\n* **max_clip_duration:** The maximum allowed duration for each individual clip in the combined video.\n* **threads:** The number of threads to use for video processing.\n\n## Output\n\n* A string representing the path to the combined video file. \n"
    },
    "video__generate_subtitles": {
        "label": "generate_subtitles",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 105,
        "endLineNo": 145,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L105-L145&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick summary]\nThis function generates subtitles for an audio file.  It uses AssemblyAI for transcription if an API key is provided, otherwise, it relies on local processing of sentences and audio clips. Finally, it saves the generated subtitles to a file and equalizes their length.\n\n[Inputs]\n- `audio_path`:  The file location of the audio file.\n- `sentences`: A list of sentences extracted from the audio.\n- `audio_clips`: A list of audio segments (likely representing parts of the audio file).\n- `voice`:  Information about the speaker's voice (likely used by AssemblyAI).\n- `ASSEMBLY_AI_API_KEY`:  An API key for accessing the AssemblyAI service (optional).\n\n[Output]\n- `subtitles_path`: A string containing the path to the generated SRT subtitle file. \n\n\n"
    },
    "video__generate_video": {
        "label": "generate_video",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 208,
        "endLineNo": 248,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L208-L248&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function generates a video with embedded subtitles and an audio track. It takes a combined video clip, text-to-speech audio, subtitle file, and video processing parameters as input, then combines them into a final video file.\n\n## Inputs\n* `combined_video_path`: The path to the base video file.\n* `tts_path`: The path to the audio file generated from text-to-speech.\n* `subtitles_path`: The path to a subtitle file containing the text for the subtitles.\n* `threads`: An integer specifying the number of threads to use during video processing.\n* `subtitles_position`: A string specifying the horizontal and vertical position of subtitles (e.g., \"10,50\").\n\n## Output\n*  `\"output.mp4\"`: The path to the generated video file containing the combined video, subtitles, and audio.  \n\n\n\n"
    },
    "video__save_video": {
        "label": "save_video",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 21,
        "endLineNo": 39,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L21-L39&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown:\n\n**[Quick summary]**\n\nThis function downloads a video from a given URL and saves it to a temporary directory. It generates a unique ID for the video file and returns the path to the saved video.\n\n**[Inputs]**\n\n*  `video_url`:  The web address of the video to be downloaded.\n* `directory`:  The full file path to the temporary folder where the video will be stored. \n\n**[Output]**\n\n* `str`: The full file path to the saved video file within the specified directory. \n\n\n"
    },
    "video____generate_subtitles_locally__convert_to_srt_time_format": {
        "label": "convert_to_srt_time_format",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 83,
        "endLineNo": 88,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L83-L88&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis Python function converts a given number of total seconds into a time string formatted as \"HH:MM:SS,mmm\" (hours, minutes, seconds, milliseconds).  This format is commonly used in subtitle files (SRT),  allowing for precise timing of text display.\n\n## Inputs\n\n* `total_seconds`: This is likely a numerical value representing the duration in seconds. \n\n## Output\n\n* A string formatted as \"HH:MM:SS,mmm\" representing the time equivalent to the input `total_seconds`. \n"
    },
    "video__generate_subtitles__equalize_subtitles": {
        "label": "equalize_subtitles",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/video.py",
        "relativePath": "Backend/video.py",
        "lineNo": 118,
        "endLineNo": 122,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fvideo.py%23L118-L122&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary**\n\nThis code snippet utilizes a function called `srt_equalizer.equalize_srt_file` to adjust the length of subtitles in a SubRip (.srt) file. The purpose is likely to standardize subtitle lengths for better readability, speaker clarity, or compatibility with specific video editing software.\n\n**Inputs**\n\n*  `srt_path`: The path to the input SubRip subtitle file (.srt).\n*  `srt_path`: This appears to be a duplicate of the first input, likely an error. It should be changed to a different path if saving the modified file.\n*  `max_chars`: An integer specifying the maximum allowed characters per subtitle line.\n\n**Output**\n\n*   A modified SubRip subtitle file (potentially at a different path) with adjusted subtitle lengths, ensuring no line exceeds `max_chars`.\n\n\n\n\n"
    },
    "youtube__get_authenticated_service": {
        "label": "get_authenticated_service",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/youtube.py",
        "relativePath": "Backend/youtube.py",
        "lineNo": 63,
        "endLineNo": 83,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fyoutube.py%23L63-L83&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Breakdown: \n\n**Quick Summary:**\nThis function retrieves an authenticated YouTube Data API v3 service object. It first handles the OAuth2 authentication process, either restoring cached credentials or prompting for user authorization if necessary.  This allows the code to interact with YouTube data programmatically.\n\n**Inputs:**\n\n*  `CLIENT_SECRETS_FILE`:  A file path containing client secret information for authenticating with the YouTube API.\n*  `SCOPES`: A list of API scopes defining the permissions the application requests.\n*  `MISSING_CLIENT_SECRETS_MESSAGE`: A message displayed if the client secret file is not found.\n*  `sys.argv[0]`: The script's name, used for storing credentials.\n*  `argparser`: An argument parser used to handle command-line flags.\n*  `flow`: An OAuth2 flow object configured with the client secrets and scopes.\n*  `storage`: An object used for storing and retrieving OAuth2 credentials.\n*  `YOUTUBE_API_SERVICE_NAME`: A string representing the YouTube API service name.\n*  `YOUTUBE_API_VERSION`: A string representing the YouTube API version.\n\n\n\n\n**Output:**  \n\n*  An authenticated `youtube` service object, ready for interacting with the YouTube Data API. \n"
    },
    "youtube__initialize_upload": {
        "label": "initialize_upload",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/youtube.py",
        "relativePath": "Backend/youtube.py",
        "lineNo": 84,
        "endLineNo": 122,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fyoutube.py%23L84-L122&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis function uploads a video to YouTube using the Google API. It takes video details like title, description, category, and privacy settings as input and orchestrates the upload process. The function uses a resumable upload mechanism for larger videos. \n\n## Inputs\n\n* **`youtube`**: An authenticated YouTube service object, likely from the `google-api-python-client` library.\n* **`options`**:  A dictionary containing video details:\n    *  **`title`**:  The title of the video.\n    *  **`description`**:  A description of the video.\n    *  **`keywords`**: A comma-separated string of keywords for the video.\n    *  **`category`**: The category the video belongs to.\n    *  **`privacyStatus`**: The privacy setting for the video (e.g., \"public\", \"private\", \"unlisted\").\n*  **`file`**: The local path to the video file to be uploaded.\n\n## Output\n\n* **`response`**: The API response object containing information about the uploaded video. \n\n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "youtube__resumable_upload": {
        "label": "resumable_upload",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/youtube.py",
        "relativePath": "Backend/youtube.py",
        "lineNo": 123,
        "endLineNo": 162,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fyoutube.py%23L123-L162&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function implements an exponential backoff strategy to handle upload errors for a video file. It repeatedly attempts to upload in chunks, increasing the waiting time between each retry if an error occurs.  The purpose is to ensure successful video upload even in the presence of transient network issues.\n\n## Inputs\n\n*  `insert_request (MediaFileUpload)`:  This likely represents the object holding the details and context for uploading the video to a specific service.\n\n## Output\n\n*  `response`: This variable is expected to hold the success response from the video upload process, potentially containing information like the uploaded video's ID. \n\n\n\n"
    },
    "youtube__upload_video": {
        "label": "upload_video",
        "systemPath": "C:/Users/sanju/Desktop/projects/explore/MoneyPrinter/Backend/youtube.py",
        "relativePath": "Backend/youtube.py",
        "lineNo": 163,
        "endLineNo": 198,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FFujiwaraChoki%2FMoneyPrinter%2Fblob%2Fmain%2FBackend%2Fyoutube.py%23L163-L198&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]** \n\nThis function uploads a video to YouTube. It authenticates with the YouTube API, retrieves the user's channel ID, and initiates the upload process using provided video details like title, description, and privacy settings. Error handling is included to manage potential HTTP errors and re-authenticate if necessary.\n\n\n**[Inputs]**\n\n*  `video_path`: The file path of the video to be uploaded.\n*  `title`: The title of the video.\n*  `description`:  A description of the video.\n*  `category`: The YouTube category for the video.\n*  `keywords`: Keywords associated with the video.\n*  `privacy_status`: The desired privacy level for the video (e.g., public, private, unlisted).\n\n**[Output]**\n\n*  `video_response`:  A dictionary containing the response from the YouTube API after the video upload process.  \n\n\n\nLet me know if you'd like me to elaborate on any of these points!"
    }
}