{
    "ANKIConfig": {
        "GIT_URL": "https://github.com/stanford-oval/storm/blob/main/"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle": {
        "label": "StormArticle",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 191,
        "endLineNo": 496,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L191-L496&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis Python function appears to manage the structure and content of a \"StormArticle\" object, which likely represents a structured document about a specific storm event. It allows for adding, removing, and modifying sections, references, and the overall ordering within a hierarchical document.\n\n## Inputs\n\n* **`topic_name`**:  The main topic or subject of the storm article.\n* **`current_section_content`**: The text content of a new or updated section.\n* **`current_section_info_list`**: A list of dictionaries containing information about individual references within the storm article.\n\n     Perhaps these storm information pieces include details about the storm's intensity, location, timeline, or source.\n\n\n*\n\n\n## Output\n\n\n* **`Optional[ArticleSectionNode]`**: A reference to the updated `ArticleSectionNode` if the operation was successful. If unsuccessful, it returns `None`.\n\n\n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing": {
        "label": "ArticleTextProcessing",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 245,
        "endLineNo": 509,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L245-L509&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Summary\n\nThis code defines several static methods designed to process and clean up text strings, particularly those containing citations and structured formatting. These methods aim to standardize the format of citations, remove unnecessary content (like unfinished sentences or summaries), and organize text into a hierarchical structure. The overall purpose seems to be preparing text data for analysis or further processing.\n\n## Inputs\n\n* **string**: The text input to be processed by various methods. These could be articles, conversation logs, outlines, etc.\n* **max_word_count**:  An integer specifying the maximum number of words allowed in the processed output.\n* **citation_map**: A dictionary mapping original citations to unified citations, possibly for consistency.\n\n## Output\n\n*  Modified string with word count limited to `max_word_count` and complete line preservation.\n\n\n* Dictionary representing grouped citations. \n    *\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner": {
        "label": "STORMWikiRunner",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 122,
        "endLineNo": 327,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L122-L327&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## STORM Wiki Pipeline Runner Analysis\n\n**Quick Summary**\n\nThis Python function defines a pipeline for automatically generating a researched and polished article on a given topic using a large language model (LLM). It involves stages like knowledge curation, outline generation, article drafting, and polishing.\n\n**Inputs**\n* `args`:  Arguments likely containing information about the pipeline execution (e.g., output directory, model configurations).\n* `lm_configs`: Configuration settings for the LLMs used in the pipeline.\n* `rm`:  A retriever module probably responsible for fetching information from a knowledge base.\n\n\n**Output:**\n* A file containing the final polished article in the specified output directory.\n* Several intermediate files capturing conversation logs, research results, outlines, and draft articles.  \n"
    },
    "knowledge_storm__utils__QdrantVectorStoreManager": {
        "label": "QdrantVectorStoreManager",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 43,
        "endLineNo": 244,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L43-L244&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here is a breakdown of the provided code:\n\n**Quick Summary**\n\nThis function creates or updates a Qdrant vector store from a CSV file. It takes the  CSV file path, Qdrant connection details (either online URL and API key or offline path), and embedding model details as input. \n\nThe function is designed to help users build and manage vector indexes for Qdrant, enabling efficient semantic search based on document embeddings.\n\n\n**Inputs**\n\n*  `collection_name`: Name of the Qdrant collection to populate.\n*  `vector_db_mode`:  Specifies whether the vector store is hosted online or offline.  Options are 'online' or 'offline'.\n*  `file_path`: Path to the CSV file containing the documents.\n*  `content_column`: Name of the column in the CSV file that holds the document content.\n*  `title_column`, `url_column`, `desc_column`:  Names of columns in the CSV file for title, URL, and description information (optional).\n*  `batch_size`: Number of documents to process as a batch.\n*  `chunk_size`:  Size of each chunk when splitting documents (used for potentially large documents).\n*  `chunk_overlap`: Overlap between chunks for splitting documents.\n*  `vector_store_path`: Path to the directory where the offline vector store is located.\n*  `url`: URL of the online Qdrant server.\n*  `qdrant_api_key`: API key for the online Qdrant server.\n*  `embedding_model`: Name of the Hugging Face embedding model to use.\n*  `device`: Device to use for embedding calculations (e.g., \"mps\", \"cuda\", \"cpu\").\n\n**Output** \n\n*  The function does not explicitly return a value.\n*  It updates a Qdrant vector store with the documents from the given CSV file.\n\n\n"
    },
    "knowledge_storm__rm__VectorRM": {
        "label": "VectorRM",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 166,
        "endLineNo": 309,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L166-L309&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "**[Quick Summary]**\n\nThis Python function allows you to search a collection of documents stored in Qdrant. It uses a provided embedding model to find the most relevant documents based on a given query or a list of queries.\n\n**[Inputs]**\n\n*  `query_or_queries (Union[str, List[str]])`:  The search query, which can be a single string or a list of strings.\n* `exclude_urls (List[str])`: A list of URLs to exclude from the search results (currently not used in the code).\n\n**[Output]**\n\n\n* A list of dictionaries, where each dictionary represents a relevant document and contains the following keys:\n    * `description`: A description of the document.\n    * `snippets`: A list of strings containing snippets from the document.\n    * `title`: The title of the document.\n    * `url`: The URL of the document. \n"
    },
    "knowledge_storm__rm__SerperRM": {
        "label": "SerperRM",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 310,
        "endLineNo": 445,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L310-L445&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function uses the Serper API to perform Google searches based on provided queries. It retrieves search results including snippets, titles, URLs, and knowledge graph summaries. The purpose of the code is to offer a programmatic way to access Google search data through the Serper API.\n\n\n## Inputs\n\n* `query_or_queries`:  A string or list of strings representing the search queries.\n* `exclude_urls`:  A list of strings (currently not used).\n\n## Output\n\n* A list of dictionaries.\n    * Each dictionary contains:\n        * `snippets`: A list of search snippets.\n        * `title`: The title of the search result.\n        * `url`: The URL of the search result.\n        * `description`: A knowledge graph description related to the search result. \n"
    },
    "knowledge_storm__utils__QdrantVectorStoreManager__create_or_update_vector_store": {
        "label": "create_or_update_vector_store",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 113,
        "endLineNo": 244,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L113-L244&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function ingests data from a CSV file, processes each row as a document, generates embeddings for the content, and adds those documents with their associated metadata (title, URL, description) to a Qdrant vector database. The purpose is to build a semantic search index for the provided dataset.\n\n## Inputs\n\n* `collection_name`: Name of the Qdrant collection to store the data.\n* `vector_db_mode`:  Operational mode of the vector database (online or offline).\n* `file_path`: Path to the input CSV file.\n* `content_column`: Name of the column in the CSV containing the text content.\n* `title_column`, `url_column`, `desc_column`: Column names for title, URL, and description respectively (optional, default values provided).\n* `batch_size`: Number of documents added to Qdrant per batch.\n* `chunk_size`:  Size for splitting text content for embedding.\n* `chunk_overlap`: Overlap between chunks when splitting text content.\n* `vector_store_path`: Path to store the offline vector database.\n* `url`, `qdrant_api_key`:  URL and API key for connecting to the online Qdrant server (required for online mode).\n* `embedding_model`: Name of the HuggingFace embedding model to use.\n* `device`: Device to use for running the embedding model (e.g., \"mps\", \"cuda\", \"cpu\").\n\n## Output\n\n* The function updates the Qdrant vector store with the embedded documents from the CSV file.\n\n"
    },
    "knowledge_storm__lm__ClaudeModel": {
        "label": "ClaudeModel",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 236,
        "endLineNo": 360,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L236-L360&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Anthropic API Interaction Code Analysis\n\n**Quick summary:**\n\nThis Python function interacts with the Anthropic Claude API to generate text completions based on a given prompt. It includes token tracking and error handling mechanisms for a reliable API interaction.  \n\n**Inputs:**\n\n- `prompt`: The text input for which the model will generate completions.\n- `only_completed`: (bool)  Whether to only return completed responses, ignoring those stopped by token limits.\n- `return_sorted`: (bool)  Whether to return completion choices sorted by their probabilities.\n- `kwargs`: Additional keyword arguments to customize the request, such as temperature, max_tokens, and top_k.\n  \n**Output:**\n\n- A list of text strings representing the generated completion choices from the Anthropic API.   \n\n\n\n"
    },
    "knowledge_storm__lm__TogetherClient": {
        "label": "TogetherClient",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 475,
        "endLineNo": 598,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L475-L598&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function acts as a wrapper for the `dspy.Together` API, simplifying interactions and handling token usage. Its purpose is to provide a user-friendly interface for leveraging Together's capabilities while managing resource consumption.\n\n## Inputs\n\n* `prompt`: The text prompt to be sent to the Together API.\n* `use_chat_api`: Boolean indicating whether to use the chat API endpoint. \n* `kwargs`: A dictionary of optional keyword arguments that customize the API request (e.g., temperature, max tokens, etc.).\n* `hf_tokenizer_name`: Name of the HuggingFace tokenizer to use for applying the chat template.\n\n## Output\n\n* A dictionary containing the original prompt and a list of choices generated by the Together API. Each choice is represented as a dictionary containing its text. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__StormKnowledgeCurationModule": {
        "label": "StormKnowledgeCurationModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 198,
        "endLineNo": 321,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L198-L321&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:  Knowledge Curation Function\n\n**[Quick Summary]**\n\nThis function simulates conversations with various personas to gather information about a given topic. It leverages retrieved information and a language model to conduct these conversations, ultimately generating an organized table of collected knowledge. This code likely forms part of a larger AI system designed for research and information retrieval.\n\n**[Inputs]**\n\n* **topic:** A natural language description of the subject to be researched.\n* **ground_truth_url:** A URL potentially linking to reliable source material related to the topic.\n* **callback_handler:** A function to handle events and updates during the information gathering process.\n* **max_perspective:** An optional parameter (default 0) to limit the number of personas used in the conversation simulations.\n* **disable_perspective:** A boolean flag to indicate whether to use only one generic persona (default False).\n* **return_conversation_log:** A boolean flag to determine if conversation logs are returned along with the information table (default False). \n\n**[Outputs]**\n\n* **StormInformationTable:** An organized representation of the collected information, structured as a table.\n*  **Dict (if return_conversation_log=True):** A dictionary containing logs of the individual conversations for debugging or analysis. \n\n\n\n\nLet me know if you have any other questions!"
    },
    "knowledge_storm__lm__GoogleModel": {
        "label": "GoogleModel",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 599,
        "endLineNo": 716,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L599-L716&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Gemini API Wrapper Analysis\n\n**Quick summary:** This Python code defines a class that simplifies interaction with the Google Gemini API for text generation. It handles API configuration, token usage tracking, and basic request execution, making it easier for developers to leverage Google's generative AI capabilities.\n\n**Inputs:**\n\n* `prompt`: The text input for the model to generate a response to.\n* `model`: The name of the Gemini model to use for generation.\n* `api_key`: (Optional) Your Google API key for authentication.\n* `kwargs`:  Additional keyword arguments passed to the Gemini API, including parameters like temperature, max_output_tokens, and top_p.\n\n**Output:**\n\n* A list of generated text completions based on the provided prompt and model parameters. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable": {
        "label": "StormInformationTable",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 96,
        "endLineNo": 190,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L96-L190&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis \n\n**[Quick Summary]**\nThis Python function `retrieve_information` searches for relevant information within a pre-processed dataset based on provided user queries. It utilizes semantic similarity  to identify documents containing snippets most relevant to the queries and returns a list of matching StormInformation objects. \n\nThe broader purpose of this code appears to be building an information retrieval system that can efficiently answer questions or requests based on a curated knowledge base. \n\n**[Inputs]**\n* `queries`:  A string or a list of strings representing user queries.\n* `search_top_k`: An integer specifying the number of top results to return for each query.\n\n\n**[Output]**\n\n* A list of StormInformation objects, each representing a matching piece of information found in the dataset. \n"
    },
    "knowledge_storm__interface__Article": {
        "label": "Article",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 69,
        "endLineNo": 162,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L69-L162&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  code analysis \n\n**Quick Summary**\n\nThis code defines a base class for representing an article structure, likely for outlining or text processing. It allows searching for sections by name, generating an outline tree, retrieving first-level section names, and abstract methods for string conversion and object creation from text.  \n\n**Inputs**\n\n* `topic_name`:  The overall topic or title of the article.\n* `node`:  A specific `ArticleSectionNode` object within the article structure. \n* `name`:  The name of the section to search for.\n\n**Output**\n\n* `Optional[ArticleSectionNode]`: The found `ArticleSectionNode` if the section name matches, otherwise `None`. \n* `Dict[str, Dict]`: A nested dictionary representing the hierarchical outline of the article.\n* `List[str]`: A list containing the names of the first-level sections. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__StormArticleGenerationModule": {
        "label": "StormArticleGenerationModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 15,
        "endLineNo": 108,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L15-L108&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "**[Quick Summary]** This function generates an article based on a given topic, information retrieved from a knowledge base, and a predefined outline.  It utilizes a language model to create sections of the article and combines them into a final structured article object. The purpose is to automate the process of creating informative and well-structured articles from existing data and knowledge. \n\n**[Inputs]**\n\n*  `topic`:  The subject of the article.\n*  `information_table`: A structured storage of relevant information related to the topic.\n*  `article_with_outline`:  A template outlining the structure of the article (likely with placeholder sections).\n\n**[Output]**\n\n* `StormArticle`: A data structure representing the generated article, containing sections of text and associated information. \n\n\n"
    },
    "knowledge_storm__rm__BingSearch": {
        "label": "BingSearch",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 75,
        "endLineNo": 165,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L75-L165&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Bing Search Summarizer\n\n**Quick Summary:** This function uses the Bing Search API to retrieve web pages for a given query. It then extracts snippets from these pages and returns a list of dictionaries, each containing information about a webpage (title, description, snippets, and URL).  \n\n**Inputs:**\n\n*  `query_or_queries`: The search query (can be a string or a list of strings).\n*  `exclude_urls`: A list of URLs to exclude from the search results.\n*  Other optional parameters are used to configure Bing API interactions and webpage processing. \n\n**Output:**\n\n* A list of dictionaries, where each dictionary represents a webpage. \n* Each dictionary contains 'url', 'title', 'description', and 'snippets' (a list of extracted string snippets). \n\n\n\n"
    },
    "knowledge_storm__lm__DeepSeekModel": {
        "label": "DeepSeekModel",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 108,
        "endLineNo": 196,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L108-L196&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## DeepSeek API Wrapper Function Analysis\n\n**Quick Summary:** \n\nThis function provides a Pythonic interface to the DeepSeek API, enabling users to send text prompts and receive generated responses. It emphasizes robust error handling, token usage tracking, and integration with the dspy framework. This wrapper aims to simplify the interaction with DeepSeek for developers.\n\n**Inputs:**\n\n* **prompt:**  The text input the user wants to send to DeepSeek for completion.\n* **only_completed:** A boolean flag (currently set as `assert only_completed, \"for now\"`) indicating whether only completed parts of the response are desired.\n* **return_sorted:**  A boolean flag (currently set as `assert return_sorted is False, \"for now\"`) suggesting options for sorting the generated responses.\n* **kwargs:** Additional keyword arguments that can be passed to the DeepSeek API for fine-tuning the response generation process.\n\n**Output:**\n\n* A list of strings containing the generated completions from DeepSeek. \n\n\n"
    },
    "knowledge_storm__lm__OpenAIModel": {
        "label": "OpenAIModel",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 21,
        "endLineNo": 107,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L21-L107&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Alright, here's a breakdown of the code snippet:\n\n**Quick Summary**\n\nThis function acts as a wrapper around OpenAI's GPT-3.5 API, specifically designed for text generation tasks. It allows you to send prompts to the model and receive generated text responses while also tracking the number of tokens used for both the prompt and the generated completion. The purpose is to provide a more controlled and informative way to interact with the OpenAI API.\n\n\n**Inputs**\n\n* `prompt`:  The text input you want the model to generate a response to.\n* `only_completed`: (Boolean) If True, only returns completions that reached a natural ending point (not truncated due to length).\n* `return_sorted`: (Boolean) If True,  and the number of completions (`n`) is greater than 1, returns completions sorted by their estimated quality (based on log probabilities).\n* `kwargs`:  Additional keyword arguments that can be passed directly to the underlying OpenAI API call.\n\n**Outputs**\n\n* A list of dictionaries, each representing a generated text completion.\n* Each dictionary likely contains fields such as the generated text and potentially other metadata about the completion.  \n\n\nLet me know if you have any other questions.\n"
    },
    "knowledge_storm__interface__Engine": {
        "label": "Engine",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 363,
        "endLineNo": 435,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L363-L435&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown:\n\n**Quick Summary:** This code defines a base class for an AI-powered article generation system. It tracks execution times, language model usage, and retrieval model usage, providing insights into system performance. The purpose is to facilitate logging and analysis of resource consumption during the article generation process.\n\n**Inputs:**\n\n*  `lm_configs`:  Likely a configuration object containing parameters for the language models used in the system, such as token budgets or specific model names.\n\n**Outputs:**\n\n\n*  Logs execution times, language model token usage, and retrieval model query counts for each decorated function call. \n*  `summary()`: Prints aggregated statistics on execution times, language model token usage, and retrieval model query counts.  \n*   `reset()`: Clears the stored time, LM cost, and RM cost data for new measurements.  \n\n\n\n"
    },
    "knowledge_storm__rm__SerperRM__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 373,
        "endLineNo": 445,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L373-L445&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function searches the web for provided queries using the Serper API. It processes the results, extracts snippets, titles, URLs, and descriptions, and returns them in a structured list of dictionaries.  The overall purpose is to provide a simplified way to access and organize search engine results programmatically.\n\n## Inputs\n\n* **query_or_queries:** \n    * A single string or a list of strings representing the search query.\n\n* **exclude_urls:** \n    * A list of strings meant to exclude specific URLs from the results (currently unused).\n \n\n\n## Output\n\n* A list of dictionaries, where each dictionary represents a search result and includes the following keys:\n    * **snippets:** A list of strings containing text snippets from the result.\n    * **title:** The title of the webpage.\n    * **url:** The URL of the webpage.\n    * **description:** A description of the webpage, potentially from a knowledge graph. \n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner__run": {
        "label": "run",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 255,
        "endLineNo": 327,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L255-L327&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## [Quick Summary]\n\nThis function orchestrates a multi-step process for generating a curated article on a given topic. It leverages information gathering through conversation, outlines creation, and article drafting and polishing to produce a final, polished article. This code aims to demonstrate a pipeline for automated content creation. \n\n## [Inputs]\n\n*  **topic:**  The subject of the article.\n*  **ground_truth_url:** A URL to a pre-existing article about the topic used as reference (optional).\n*  **do_research:**  A boolean indicating whether to conduct research on the topic (True) or use pre-existing research data (False).\n*  **do_generate_outline:**  A boolean indicating whether to generate an article outline (True) or use a pre-existing outline (False).\n*  **do_generate_article:** A boolean indicating whether to generate the main article content (True) or use pre-generated content (False). \n*  **do_polish_article:** A boolean indicating whether to polish the article (add summary, remove duplicates) (True) or use the raw generated article (False).\n*  **remove_duplicate:** A boolean to control duplicate content removal during polishing.\n*  **callback_handler:** An object (likely a custom class) to handle intermediate procedural events.\n\n\n## [Outputs]\n\n\n*   A directory containing the staged outputs of the article creation pipeline:\n    * A `conversation_log.json` file (if `do_research` is True)\n    * A `storm_gen_outline.txt` file (if `do_generate_outline` is True)\n    * A `storm_gen_article.txt` file (if `do_generate_article` is True)\n    * A final polished article within the directory if `do_polish_article` is True. \n\n\n\n"
    },
    "knowledge_storm__utils__WebPageHelper": {
        "label": "WebPageHelper",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 546,
        "endLineNo": 617,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L546-L617&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function processes web pages, extracts text content, filters it based on length, and then divides it into smaller snippets. Its purpose is to efficiently prepare web page content for further analysis or processing.\n\n## Inputs\n\n*  `urls`: A list of URLs pointing to web pages\n\n## Output \n\n* A dictionary where keys are URLs and values are dictionaries containing:\n    * `text`: The extracted text content of the web page.\n    * `snippets`: A list of smaller text snippets extracted from the full text. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__StormArticleGenerationModule__generate_article": {
        "label": "generate_article",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 42,
        "endLineNo": 108,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L42-L108&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown \n\n**[Quick Summary]** This function generates a complete article on a given topic. It uses an outline, an information table containing relevant data, and potentially a callback handler for custom processes. The generated article is structured according to the outline and populated with information from the table. \n\n**[Inputs]**\n*  `topic (str)`: The subject of the article.\n* `information_table (StormInformationTable)`: A structured dataset containing information related to the topic.\n* `article_with_outline (StormArticle)`:  An object representing the article's structure (outline) and potential placeholder content.\n* `callback_handler (BaseCallbackHandler)`: An optional handler for triggering custom actions during article generation.\n\n**[Output]**\n*  `StormArticle`: A fully generated article object with populated sections based on the outline and information table. \n\n\n"
    },
    "knowledge_storm__rm__BraveRM": {
        "label": "BraveRM",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 446,
        "endLineNo": 511,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L446-L511&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis Python function uses the Brave Search API to perform web searches. It takes one or more search queries, retrieves the top search results (up to `k`), and returns a list of dictionaries containing relevant information about each result, such as the title, URL, description, and snippets.\n\n## Inputs\n* `query_or_queries`:  A single string or a list of strings representing the search queries.\n\n* `exclude_urls`: (Optional) A list of URLs to exclude from the search results.\n\n## Output\n* A list of dictionaries, each representing a search result. \n  * Each dictionary contains keys like 'snippets', 'title', 'url', and 'description'. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs": {
        "label": "STORMWikiLMConfigs",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 22,
        "endLineNo": 84,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L22-L84&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## STORM LLM Configuration Function Analysis\n\n**[Quick summary]**  This function defines configurations for different Large Language Models (LLMs) used within the STORM framework. It allows for customizing the LLM choices for various tasks like conversation simulation, question answering, outline generation, article generation, and polishing. \n\n**[Inputs]**\n\n*  `openai_api_key`:  Your OpenAI API key for accessing their models.\n* `openai_type`: Indicates the API provider (e.g., \"openai\" or \"azure\").\n* `api_base`: (Optional)  The base URL for the API.  \n* `api_version`: (Optional) The API version to use.\n* `temperature`: (Optional) A float value controlling the randomness of the model's output.  \n* `top_p`: (Optional)  A float value controlling the nucleus sampling method for text generation.\n*  `model` (within set_..._lm functions): A Large Language Model object (e.g., from `dspy.dsp.LM` or `dspy.dsp.HFModel`)\n\n**[Output]**\n\n*  A configured object with  LLMs assigned to:\n   * `conv_simulator_lm`\n   * `question_asker_lm`\n   * `outline_gen_lm`\n   * `article_gen_lm`\n   * `article_polish_lm` \n\n\n"
    },
    "knowledge_storm__lm__TogetherClient___generate": {
        "label": "_generate",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 539,
        "endLineNo": 598,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L539-L598&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function sends a prompt to a text generation API, likely Anthropic's `text-davinci-003`, and returns the generated text response. It allows customization of parameters like temperature, maximum tokens, and repetition penalty.\n\n## Inputs\n\n*  `self.api_base`: Base URL for the API.\n*  `self.kwargs`: Dictionary of keyword arguments passed to the function.\n*  `prompt`: The text prompt to be sent to the API.\n*  `use_chat_api`: Boolean indicating whether to use the chat API endpoint. \n\n## Output \n\n*  `response`: Dictionary containing the original prompt and a list of generated text responses. \n"
    },
    "knowledge_storm__rm__YouRM": {
        "label": "YouRM",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 15,
        "endLineNo": 74,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L15-L74&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function searches You.com for the top `k` (default 3) authoritative passages for a given query or list of queries. It retrieves results from the Youdao API and excludes any URLs specified in the `exclude_urls` list. \n\n## Inputs\n\n- `query_or_queries`:  Either a single string query or a list of string queries to search for.\n- `exclude_urls`: A list of URLs to be excluded from the search results. \n\n## Output\n\n- A list of dictionaries, each representing a search result. \n   - Each dictionary contains 'description', 'snippets', 'title', 'url' keys. \n\n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__remove_uncompleted_sentences_with_citations": {
        "label": "remove_uncompleted_sentences_with_citations",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 311,
        "endLineNo": 368,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L311-L368&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function cleans up text by removing incomplete sentences and standalone citations. It aims to extract well-formed sentences with any associated citations to ensure consistent and meaningful text output.\n\n## Inputs\n\n*  `text (str)`: The input text containing sentences, potential citations within square brackets (e.g., \"[1]\"), and potentially grouped citations (e.g., \"[1, 2, 3]\").\n\n## Output\n\n* `str`: The processed text with uncompleted sentences and standalone citations removed, leaving only complete sentences and their associated citations if present. \n\n\n\n"
    },
    "knowledge_storm__lm__TGIClient": {
        "label": "TGIClient",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 419,
        "endLineNo": 474,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L419-L474&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown\n\n**Quick Summary**\n\nThis function sends a text prompt to a Hugging Face model and retrieves the generated text response. It handles the formatting of the request, including parameters like temperature and number of generations.\n\n**Inputs**\n\n* `prompt`: The text input to be processed by the model.\n* `kwargs`: Additional keyword arguments passed to the function, influencing parameters like `n` (number of generations), temperature, and others.\n* `self`: Object containing information about the model, URL, port, headers, and other configuration details.\n\n\n**Output**\n\n* A dictionary containing the original prompt and a list of generated text responses, each in a separate dictionary. \n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__StormOutlineGenerationModule": {
        "label": "StormOutlineGenerationModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 11,
        "endLineNo": 65,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L11-L65&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis:\n\n**Quick Summary:** \nThis function generates an outline for an article based on a given topic and gathered information. It uses a language model to structure the information and can optionally return both the final and a draft outline.  The purpose of the code is to automate the initial structure creation for an article.\n\n**Inputs:**\n\n* `topic`:  The subject of the article.\n* `information_table`: A structured dataset containing information relevant to the topic, potentially gathered from conversations or other sources.\n* `old_outline`: A previous version of the article outline (optional).\n* `callback_handler`: An object allowing for custom functions to be triggered at specific stages (optional).\n* `return_draft_outline`:  A boolean indicating whether to return both the final and draft outlines (optional).\n\n**Output:**\n\n*  `StormArticle`:  A structured representation of the generated article outline. \n    * If `return_draft_outline` is True, it may also return a second `StormArticle` containing the draft outline. \n\n\n\n\n"
    },
    "knowledge_storm__lm__OpenAIModel____call__": {
        "label": "__call__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 55,
        "endLineNo": 107,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L55-L107&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]** This function interacts with an API (likely OpenAI's GPT-3) to generate text completions based on a given prompt. It returns a list of text completions, optionally prioritizing those that finish naturally (\"completed\") and sorting by predicted likelihood in descending order.\n\n**[Inputs]**\n\n*  `prompt`: The text input used to guide the text generation.\n*  `only_completed`: A boolean flag (True/False) indicating whether to only return completions that end naturally.\n*  `return_sorted`: A boolean flag (True/False) indicating whether to return completions sorted by predicted likelihood.\n\n**[Output]** \n\n* A list of dictionary objects, each containing the generated text completion.\n\n\n\n"
    },
    "knowledge_storm__lm__TGIClient___generate": {
        "label": "_generate",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 423,
        "endLineNo": 474,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L423-L474&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown \n\n**Quick Summary:** This function sends a text prompt to a HuggingFace text generation API and retrieves the generated text responses. It formats and returns the response as a dictionary containing the prompt and a list of generated text choices. \n\n**Purpose:** To interact with a HuggingFace text generation API and obtain text completions based on a given prompt.\n\n**Inputs:**\n\n* `self.kwargs`:  Dictionary containing pre-defined keyword arguments for the API call (likely including URL, port, headers, etc.)\n* `kwargs`: Dictionary containing additional keyword arguments for the API call, potentially modifying parameters like temperature, top_k, etc.\n* `prompt`: The input text prompt to be sent to the API. \n\n**Output:** \n\n* A dictionary containing:\n    * `\"prompt\"`: The original input prompt.\n    * `\"choices\"`: A list of dictionaries, each containing:\n       * `\"text\"`: The generated text completion. \n\n\n\n\n"
    },
    "knowledge_storm__interface__LMConfigs": {
        "label": "LMConfigs",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 312,
        "endLineNo": 362,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L312-L362&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code defines an abstract base class for configuring language models used within a knowledge curation engine. It provides methods for checking initialization, collecting and resetting model history, and logging configuration parameters.  \n\n## Inputs\n\n* **Class Attributes:**  Attributes of the class instance representing individual language models (e.g., `text_generation_lm`, `question_answering_lm`). These likely hold the model objects themselves.\n\n## Output\n\n* **Log Dictionary:** A dictionary containing configuration parameters for each language model, accessed via their corresponding attributes. This log likely helps with monitoring and debugging the engine's configurations. \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__TopicExpert": {
        "label": "TopicExpert",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 148,
        "endLineNo": 197,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L148-L197&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function aims to answer questions by utilizing a search-based retrieval and answer generation system. It takes a topic, a user question, and optionally a ground-truth URL as input, then generates queries, searches for relevant information, filters results, and ultimately crafts an answer based on the retrieved data.\n\n## Inputs\n\n* **topic:**  A string representing the general subject area related to the question.\n* **question:** A string containing the user's question.\n* **ground_truth_url:** (Optional) A string representing a URL that is known to contain the answer to the question. This is likely used for evaluation purposes.\n\n## Output\n\n* **queries:** A list of strings representing the queries generated from the input question and topic.\n* **searched_results:** A list of `StormInformation` objects containing the retrieved information from the search. Each `StormInformation` likely holds snippets of relevant text and associated URLs.\n* **answer:** A string containing the generated answer to the user's question, based on the retrieved information. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__StormKnowledgeCurationModule___run_conversation": {
        "label": "_run_conversation",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 233,
        "endLineNo": 282,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L233-L282&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Snippet Analysis\n\n**Quick Summary:** \nThis function simulates multiple conversations concurrently, each using a different persona. It then cleans up the dialog history for each conversation and returns a list of tuples, where each tuple contains a persona and its corresponding cleaned dialog history. The purpose is likely to evaluate or compare different persona's conversational performance on a given topic.\n\n**Inputs:**\n* `conv_simulator`: A function to simulate a single conversation.\n* `topic`: The subject of the conversations.\n* `ground_truth_url`:  A URL related to the conversation topic, potentially containing reference data.\n* `considered_personas`: A list of different personas to be used in the simulations.\n* `callback_handler`: A function to handle events or callbacks during the conversation simulation.\n   \n\n**Output:**\n* A list of tuples, where each tuple contains:\n    * A persona name.\n    * The cleaned dialog history for that persona's conversation. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformation": {
        "label": "StormInformation",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 14,
        "endLineNo": 62,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L14-L62&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary:\n\nThis Python code defines a class named `StormInformation` to store detailed information about a storm. It allows you to create objects with a unique identifier (URL), description, snippets, and title, and provides methods to convert these objects to and from dictionaries.\n\n## Inputs:\n\n* `info_dict`: A dictionary containing the following keys:\n    * 'uuid':  The unique identifier for the storm information (URL).\n    * 'description': A brief description of the storm.\n    * 'snippets': A list of brief excerpts about the storm.\n    * 'title': The title or headline of the storm information.\n\n## Output:\n\n* A new instance of the `StormInformation` class populated with the data from the `info_dict`.\n\n\n"
    },
    "knowledge_storm__interface__Retriever": {
        "label": "Retriever",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 163,
        "endLineNo": 210,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L163-L210&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary \n\nThis code defines an abstract base class for retriever modules in a system likely designed for information retrieval. It sets a base structure for subclasses to implement specific retrieval strategies using various retrieval models (indicated by '_rm' in attribute names), and provides utilities for collecting and resetting usage statistics of these models. \n\n## Inputs\n\n*  `query` :  The user's search query, either a single string or a list of strings.\n*  `**kwargs`: Additional keyword arguments specific to the retriever's implementation. These could include filters, ranking parameters, or context information.\n\n## Output\n\n* `List[Information]`: A list of `Information` objects, each representing a piece of retrieved information matched to the query.  \n\n\n\n\n\n\n\n\n"
    },
    "knowledge_storm__lm__VLLMClient": {
        "label": "VLLMClient",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 361,
        "endLineNo": 405,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L361-L405&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis function acts as a wrapper for a dspy.HFClientVLLM, streamlining interactions with an external language model server. It takes a prompt and additional arguments, sends a request to the server, and returns the generated response.  \n\n## Inputs\n\n* **prompt**: The text input to be processed by the language model.\n* **kwargs**:  Additional keyword arguments to be passed to the language model server, potentially controlling parameters like maximum output length, temperature, etc.\n\n## Output\n\n* A dictionary containing the original prompt and a list of generated text completions from the language model.  \n"
    },
    "knowledge_storm__rm__BingSearch__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 121,
        "endLineNo": 165,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L121-L165&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown \n\n**Quick Summary**  \nThis function searches Bing for relevant web passages based on a given query (or list of queries).  It returns a list of dictionaries, each containing information about a specific webpage, including its title, description, URL, and extracted snippets. The function also handles API key usage and potential URL exclusion.\n\n**Inputs**\n\n*  `query_or_queries`: A string or list of strings representing the search query. This is what the Bing API will use to find relevant web pages.\n*  `exclude_urls`: A list of URLs to exclude from the search results.\n\n**Output**\n\n* A list of dictionaries, where each dictionary represents a web page found by the search and contains:\n    * `url`: The URL of the webpage\n    * `title`: The title of the webpage\n    * `description`: A short description of the webpage\n    * `snippets`: A list of extracted text snippets from the webpage \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__parse_article_into_dict": {
        "label": "parse_article_into_dict",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 466,
        "endLineNo": 509,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L466-L509&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## [Quick Summary]\n\nThis function parses structured text using markdown-like headers to create a nested dictionary representation. It transforms text with '#' denoting sections and subsections into a hierarchical dictionary structure, where each section title is a key mapping to a dictionary containing its content and any nested subsections.\n\n## [Inputs]\n\n*  **`input_string`**: A string containing the structured text to be parsed. \n\n## [Output]\n\n*  **Dictionary**:  A nested dictionary representing the hierarchical structure of the input text.\n\n"
    },
    "knowledge_storm__lm__GoogleModel____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 602,
        "endLineNo": 644,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L602-L644&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary**  \n\nThis Python function initializes a class for interacting with Google's Gemini Generative AI API. It sets up the necessary environment variables and configures the API client.  Additionally, it prepares internal structures for managing token usage and conversation history. \n\n**Inputs**\n\n*  `model`: A string specifying the name of the Gemini model to use.\n*  `api_key`:  An optional string containing your Google API key for authentication.\n*  `**kwargs`: Additional keyword arguments to customize the generation process, such as temperature, top_p, and top_k.\n\n**Output** \n\n*  Initializes  a  ready-to-use object for interacting with the specified Gemini model.\n*  Sets internal state for token tracking and conversation history.\n\n\n\n"
    },
    "knowledge_storm__rm__BraveRM__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 469,
        "endLineNo": 511,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L469-L511&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function searches the Brave Search API for relevant web results based on a given query or list of queries. It aims to retrieve the top \"k\" passages (snippets) along with other relevant information like title and URL.\n\n## Inputs \n* `query_or_queries`: \n    * A string representing a single query \n    * Or a list of strings, each representing a separate query\n* `exclude_urls`: A list of URLs to filter out from the search results.\n\n## Output\n* A list of dictionaries, where each dictionary represents a search result and contains:\n    * `snippets`: A list of strings containing snippets from the webpage.\n    * `title`: The title of the webpage.\n    * `url`: The URL of the webpage.\n    * `description`: A brief description of the webpage. \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__ConvSimulator": {
        "label": "ConvSimulator",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 25,
        "endLineNo": 67,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L25-L67&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function simulates a dialogue between a Wikipedia writer (using a language model) and a topic expert (also using a language model). The expert answers questions about a given topic, leveraging search results from a retriever. \n\n## Inputs\n\n* `topic`:  The subject the conversation will focus on.\n* `persona`:  The characterized role/style of the Wikipedia writer.\n* `ground_truth_url`: A URL related to the topic that will be excluded from the expert's search results (likely for evaluation purposes).\n* `callback_handler`:  An object that handles events during the dialogue, potentially for logging or visualization.\n\n## Output\n\n* `dspy.Prediction`: An object containing the complete dialogue history, including each turn's user utterance, expert response, search queries, and search results. \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__StormOutlineGenerationModule__generate_outline": {
        "label": "generate_outline",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 23,
        "endLineNo": 65,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L23-L65&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:**\n\nThis function generates an outline for a Storm article. It takes information from a dialogue history and previous outlines (if provided) to create a structured article framework. The function can optionally return both the final and a draft version of the article outline.\n\n**Inputs:**\n\n* `topic`: The subject of the article (string).\n* `information_table`: A structured dataset containing information gathered during the knowledge curation process.\n* `old_outline`: A previous version of the article outline (optional, StormArticle object).\n* `callback_handler`: An object that allows for custom callbacks at various stages of the outline generation process (optional, BaseCallbackHandler object).\n* `return_draft_outline`:  A boolean flag indicating whether to return both the final and draft outlines.\n\n**Output:**\n\n*  If `return_draft_outline` is False:  A `StormArticle` object containing the final outline.\n*  If `return_draft_outline` is True: A tuple containing two `StormArticle` objects: the final outline and the draft outline. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__StormArticlePolishingModule": {
        "label": "StormArticlePolishingModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 11,
        "endLineNo": 51,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L11-L51&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:  \n\n**[Quick Summary]** \n\nThe `polish_article` function takes a draft article, refines its text using language models (`article_gen_lm` and `article_polish_lm`), and updates the article object with the polished content. This is part of a larger system for automatically generating articles.\n\n**[Inputs]**\n\n* `topic`:  The main subject of the article (string).\n* `draft_article`: An existing article object containing initial content (`StormArticle`).\n* `remove_duplicate` : A boolean flag indicating whether to perform an additional step to remove duplicate text from the article. \n\n**[Output]**\n\n* A modified `StormArticle` object with the refined text content.\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__StormPersonaGenerator": {
        "label": "StormPersonaGenerator",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 98,
        "endLineNo": 138,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L98-L138&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Summary\n\nThis code defines a class `PersonaGenerator` that creates diverse persona descriptions based on a given topic. It uses an underlying engine to generate these personas and includes a default 'Basic fact writer' persona in the output. \n\n## Inputs\n\n* **`engine`**:  A language model engine (e.g., from `dspy.dsp.LM` or `dspy.dsp.HFModel`) used to generate the persona descriptions.\n* **`topic`**: The subject or theme for which personas should be created.\n* **`max_num_persona`**:  The maximum number of additional personas (excluding the default 'Basic fact writer') to generate.\n\n## Output\n\n* **`List[str]`**: A list containing strings, each representing a persona description. \n    * The list always includes the default 'Basic fact writer' persona.\n    *  The list includes up to `max_num_persona` additional personas generated based on the topic. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__get_outline_as_list": {
        "label": "get_outline_as_list",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 309,
        "endLineNo": 349,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L309-L349&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function `get_outline_as_list` generates a hierarchical outline (list) of sections and subsections within a structured text document. It takes a specific section name (optional) and determines its subtree, presenting the structure in a pre-order traversal format, optionally using hash symbols (#) for indentation.\n\n## Inputs\n\n* `section_name`:  A string representing the name of the section to focus on; if not provided, it defaults to the entire document's root section.\n* `include_root`: A boolean flag indicating whether to include the \"root\" section in the outline. \n* `add_hashtags`: A boolean flag indicating whether to prefix each section name with hash symbols (#) for indentation levels.\n\n## Output\n\n* A list of strings, each representing a section or subsection name in the document's hierarchy. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__CreateWriterWithPersona": {
        "label": "CreateWriterWithPersona",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 58,
        "endLineNo": 97,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L58-L97&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick Summary]\nThis function aims to generate diverse perspectives on a given topic by leveraging Wikipedia. It identifies related topics, extracts section titles from their Wikipedia pages, uses these as inspiration to create different personas, and presents them as potential perspectives on the original topic.\n\n[Inputs]\n* `topic`: The initial topic for exploration.\n* `draft`: An optional draft text, likely for context or continuation.\n\n[Output]\n* `personas`: A list of different perspectives/personas related to the input topic.\n* `raw_personas_output`: The unfiltered output from the persona generation process.\n* `related_topics`: A string containing related topics discovered from Wikipedia. \n\n\n"
    },
    "knowledge_storm__interface__Article__get_outline_tree": {
        "label": "get_outline_tree",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 98,
        "endLineNo": 136,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L98-L136&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis \n\n**[Quick Summary]** \n\nThis function takes a structured document representation (likely a tree-like object) and generates a hierarchical dictionary representing its outline. The purpose is to organize the document's sections and subsections into a nested structure for analysis or display.\n\n**[Inputs]**\n\n* `self.root`: This is assumed to be a node object representing the top-level section of the document. It likely has attributes like `section_name` and `children`.\n\n**[Output]**\n\n* A nested dictionary:\n    *  Keys are section names from the document.\n    *  Values are dictionaries representing child sections, recursively forming the tree structure.\n    * Empty dictionaries indicate sections without subsections. \n\n\n\n"
    },
    "knowledge_storm__lm__AzureOpenAIModel": {
        "label": "AzureOpenAIModel",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 197,
        "endLineNo": 235,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L197-L235&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code extends the `dspy.AzureOpenAI` class to track token usage from interactions with the Azure OpenAI API. It overrides the `log_usage` method to accumulate prompt and completion tokens and provides a `get_usage_and_reset` method to retrieve and reset the accumulated token counts.\n\n## Inputs\n\n* `response`: A dictionary representing the response from the Azure OpenAI API.\n* `self.kwargs`: A dictionary containing keyword arguments passed to the constructor. It likely includes parameters like `api_key`, `model`, etc.\n\n## Output\n\n* `usage`: A dictionary containing model-specific token usage statistics (prompt and completion tokens).\n* Token usage is reset to 0 after retrieval. \n\n\n"
    },
    "knowledge_storm__rm__BingSearch____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 76,
        "endLineNo": 114,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L76-L114&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code defines a class that interfaces with the Bing Web Search API to retrieve search results and process them further.  It allows for customization of search parameters, snippet handling, and source validation.  The code likely forms part of a larger application requiring web search functionality.\n\n## Inputs\n\n* `k`: Number of search results to retrieve (likely the 'count' parameter for the Bing API).\n* `bing_search_api_key`: Your API key for accessing the Bing Search API.\n* `min_char_count`: Minimum character count for articles to be considered valid for processing.\n* `snippet_chunk_size`: Maximum character count for each snippet extracted from articles.\n* `webpage_helper_max_threads`: Maximum number of threads used for processing web pages.\n* `mkt`: Microsoft Translator market code (e.g., 'en-US').\n* `language`: Language code for Bing search (e.g., 'en').\n*  `**kwargs`: Additional keyword arguments to pass to the Bing API.\n* `is_valid_source`: Optional function to check if a URL is a valid source.\n\n## Output\n\n* A processed list of search results, likely containing extracted snippets and metadata. \n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__StormKnowledgeCurationModule__research": {
        "label": "research",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 283,
        "endLineNo": 321,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L283-L321&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:** This function gathers information about a given topic by simulating conversations with different \"personas\" (potential knowledge sources). It then organizes this information into a structured \"InformationTable\" for easy access and analysis. This process aims to curate a comprehensive understanding of the topic.\n\n**Inputs:**\n\n* `topic`: The subject the function will gather information about (e.g., \"climate change\").\n* `ground_truth_url`: A URL potentially containing pre-existing knowledge about the topic, used as a reference.\n* `callback_handler`: An object that likely defines callbacks for specific events during the process, allowing for further customization and monitoring.\n* `max_perspective`: Limits the number of different personas considered in the conversation. \n* `disable_perspective`: If True, only uses a single persona, effectively ignoring diverse viewpoints.\n* `return_conversation_log`:  Determines if the raw conversation logs should be returned alongside the structured information.\n\n**Output:**\n\n*  `StormInformationTable`: A structured representation of the gathered information, organized by topic and source.\n*  `Dict`: (Optional)  A dictionary containing the raw conversation logs if `return_conversation_log` is True. \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__from_outline_str": {
        "label": "from_outline_str",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 432,
        "endLineNo": 469,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L432-L469&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function takes a string representation of an outline and creates an instance of a `StormArticle` object, populating it with nested `ArticleSectionNode` objects based on the outline structure.  The code likely aims to represent structured articles in a hierarchical format.\n\n## Inputs\n* `outline_str`: A string containing the article outline, likely using '#' symbols for indentation levels.\n* `topic`: A string representing the main topic of the article.\n* `cls`: A class constructor, probably for the `StormArticle` class. \n\n## Output\n* An instance of the `StormArticle` class with its structure populated based on the provided outline_str. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__update_section": {
        "label": "update_section",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 271,
        "endLineNo": 308,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L271-L308&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Analysis of Code Snippet \n\n**[Quick Summary]**\n\nThis function adds or updates a section within a structured document (likely an article) based on provided content and references to previous sections.  It aims to maintain consistency in internal links and references within the document.\n\n**[Inputs]**\n\n* `current_section_name`: The name of the new or updated section. \n* `parent_section_name`: The section under which this new section should be placed.\n* `current_section_content`:  The text content of the new or updated section.\n* `current_section_info_list`: A list of objects containing information about previous sections, likely used for referencing.\n\n\n\n **[Output]**\n\n* A reference (`ArticleSectionNode`) to the newly created or updated section, or `None` if something goes wrong. \n"
    },
    "knowledge_storm__rm__YouRM__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 38,
        "endLineNo": 74,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L38-L74&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function searches You.com for the top `k` most relevant passages for a given query (or list of queries). It then filters the results to exclude specific URLs and collects the most authoritative results based on its `is_valid_source` function. \n\n## Inputs\n\n* `query_or_queries`:  Either a single search query (string) or a list of queries. This is what the function will search for on You.com.\n* `exclude_urls`: A list of URLs that should be excluded from the search results. This allows for filtering out specific websites.\n\n\n* `self.k`:  An integer specifying the number of top passages to retrieve for each query. \n\n\n* `self.ydc_api_key`: An API key required to access the You.com search API. This key is likely stored within the object (`self`) the function belongs to.\n* `self.usage`: \n* `self.is_valid_source`: A function likely defined within the same object, used to determine if a source (URL) is considered authoritative.\n\n## Output\n\n* `collected_results`: A list of dictionaries, where each dictionary represents a search result and contains the following keys:\n    * `description`\n    * `snippets`: A list of strings containing snippets of text from the passage.\n    * `title`\n    * `url` \n\n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__clean_up_outline": {
        "label": "clean_up_outline",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 388,
        "endLineNo": 424,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L388-L424&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function takes a text outline and reformats it to a more standard Markdown structure. It aims to simplify the outline by removing extraneous sections like references, notes, and appendixes, while preserving the hierarchy of headings and bullet points.\n\n## Inputs\n\n* **outline:** A string containing the text outline.\n\n## Output\n\n* **outline:** The reformatted Markdown outline as a string. \n"
    },
    "knowledge_storm__lm__TogetherClient____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 478,
        "endLineNo": 513,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L478-L513&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown\n\n**Quick Summary**\n\nThis Python function initializes a client for interacting with the HuggingFace `Together` API.  It allows sending prompts and receiving text completions, potentially with custom parameters and token usage tracking.\n\n**Inputs**\n\n*  `model`:  The name of the HuggingFace model to use.\n* `apply_tokenizer_chat_template`: A boolean indicating whether to apply a tokenizer-specific chat template.\n* `hf_tokenizer_name`:  The name of the HuggingFace tokenizer to use (defaults to the same as the `model` if not provided).\n* `kwargs`: A dictionary of optional keyword arguments for modifying the API request parameters (e.g., `temperature`, `max_tokens`, `stop`, etc.).\n\n**Output**\n\n* None (the function modifies its internal state) \n\n\n"
    },
    "knowledge_storm__rm__SerperRM____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 313,
        "endLineNo": 348,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L313-L348&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Serper API Client Summary:\n\n**Quick Summary:** This code defines a class to interact with the Serper API.\n\nIt allows users to perform Google searches programmatically using a provided API key and customizable search parameters. The purpose is to provide a simple and reusable way to access Google search results programmatically.\n\n**Inputs:**\n\n* `serper_search_api_key`: A unique API key required to authenticate with the Serper service. \n* `query_params`: A dictionary or list of dictionaries containing search parameters such as the query, search type, location, maximum results, etc.\n\n**Output:**\n\n* Access to Google search results based on the provided API key and search parameters. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunnerArguments": {
        "label": "STORMWikiRunnerArguments",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 86,
        "endLineNo": 121,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L86-L121&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis code defines arguments for configuring a pipeline that processes information and generates questions based on given text. It likely integrates with a large language model (LLM) and a search engine to retrieve relevant information and construct a conversational question-asking process.\n\n## Inputs\n\n*  `output_dir`: Directory path where results will be stored.\n*  `max_conv_turn`: Maximum number of back-and-forth exchanges allowed in the conversation.\n*  `max_perspective`: Maximum number of different viewpoints to consider when asking questions.\n*  `max_search_queries_per_turn`: Maximum search queries attempted within a single conversational turn.\n*  `disable_perspective`: Flag to turn off perspective-based question generation.\n*  `search_top_k`: Number of top search results to analyze for each query.\n*  `retrieve_top_k`: Number of references to collect for each section title.\n*  `max_thread_num`: Maximum number of concurrent threads to utilize for processing.\n\n## Output\n\n*  Processed text with generated questions and potentially retrieved information.\n*  Output files stored in the specified `output_dir`. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 125,
        "endLineNo": 160,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L125-L160&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function initializes a `STORMWikiRunner` object, which is likely part of a system for generating wiki-style articles using a combination of large language models (LLMs), knowledge retrieval, and text generation techniques. \n\n## Inputs\n\n*  `args`: Likely a set of command-line arguments or configuration options for the runner.\n*  `lm_configs`: Configuration settings for the various LLMs used in the process (question asker, conversation simulator, etc.).\n*  `rm`:  Probably a retriever module responsible for fetching relevant information from a knowledge base.\n\n## Output\n\n*  An initialized `STORMWikiRunner` object ready to process user requests or prompts. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__reorder_reference_index": {
        "label": "reorder_reference_index",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 372,
        "endLineNo": 407,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L372-L407&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Summary, Inputs and Outputs\n\n**[Quick summary]** This function reindexes references within an article's structure, ensuring that outdated reference indices are replaced with new ones based on the order of appearance.  This is likely used to maintain consistent and accurate reference tracking within a document management system.\n\n**[Inputs]**\n\n* `self.root`: The root node of a tree-like data structure representing the article's content.\n* `self.reference`:  A dictionary containing mappings of article references (likely by URL) to their original index.\n\n**[Output]**\n\n* `self.root`: The modified root node of the article structure, with updated citation indices in the text content.\n* `self.reference`:  The updated reference dictionary, with original reference indices replaced by new ones. \n\n\n\n\n"
    },
    "knowledge_storm__utils__FileIOHelper": {
        "label": "FileIOHelper",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 510,
        "endLineNo": 545,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L510-L545&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code provides a set of static utility functions for handling file I/O operations with JSON, strings, and Python pickles. Its purpose is to offer a centralized, convenient way to serialize and deserialize data to and from files.\n\n## Inputs\n\n* `obj`: The object to be serialized (e.g., a Python dictionary, list, or custom object).\n* `file_name`:  The path to the file where data will be saved or loaded.\n* `encoding`:  Specifies the character encoding to be used when reading or writing text files (e.g., \"utf-8\").\n* `path`: The path to the file for string I/O.\n\n## Output\n\n*  Serialized data (JSON, string, pickle) saved to the specified file.\n* Deserialized data (JSON, string, pickle) loaded from the specified file. \n*  Modified versions of non-serializable objects represented as \"non-serializable contents\". \n\n\n\n\n"
    },
    "knowledge_storm__lm__VLLMClient___generate": {
        "label": "_generate",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 371,
        "endLineNo": 405,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L371-L405&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick summary]** \nThis function sends a prompt to a Hugging Face (HF) VLLM server, retrieves the generated response, and formats it for easier use. It aims to simplify interaction with HF's VLLM API.\n\n**[Inputs]**\n\n* `self.url`: The base URL of the Hugging Face VLLM server.\n* `self.kwargs`:  A dictionary containing the model name, maximum tokens, temperature, and possibly other parameters for the API request.\n* `kwargs`:  An additional dictionary of keyword arguments that can override or add to `self.kwargs`.\n* `prompt`: The text prompt to be sent to the VLLM model for text generation.\n\n\n**[Output]**\n\n* A dictionary containing:\n    *  `prompt`: The original prompt sent to the server.\n    *  `choices`: A list of dictionaries, each containing the generated text (`text`) from the VLLM model."
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler": {
        "label": "BaseCallbackHandler",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 1,
        "endLineNo": 34,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L1-L34&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis Python code defines a base callback handler for the STORM pipeline, which likely processes text and generates structured information like outlines. The handler provides methods to be called at various stages of the pipeline, allowing for custom actions or logging during processing. \n\n## Inputs\n*  `**kwargs`: These are keyword arguments that can be passed to each callback method. Their specific meanings depend on the context of the STORM pipeline and the individual methods.\n\n## Output\n*  There is no explicit output defined for the callback handler itself. \n*  Each callback method may have its own outputs depending on the implemented functionality. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__WriteOutline": {
        "label": "WriteOutline",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 66,
        "endLineNo": 99,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L66-L99&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis function acts as a Wikipedia page outline generator, using a conversation history and a pre-existing outline (if available). It leverages a language model to refine the outline based on a conversational context about the desired topic. \n\n## Inputs\n\n*   `topic`: A string representing the subject for the Wikipedia page. \n*   `dlg_history`: A list of dialogue turns containing conversation between a user and an AI.\n*   `old_outline`: An optional string representing a pre-existing outline for the Wikipedia page.\n*   `callback_handler`: An optional object for handling callback events during the outline generation process.\n\n## Output\n\n*   `outline`: A string representing the refined Wikipedia page outline.\n*   `old_outline`: The original or potentially updated pre-existing outline (included for tracking changes). \n\n\n\n"
    },
    "knowledge_storm__lm__ClaudeModel__basic_request": {
        "label": "basic_request",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 286,
        "endLineNo": 318,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L286-L318&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function sends a user prompt to an AI model via an API, stores the interaction history, and returns the AI's response.  The code likely manages interactions with a chatbot or conversational AI. \n\n## Inputs\n\n*  `kwargs`: Keyword arguments containing parameters for the API call, such as model selection or temperature.\n*  `prompt`:  The user's text input to be sent to the AI model.\n\n## Output\n\n* `response`: An object containing the AI's generated text response, metadata about the response (model, role, usage), and potentially other information. \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__DialogueTurn": {
        "label": "DialogueTurn",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 63,
        "endLineNo": 95,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L63-L95&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function defines a class (`__init__`) to represent a conversational exchange, storing agent utterances, user utterances, search queries, and results. The `log()` method then serializes this information into a JSON object for logging or persistence.\n\n## Inputs\n\n*   `agent_utterance`: The text spoken by the AI agent.\n*   `user_utterance`: The text spoken by the user.\n*   `search_queries`: A list of strings representing search queries made during the conversation.\n*   `search_results`: A list containing either `StormInformation` objects or dictionaries, representing the results of those searches.\n\n## Output\n\n*   A JSON-serializable dictionary containing:\n    *   `agent_utterance`\n    *   `user_utterance`\n    *   `search_queries`\n    *   `search_results`: A list of dictionaries, each representing a `StormInformation` object.\n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__limit_word_count_preserve_newline": {
        "label": "limit_word_count_preserve_newline",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 247,
        "endLineNo": 279,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L247-L279&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "1. **Quick Summary**\n   This function takes a multi-line string as input and limits the total word count to a specified maximum. It carefully truncates the string at the nearest word to ensure that all complete lines are preserved.\n\n2. **Inputs**\n   * `input_string`: The text string that may contain multiple lines and words.\n   * `max_word_count`: An integer representing the maximum allowable word count in the truncated output.\n\n3. **Output**\n   * A truncated string: \n     * Not exceeding `max_word_count` words. \n     * Preserving complete lines from the original input. \n     * Leading/trailing whitespace is removed from the final output. \n\n\n\n"
    },
    "knowledge_storm__rm__VectorRM____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 178,
        "endLineNo": 209,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L178-L209&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function initializes a class designed to interact with a Qdrant database using HuggingFace embeddings. It sets up the necessary components for embedding text data and retrieving relevant chunks based on similarity. This ultimately aims to build a system for semantic search within a Qdrant database.\n\n## Inputs\n\n* `collection_name`:  Name of the specific Qdrant collection to use.\n\n* `embedding_model`:   Name of a pre-trained HuggingFace model used for generating embeddings from text.\n\n* `device`:             Target hardware for running the embedding model (e.g., \"mps\", \"cuda\", \"cpu\").\n\n* `k`:                  Number of topmost similar chunks to return in the search result.\n\n## Output\n\n*  An initialized class object ready to process text and perform similarity searches within the specified Qdrant collection. \n\n\n"
    },
    "knowledge_storm__rm__VectorRM__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 278,
        "endLineNo": 309,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L278-L309&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function searches a document database based on user input queries. It retrieves the `self.k` most relevant documents and returns information about them, including description, snippets of content, title, and URL. This helps users find relevant information quickly and efficiently.\n\n## Inputs\n\n* `query_or_queries`: Can be either a single query string or a list of query strings. This is what the function will search for in the database.\n* `exclude_urls`:  This parameter is unused in the code and acts as a placeholder.\n\n## Output\n\n* A list of dictionaries, each representing a matched document. \n    * Each dictionary contains:\n        * `description`:  A description of the document.\n        * `snippets`: A list of string snippets from the document's content.\n        * `title`: The title of the document.\n        * `url`: The URL where the document can be found. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs__init_openai_model": {
        "label": "init_openai_model",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 37,
        "endLineNo": 68,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L37-L68&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis\n\n**Quick summary:** This function initializes a conversational AI system, setting up multiple language models (LLMs) from OpenAI or Azure for different tasks like conversation simulation, question answering, outline generation, and article writing/polishing. \n\n**Inputs:**\n\n* `openai_api_key`:  API key for accessing the OpenAI platform.\n* `openai_type`: Specifies the API provider (\"openai\" or \"azure\").\n* `api_base`: (Optional) Base URL for the API.\n* `api_version`: (Optional)  API version to use.\n* `temperature`: Controls the randomness of the generated text.\n* `top_p`:  Parameter for nucleus sampling, affecting text diversity.\n\n**Output:**\n\n* A partially initialized AI system with configured LLM instances for various purposes.\n\n\n\nLet me know if you'd like me to elaborate on any of these points! \n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__WikiWriter": {
        "label": "WikiWriter",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 68,
        "endLineNo": 98,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L68-L98&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:**\n\nThis function crafts a relevant question based on a given topic and a conversational context. It leverages a language model to generate the question, considering a user's persona if provided. The goal is to facilitate information-seeking in a conversational setting.\n\n\n**Inputs:**\n\n* `topic`: The subject matter of the conversation.\n* `persona`: A description of the user's identity or perspective. \n* `dialogue_turns`: A history of past interactions in the conversation.\n* `draft_page`: Potentially a document or text related to the topic (not explicitly used in the provided code).\n\n**Output:**\n\n* A well-formed question designed to guide the next stage of the conversation. \n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__TopicExpert__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 167,
        "endLineNo": 197,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L167-L197&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function aims to answer a given question by retrieving relevant information from a search engine, distilling it, and formulating a response. The purpose is to create a question-answering system that leverages external knowledge sources.\n\n## Inputs\n\n* **topic**:  The general subject area of the question.\n* **question**: The specific question to be answered.\n* **ground_truth_url**: (Optional) A URL that should be excluded from the search results.\n* **self.engine**:  An instance of a search engine API or retriever (e.g.,  dspy.engine.DuckDuckGo()).\n* **self.retriever**: A retriever object responsible for fetching search results.\n* **self.max_search_queries**: The maximum number of queries to execute in the search.\n\n## Output\n\n* **Prediction**: A prediction object containing: \n    * **queries**: The list of queries used for the search.\n    * **searched_results**:  A list of `StormInformation` objects representing the retrieved search results (snippets).\n    * **answer**: A string containing the generated answer to the question. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__CreateWriterWithPersona__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 67,
        "endLineNo": 97,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L67-L97&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick summary\n\nThis function generates a list of personas based on a given topic. It utilizes related topics from Wikipedia pages as inspiration and then uses a pre-trained language model to generate persona descriptions.\n\n## Inputs\n\n* **topic:** A string representing the subject for which personas are to be generated.\n\n## Output\n\n* **personas:** A list of strings, each representing a generated persona.\n* **raw_personas_output:**  A list of strings containing the raw output of the persona generation process. \n* **related_topics:** A string containing a list of related topics found on Wikipedia.  \n\n\n\n"
    },
    "knowledge_storm__lm__ClaudeModel____call__": {
        "label": "__call__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 331,
        "endLineNo": 360,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L331-L360&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown:\n\n**[Quick summary]** This function sends a prompt to Anthropic's API and retrieves a list of completion suggestions. It expects the prompt to be a string and allows for optional parameters like the number of completions (`n`) and other settings. \n\n**[Inputs]**\n\n* `prompt (str)`: The text prompt to be sent to Anthropic.\n* `only_completed (bool, optional)`:  Whether to only return completions that were not stopped due to length limits.\n* `return_sorted (bool, optional)`:  Whether to sort the completions by their predicted probabilities (currently not implemented).\n* `kwargs`: Additional keyword arguments passed to the underlying API request.\n\n**[Output]**\n\n* `list[str]`: A list containing the text of the completion suggestions received from Anthropic.\n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__get_wiki_page_title_and_toc": {
        "label": "get_wiki_page_title_and_toc",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 10,
        "endLineNo": 39,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L10-L39&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick Summary:**\n\nThis function fetches the title and table of contents (TOC) from a given Wikipedia page URL. It parses the HTML content, extracts the main title and creates a hierarchical representation of the TOC based on headings (h2-h6) while excluding specific predefined sections. \n\n**Inputs:**\n\n* `url`: The URL of a Wikipedia page.\n\n**Output:**\n\n* `main_title`: The main title of the Wikipedia page.\n* `toc`: A multi-line string representing the hierarchical table of contents. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle___merge_new_info_to_references": {
        "label": "_merge_new_info_to_references",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 218,
        "endLineNo": 247,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L218-L247&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function merges new storm information into a collection of existing references, combining snippets and updating a mapping of URLs to unified citation indices. It aims to consolidate and organize storm data effectively.\n\n## Inputs\n\n* `new_info_list`: A list of dictionaries containing new storm information.\n* `index_to_keep`: (Optional) A list of indices specifying which new information items to include.\n\n## Output\n\n* `citation_idx_mapping`: A dictionary mapping the original indices of the new storm data to their corresponding unified citation indices within the merged references. \n\n\n\n\n"
    },
    "knowledge_storm__utils__WebPageHelper____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 552,
        "endLineNo": 581,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L552-L581&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**[Quick Summary]** This code snippet defines a class designed to process textual content from webpages. It utilizes `httpx` for fetching web content,  splits text into manageable chunks using `RecursiveCharacterTextSplitter` and sets thresholds for minimum character count and maximum thread usage. The purpose is likely to efficiently extract and process text from webpages.\n\n**[Inputs]**\n\n* `min_char_count`: Minimum number of characters required in an article segment to be considered valid.\n* `snippet_chunk_size`: Maximum number of characters allowed in each text snippet.\n* `max_thread_num`: Maximum number of threads allowed for concurrent web requests.\n\n**[Output]** \n\n* It does not explicitly return a value. \n* It initializes attributes  `httpx_client`, `min_char_count`, `max_thread_num`, and `text_splitter`. \n* The initialized attributes are likely used internally for further processing of web content.  \n\n\n\n"
    },
    "knowledge_storm__lm__DeepSeekModel____call__": {
        "label": "__call__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 168,
        "endLineNo": 196,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L168-L196&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**[Quick summary]**\n\nThis function `_create_completion`  makes a request to the DeepSeek API to generate completions based on a given prompt. It  logs the API usage, extracts the generated completions, and stores the request details in a history.  The purpose is to seamlessly integrate with the DeepSeek API for text generation. \n\n**[Inputs]**\n\n* `prompt`: A string representing the text prompt for which completions are desired.\n* `only_completed`: A boolean flag (currently set to `True`). \n* `return_sorted`: A boolean flag (currently set to `False`).\n* `kwargs`:  Additional keyword arguments that might be required by the DeepSeek API call.\n\n**[Output]**\n\n* A list of strings, where each string is a generated completion from the DeepSeek API. \n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__clean_up_section": {
        "label": "clean_up_section",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 426,
        "endLineNo": 454,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L426-L454&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis \n\n**[Quick Summary]**\n\nThis function cleans up a text section by removing incomplete sentences, deduplicating citation groups, and skipping unnecessary summaries. Its purpose is to improve the readability and coherence of a text potentially generated from a citation processing tool.\n\n**[Inputs]**\n\n*  `text`: The input text that needs to be cleaned up. It's likely a multi-line string containing articles or excerpts.\n\n**[Output]**\n\n*  A cleaned-up version of the input text as a multi-line string. \n"
    },
    "knowledge_storm__lm__ClaudeModel____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 239,
        "endLineNo": 266,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L239-L266&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Claude Code Analysis\n\n**Quick Summary**\n\nThis code initializes a class to interact with the Anthropic Claude AI model via its API. It establishes connection parameters, sets default generation parameters, and prepares for message exchanges with the model.  The ultimate purpose is to enable applications to leverage Claude's capabilities for text generation and other NLP tasks.\n\n**Inputs**\n\n* `model`:  String specifying the desired Claude model variant.\n* `api_key`: Optional string containing the API key for accessing Anthropic's services. \n* `api_base`: Optional string defining the base URL for the Anthropic API.\n* `kwargs`: A dictionary containing additional keyword arguments used to customize generation parameters like temperature, maximum tokens, and number of generations.\n\n**Output**\n\n* An initialized object ready to send messages (prompts) to the Claude model and receive its generated responses. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__ConvSimulator__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 41,
        "endLineNo": 67,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L41-L67&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Summary\n\nThis function simulates a dialogue between a user and a \"Wikipedia writer\" AI, where the user asks questions about a given topic and the AI provides answers based on its knowledge and search results. The purpose is likely to evaluate the AI's ability to engage in natural conversations and generate informative responses.\n\n\n## Inputs\n\n* **topic:** The subject of the conversation.\n* **persona:** The role or style the AI should adopt when responding (e.g., knowledgeable expert, friendly assistant).\n* **ground_truth_url:** A Wikipedia URL  excluded from the AI's search to prevent it from directly copying information.\n* **callback_handler:** A function to handle events at the end of each dialogue turn.\n\n\n## Outputs\n\n* **dspy.Prediction:** An object containing the complete dialogue history (user questions and AI responses) as a list of `DialogueTurn` objects. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__StormKnowledgeCurationModule____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 203,
        "endLineNo": 229,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L203-L229&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function initializes a conversational agent designed for dialogue with a user. It utilizes a retriever to fetch information from a knowledge base, a persona generator to establish a character for the agent, and language models for conversation simulation and question answering.\n\n## Inputs\n\n* **retriever:**  A module responsible for retrieving information from a knowledge base.\n* **persona_generator:** An optional module to generate a persona (character) for the agent.\n* **conv_simulator_lm:** A language model used to simulate the agent's conversational turn.\n* **question_asker_lm:** A language model used to formulate questions based on user input.\n* **max_search_queries_per_turn:**  The maximum number of search queries the agent can make per user turn.\n* **search_top_k:** The number of top results to return from the retriever per search query.\n* **max_conv_turn:** The maximum number of turns allowed in a conversation.\n* **max_thread_num:** The maximum number of threads the agent can use concurrently.\n\n\n## Output\n\n* An initialized conversational agent object ready for interaction. \n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable__retrieve_information": {
        "label": "retrieve_information",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 164,
        "endLineNo": 190,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L164-L190&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:**\n\nThis function searches for relevant web pages given a set of queries. It uses a pre-computed embedding of the query and snippets to find semantically similar snippets and groups them by URL. It then returns a list of URLs, each associated with a collection of relevant snippets. The purpose of this code is to facilitate efficient information retrieval based on semantic similarity.\n\n**Inputs:**\n\n* `queries`:  A string or list of strings representing the user's search queries.\n* `search_top_k`: An integer specifying the number of top results to return per query.\n* `self.encoder`: An object used to encode the query and snippets into numerical representations.\n* `self.encoded_snippets`: A collection of pre-computed embeddings for snippets.\n* `self.collected_urls`: A list of URLs associated with the snippets.\n* `self.url_to_info`: A dictionary mapping URLs to additional information about those pages.\n\n**Output:**\n\n* A list of dictionaries, where each dictionary represents a web page.\n* Each web page dictionary contains:\n    *  The URL of the page\n    *  A list of snippets relevant to the search query\n\n\n"
    },
    "knowledge_storm__interface__ArticleSectionNode": {
        "label": "ArticleSectionNode",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 43,
        "endLineNo": 68,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L43-L68&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis Python code defines a `ArticleSectionNode` dataclass to represent sections within an article. It allows you to store a section's name, content, child sections, and writing preferences. \n\n## Inputs\n\n* `section_name`: A string representing the heading of the article section.\n* `content`:  A variable that holds the content of the article section. The structure of this data is flexible.\n\n## Output\n\n*  An object of the `ArticleSectionNode` class, representing a structured article section. \n    \n\n\n"
    },
    "knowledge_storm__interface__KnowledgeCurationModule": {
        "label": "KnowledgeCurationModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 211,
        "endLineNo": 235,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L211-L235&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis \n\n**[Quick summary]** This code defines an interface for a knowledge curation stage.  It aims to collect and organize information related to a given topic.  The `research` method is expected to use a retriever (like a search engine) to gather data and structure it into an `InformationTable` format.\n\n**[Inputs]**\n* `topic`: A natural language string representing the subject of inquiry.\n\n**[Output]**\n* `collected_information`: An `InformationTable` object containing the curated knowledge about the provided `topic`. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__WriteOutline__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 75,
        "endLineNo": 99,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L75-L99&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function generates an outline for an article based on a given topic and a conversation history. It refines an initial outline generated from the topic using a conversation between \"Wikipedia Writer\" and \"Expert\" extracted from the history.\n\n## Inputs\n\n* `dlg_history`: A list of dialogue turns, each containing user and agent utterances.\n* `topic`: The topic for the article.\n* `old_outline`:  An existing outline (optional).\n\n\n## Output\n\n* `dspy.Prediction`: An object containing:\n    * `outline`: The refined outline for the article.\n    * `old_outline`: The initial outline generated from the topic. \n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__StormArticlePolishingModule__polish_article": {
        "label": "polish_article",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 28,
        "endLineNo": 51,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L28-L51&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function takes a draft news article, polishes its text using an external language model, and then reconstructs the article with the polished content. The overall purpose is to improve the quality and readability of a news article. \n\n## Inputs\n\n* **topic (str):** The subject or theme of the news article.\n* **draft_article (StormArticle):**  A structured representation of the initial, unedited news article.\n* **remove_duplicate (bool):** A flag indicating whether to perform an extra step to eliminate potential duplicate sentences in the polished article. \n\n## Output\n\n* **StormArticle:**  A modified version of the input `draft_article` containing the polished text, structured according to the `StormArticle` format. \n\n\n\n"
    },
    "knowledge_storm__utils__QdrantVectorStoreManager___check_create_collection": {
        "label": "_check_create_collection",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 51,
        "endLineNo": 74,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L51-L74&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:**\n\nThis function checks if a Qdrant collection exists. If it does, it loads the collection, else it creates a new collection with specified parameters and then returns a Qdrant object. The purpose is to ensure a connection to a properly configured Qdrant collection for embedding-based search.\n\n**Inputs:**\n\n* `client`: A Qdrant client object, indicating a connection to the Qdrant server.\n* `collection_name`: A string representing the desired name of the Qdrant collection.\n* `model`:  A machine learning model capable of generating embeddings.\n\n**Output:**\n\n* `Qdrant`: A Qdrant object, initialized with the client, collection name, and the provided embedding model. \n\n\n\n"
    },
    "knowledge_storm__interface__OutlineGenerationModule": {
        "label": "OutlineGenerationModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 236,
        "endLineNo": 258,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L236-L258&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown \n\n**Quick Summary**\n\nThis function, `generate_outline`, is designed to create a structured outline for an article based on a given topic and pre-collected information.  The goal is to provide a framework for writing the article.\n\n**Inputs**\n\n* **topic:** The main subject or theme of the article.\n* **information_table:**  A structured dataset containing facts, insights, and relevant details about the topic, likely gathered during a knowledge curation phase.\n* **kwargs:** This suggests the function can accept additional optional arguments, possibly including:\n    * A draft outline for the article.\n    * A user-provided outline as a starting point.\n\n**Output**\n\n* An `ArticleOutline` object: This represents the structured outline for the article, likely organized into sections and sub-sections with corresponding content.  \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__ConvToSection": {
        "label": "ConvToSection",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 109,
        "endLineNo": 131,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L109-L131&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis\n\n**Quick Summary:** This function takes information gathered about a topic, an outline, and an existing section of text as input.  It uses a large language model to generate a refined and expanded version of the provided section based on the collected information. \n\n**Inputs:**\n\n* `topic`: The subject the text is about.\n* `outline`: A structured guide for the text's content.\n* `section`: An initial draft of the text section to be improved.\n* `collected_info`: A list of structured information snippets related to the topic.\n\n**Output:**\n\n* `section`: An updated and expanded version of the input 'section' text. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__insert_or_create_section": {
        "label": "insert_or_create_section",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 248,
        "endLineNo": 270,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L248-L270&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:** This function updates or creates an article structure represented by a tree of nodes. It takes a dictionary containing article sections and subsections, merges it with existing nodes, and ensures the structure is consistent. \n\n**Inputs:**\n\n* `article_dict`: A dictionary where keys are section names and values are dictionaries containing content and further subsection dictionaries.\n* `parent_section_name`: (Optional) The name of the parent section to update or create. It defaults to the root if not provided.\n* `trim_children`: A boolean indicating whether to remove child sections not present in the input dictionary.\n\n**Output:**\n\n*  The function modifies the existing tree structure in place. \n*  It does not directly return a value. \n\n\n\n"
    },
    "knowledge_storm__lm__GoogleModel__basic_request": {
        "label": "basic_request",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 664,
        "endLineNo": 685,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L664-L685&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick summary]\nThis function generates text content using a large language model (LLM). It combines user-provided keyword arguments with default parameters defined within the class, removes the \"n\" argument (as Google disallows it), and stores the prompt, response, and used arguments in a history for future reference. \n\n[Inputs]\n* `prompt`: The text prompt to be given to the LLM for text generation.\n* `kwargs`: A dictionary of keyword arguments that customize the text generation process.\n* `self.kwargs`: A dictionary of default keyword arguments specific to the class.\n* `self.llm`: The large language model object used for text generation.\n* `self.history`:  A list to store the history of past interactions, likely for debugging or analysis.\n\n[Output]\n* `response`: The generated text content from the LLM. \n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__to_string": {
        "label": "to_string",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 350,
        "endLineNo": 371,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L350-L371&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the provided code:\n\n**[Quick Summary]**\n\nThis function takes a hierarchical data structure representing an article (likely a tree-like structure with nodes for sections and subsections) and generates a structured outline of the article as a multi-line string. It uses a recursive depth-first traversal (preorder) to visit each node and construct the outline.\n\n**[Inputs]**\n\n* `self.root`: This refers to the root node of the hierarchical article structure. It's assumed to have attributes like `section_name` (for the section title) and `children` (a list of child nodes, representing subsections).\n\n**[Output]**\n\n* A string containing the article outline, formatted with increasing indentation levels to represent hierarchy. Each line in the string will likely have the structure: \"#X Section/Subsection name\" followed by the content of that section/subsection.   \n\n\nLet me know if you have any more code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__interface__ArticleGenerationModule": {
        "label": "ArticleGenerationModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 259,
        "endLineNo": 279,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L259-L279&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis function, `generate_article`, is designed to create a complete article given a topic and supporting information. It takes pre-existing knowledge, an article outline, and potentially additional parameters to produce the final written article.  \n\n## Inputs\n* **topic**: A string defining the subject matter of the article.\n* **information_table**: A structured dataset containing relevant facts and details related to the topic.\n* **article_with_outline**: An article structure with an  predefined outline, likely including section headings and potential content placeholder. \n* **kwargs**:  Keyword arguments that may offer further instructions or customization options for article generation.\n\n## Output\n\n* **Article**: A complete, written piece of content based on the provided topic, information, and outline.   \n\n\n\n\n"
    },
    "knowledge_storm__rm__VectorRM__init_online_vector_db": {
        "label": "init_online_vector_db",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 226,
        "endLineNo": 246,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L226-L246&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary:\n\nThis function initializes a Qdrant client, connecting to a specified server (using a provided URL and API key). It ensures the API key is available, raises an error if no URL is provided, and checks if the intended collection exists before initialization. This allows interacting with a vector database hosted on Qdrant.\n\n## Inputs:\n\n*  `url`: String representing the URL of the Qdrant server.\n*  `api_key`: String representing the API key for authentication with the Qdrant server.\n\n## Output:\n\n*  Initializes the `self.client` attribute as a Qdrant client object.\n \n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__PolishPageModule": {
        "label": "PolishPageModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 70,
        "endLineNo": 90,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L70-L90&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary**\n\nThis function generates a news article lead section and optionally polishes the entire article using two different language models. The `write_lead_engine` generates the lead, while the `polish_engine` refines the entire article draft.\n\n**Inputs**\n\n* `topic: str`: The subject of the news article.\n\n* `draft_page: str`: The existing draft of the news article.\n\n* `polish_whole_page: bool = True`: A boolean flag indicating whether to polish the entire page or just the lead.\n\n\n**Output**\n\n* `dspy.Prediction`: An object containing:\n    * `lead_section: str`: The generated lead section for the article.\n    * `page: str`: The polished version of the draft page (if `polish_whole_page` is True), otherwise the original draft. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__StormPersonaGenerator__generate_persona": {
        "label": "generate_persona",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 118,
        "endLineNo": 138,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L118-L138&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown:\n\n**[Quick summary]**\nThis function generates a list of persona descriptions for a given topic. It always includes a default \"Basic fact writer\" persona and then potentially adds additional personas generated based on the topic, up to a maximum limit. This helps in tailoring text generation to different writing styles or perspectives.\n\n**[Inputs]**\n*  `topic (str)`: The subject matter for which personas are needed.\n*  `max_num_persona (int)`: The maximum number of additional personas (excluding the default) to generate.\n\n**[Output]**\n*  `List[str]`: A list containing descriptions of the personas, including the default \"Basic fact writer\" and up to `max_num_persona` additional personas. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__WikiWriter__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 79,
        "endLineNo": 98,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L79-L98&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function generates a question based on a given topic and conversation history. It utilizes a pre-trained language model (likely a large language model like GPT-3) to craft the question, taking into account both the subject matter and any previous interactions between the user and an expert system.\n\n## Inputs\n\n*  `dialogue_turns`: A sequence of turns in a conversation, likely containing both user utterances and expert responses.\n*  `topic`: A string representing the subject or theme of the conversation.\n*  `persona`: An optional string defining a character or role for the conversation. \n\n## Output\n\n*  `dspy.Prediction`:  An object containing a single attribute named `question`, which is the generated question string.  \n\n\n\n"
    },
    "knowledge_storm__utils__QdrantVectorStoreManager___init_online_vector_db": {
        "label": "_init_online_vector_db",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 76,
        "endLineNo": 95,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L76-L95&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis function initializes and connects to a Qdrant vector store.  It leverages an API key for authentication and aims to create or check the existence of a specified collection within the vector store.\n\n[Inputs]\n* `url`: The URL of the Qdrant server.\n\n* `api_key`: An API key for accessing the Qdrant server.\n\n* `collection_name`: The name of the collection to be created or checked.\n\n *`model`: The name of the machine learning model used by the collection. \n\n\n\n[Output]\n* A `QdrantVectorStoreManager` object representing the connection and collection. \n\n\n\n\nLet me know if you'd like a more detailed explanation of any part!"
    },
    "knowledge_storm__utils__WebPageHelper__urls_to_articles": {
        "label": "urls_to_articles",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 592,
        "endLineNo": 611,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L592-L611&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function downloads webpages from a list of URLs concurrently, extracts their text content, and filters articles based on minimum character count. It aims to efficiently collect and process textual information from multiple web sources.\n\n## Inputs\n\n*  `self.max_thread_num`:  The maximum number of threads to use for concurrent downloads.\n*  `urls`: A list of URLs representing webpages to download.\n*  `self.min_char_count`: A minimum character length threshold for articles to be considered valid.\n*  `extract`: A function likely responsible for extracting text content from an HTML string.\n\n\n## Output\n\n*  `articles`: A dictionary where keys are URLs and values are dictionaries containing the extracted article text (\"text\"). \n"
    },
    "knowledge_storm__interface__Article__find_section": {
        "label": "find_section",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 73,
        "endLineNo": 91,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L73-L91&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:\n\n**Quick Summary:**\n\nThis function recursively searches a tree-like structure (likely representing a document or configuration) for a node with a specific section name. It starts at a given root node and traverses its children, returning the matching node or `None` if not found. This is likely used for navigating and accessing specific sections of a structured data format.\n\n**Inputs:**\n\n*  `node`: The root node of the tree-like structure.\n*  `name`: The name of the desired section.\n\n**Output:**\n\n*  A reference to the node with the matching section name, or `None` if not found. \n\n\n\n\n\n"
    },
    "knowledge_storm__lm__GoogleModel____call__": {
        "label": "__call__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 698,
        "endLineNo": 716,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L698-L716&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis of Code Snippet\n\n**Quick Summary:** \n\nThis function provides a way to generate a specified number (n) of completions for a given input prompt using a pre-existing API (`self.request`). It logs usage of the API and returns the generated completions as a list.  \n\n**Inputs:**\n\n* `prompt`: The text string for which completions are desired.\n* `only_completed`: A boolean flag (currently set to `True`) indicating whether only complete responses are desired.\n* `return_sorted`: A boolean flag (currently set to `False`) indicating whether the completions should be sorted.\n* `n`: An integer specifying the number of completions to generate (defaults to 1).\n* `**kwargs`:  Additional keyword arguments to be passed to the underlying API request.\n\n**Output:**\n\n* A list containing `n` strings, each representing a generated completion for the input prompt. \n\n\n"
    },
    "knowledge_storm__rm__SerperRM__serper_runner": {
        "label": "serper_runner",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 349,
        "endLineNo": 367,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L349-L367&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis:\n\n**[Quick Summary]**\n\nThis function sends a search query to the Serper search API and returns the JSON response containing the search results. It's likely part of a larger application that uses the search API to retrieve information.\n\n**[Inputs]**\n\n*  `self.base_url`: \n    *  Likely the main URL for the Serper API endpoint\n* `self.serper_search_api_key`: \n    *  An API key required for authentication with the Serper API\n* `query_params`: \n    * A dictionary containing the specific search query parameters (e.g., keywords, filters)\n\n**[Output]**\n\n*  A dictionary containing the JSON response from the Serper API, presumably including search results, metadata, and potentially other relevant information. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__find_section": {
        "label": "find_section",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 199,
        "endLineNo": 217,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L199-L217&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis \n\n**[Quick Summary]** This function recursively searches for a node with a matching section name within a tree-like structure.  It starts from a given root node and traverses its children until it finds the node with the desired section name or exhausts all paths. \n\n**[Inputs]**\n* `node`:  The root node of the tree to search within.\n* `name`:  The name of the section for which to find the corresponding node.\n\n**[Output]**\n*  A reference to the found node if a match is found.\n*  `None` if no node with the matching section name exists within the tree. \n\n\n\n"
    },
    "knowledge_storm__interface__InformationTable": {
        "label": "InformationTable",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 25,
        "endLineNo": 42,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L25-L42&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis of the InformationTable class\n\n**Quick Summary**\n\nThis code defines a Python class named `InformationTable` designed to store structured data collected during a \"KnowledgeCuration\" stage. Subclasses of this class can be created to add specific information, like dialogue history, based on project requirements. The purpose is to provide a standardized way to manage and access curated information.\n\n **Inputs**\n\n*  `**kwargs` : This suggests the `retrieve_information` method accepts a variable number of keyword arguments.\n\n**Outputs** \n\n* Varied data based on the specific information stored in the subclass of `InformationTable` object.\n* The output format is not specified in the code snippet, implying it could be any data structure (list, dictionary, etc.)  depending on the subclass implementation. \n\n\n"
    },
    "knowledge_storm__interface__Engine__log_execution_time_and_lm_rm_usage": {
        "label": "log_execution_time_and_lm_rm_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 370,
        "endLineNo": 387,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L370-L387&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the code:\n\n**Quick Summary**\n\nThis function defines a decorator that measures and logs the execution time, language model usage, and retrieval model usage of a decorated function. Its purpose is to provide insight into the performance and resource consumption of the decorated functions. \n\n**Inputs**\n\n*  `func`: The function to be decorated.\n*  `self`: An instance of the class containing this decorator method (likely has attributes for `lm_configs` and potentially `retriever`).\n*  `*args`: Positional arguments passed to the decorated function.\n*  `**kwargs`: Keyword arguments passed to the decorated function.\n\n**Output**\n\n*  The result of the decorated function execution.\n*  Logs a message to the logger (presumably using the `logging` module) including the function name and its execution time.\n*  Stores the execution time in the `self.time` attribute and the language model usage in `self.lm_cost`.\n*  If `self.retriever` exists, stores retrieval model usage in `self.rm_cost`. \n\n\n"
    },
    "knowledge_storm__interface__LMConfigs__collect_and_reset_lm_usage": {
        "label": "collect_and_reset_lm_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 336,
        "endLineNo": 352,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L336-L352&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function aggregates token usage across various language models (LM) within an object. It gathers usage statistics for both prompt and completion tokens, then presents them in a dictionary where model names are keys and their respective token counts are values.\n\nThe purpose of this code is likely to track and report the token consumption of different language models used within an application or system.\n\n## Inputs\n\n* `self.__dict__`: This refers to all attributes (variables) of the current instance of the class.\n\n## Output\n\n* `model_name_to_usage`: A dictionary where keys are model names and values are dictionaries containing:\n    * `prompt_tokens`:  The total number of tokens used in prompts for that model\n    * `completion_tokens`: The total number of tokens generated as completions by that model \n"
    },
    "knowledge_storm__lm__DeepSeekModel____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 111,
        "endLineNo": 127,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L111-L127&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  DeepSeek Chat API Initialization \n\n**[Quick summary]**\nThis Python function initializes a client for interacting with the DeepSeek chat API. It sets up authentication using the provided API key or environment variable, and includes functionality to track token usage for the chat model. \n\n**[Inputs]**\n* `model`: A string specifying the desired DeepSeek chat model. \n* `api_key`: An optional API key for authentication. Can also be retrieved from the environment variable `DEEPSEEK_API_KEY`. \n* `api_base`:  A string defining the base URL for the DeepSeek API. Defaults to \"https://api.deepseek.com\".\n\n**[Output]**\n\n* The function itself creates and initializes an object representing the DeepSeek chat API client, ready for use.\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner__run_knowledge_curation_module": {
        "label": "run_knowledge_curation_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 161,
        "endLineNo": 177,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L161-L177&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown:\n\n**[Quick Summary]**\n\nThis function extracts information about a given topic from various sources, utilizing a storm knowledge curation module. It then organizes this information into a structured table and saves both the table and a log of the conversation with the knowledge curation module.  \n\n**[Inputs]**\n\n* **self.topic:**  The subject or concept the function will research.\n* **ground_truth_url (str):**  A URL potentially providing verified information about the topic. \n* **callback_handler (BaseCallbackHandler):** An object likely used to report progress or handle events during the research process.\n\n**[Output]**\n\n* **StormInformationTable:** A structured table containing information gathered about the topic.\n* **conversation_log (file):** A JSON file recording the dialogue between the function and the storm knowledge curation module. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__DialogueTurn____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 64,
        "endLineNo": 80,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L64-L80&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Summary\n\nThis Python function initializes an object, likely representing a single interaction in a chatbot conversation or a search session. The function takes details about the agent's and user's utterances, potential search queries, and storm information (either as objects or dictionaries) to construct this interaction representation.\n\n## Inputs\n\n* `agent_utterance`: The text string spoken by the chatbot or agent.\n* `user_utterance`: The text string spoken by the user.\n* `search_queries`:  An optional list of strings, potentially representing queries the user made.\n* `search_results`: An optional list containing either `StormInformation` objects or dictionaries, likely representing results returned for the search queries.\n\n\n## Output\n\n* An object representing a single interaction, containing the agent's and user's utterances, search queries, and formatted storm information. \n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__clean_up_citation": {
        "label": "clean_up_citation",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 370,
        "endLineNo": 386,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L370-L386&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**[Quick summary]** \nThis function processes dialogue history (`conv.dlg_history`) by removing references and sources sections from agent utterances, stripping unnecessary text, and adjusting references in the utterance to match the available search results. It aims to clean up  agent-generated text for display purposes.  \n\n**[Inputs]**\n\n*  `conv`:  Likely a class or object representing a conversational context, containing `dlg_history` which is a list of dialogue turns.\n\n**[Output]**\n*  `conv`: The modified conversational context, with agent utterances in `conv.dlg_history` cleaned up. \n\n\n\n"
    },
    "knowledge_storm__interface__ArticlePolishingModule": {
        "label": "ArticlePolishingModule",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 280,
        "endLineNo": 295,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L280-L295&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  `polish_article` function analysis\n\n**Quick Summary:**\n\nThis function takes a topic and a draft article as input and aims to refine and improve the quality of the draft article.  Its purpose is to polish the generated article before it is finalized for publication.\n\n**Inputs:**\n\n*   `topic`: A string representing the main theme or subject of the article.\n*   `draft_article`: An `Article` object containing the initial, possibly unrefined, text of the article.\n*   `**kwargs`:  This suggests the function might accept additional keyword arguments for customization or specific polishing tasks.\n\n**Output:**\n\n*   An improved `Article` object, representing the polished and refined version of the input draft. \n\n\n"
    },
    "knowledge_storm__interface__log_execution_time": {
        "label": "log_execution_time",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 296,
        "endLineNo": 311,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L296-L311&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis Python code defines a decorator named `time_it`.  When applied to a function, `time_it`  measures the execution time of that function and logs it to a logger, likely a file or console. It also stores the execution time within an instance variable named `time` (presumably part of a larger class).\n\n## Inputs\n\n* `func`: The function to be decorated (e.g., `@time_it` before the function definition).\n* `self`: Refers to the instance of the class where the decorator is used.\n* `*args`:  Any positional arguments passed to the decorated function.\n* `**kwargs`: Any keyword arguments passed to the decorated function.\n\n## Output\n\n* A log message indicating the function name and its execution time in seconds (formatted to four decimal places).\n* The execution time is also stored in an instance variable named `time` (likely within the class) under the key corresponding to the function's name. \n\n\n\n"
    },
    "knowledge_storm__interface__OutlineGenerationModule__generate_outline": {
        "label": "generate_outline",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 243,
        "endLineNo": 258,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L243-L258&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick summary:** This function is designed to generate an outline for an article. It takes in a topic and structured knowledge data (\"information_table\") to build the outline. The purpose is to assist in the article writing process by providing a structured framework. \n\n**Inputs:**\n\n* `topic`: The subject or theme of the article.\n* `information_table`: A data structure containing curated knowledge related to the topic. This likely holds facts, concepts, and relationships relevant to the article.\n* `draft_outline` (optional): A pre-existing outline that can be used as a starting point.\n* `user_provided_outline` (optional): An outline created by the user, which the function might adapt.\n\n**Output:**\n\n* `article_outline`: A structured representation of the article's outline, likely in a format suitable for further development. \n\n\n\nLet me know if you'd like a deeper dive into any specific aspect!\n"
    },
    "knowledge_storm__interface__Retriever__collect_and_reset_rm_usage": {
        "label": "collect_and_reset_rm_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 178,
        "endLineNo": 193,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L178-L193&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis: \n\n**Quick Summary:** This function aggregates query usage across multiple models within an object. It iterates through attributes, extracts query counts from each model's usage data, and combines them to provide a total query count for each model.\n\n**Inputs:**\n\n* `self.__dict__`: Contains all the attributes and their values of the current object instance.\n\n* Attributes starting with `_rm`: These attributes likely hold instances of model objects.\n\n*  `getattr(self, attr_name).get_usage_and_reset()`: A method call on each model object to retrieve their current usage and reset their usage counters.\n\n**Output:**\n\n* `name_to_usage`: A dictionary mapping model names to their total query counts. \n\n\n"
    },
    "knowledge_storm__interface__Retriever__retrieve": {
        "label": "retrieve",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 195,
        "endLineNo": 210,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L195-L210&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown \n\n**[Quick summary]**\nThis function is a placeholder for methods that retrieve information based on a provided query (or queries). Subclasses are expected to implement the logic for retrieving the information.\n\n**[Inputs]**\n* `query`: Can be a single string or a list of strings representing the search criteria.\n* `**kwargs`:  Additional keyword arguments that subclasses might need for their specific retrieval process.\n\n**[Output]**\n*  `List[Information]`: A list of objects, each representing a piece of retrieved information. \n\n\n\n"
    },
    "knowledge_storm__rm__BraveRM____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 447,
        "endLineNo": 462,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L447-L462&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis function likely initializes a class responsible for interacting with the Brave search API. It handles configuration, setting up an API key, and defines a function to validate URLs.  The purpose is to provide a structured way to make API requests to Brave Search.\n\n## Inputs\n\n* **k** :  This argument is passed to the `super().__init__(k=k)` call, suggesting it initializes a parent class with some value `k`. It likely represents a common parameter for the base search engine class.\n* **brave_search_api_key**:  A string containing the API key for the Brave Search API. It can be provided directly to the function.\n* **os.environ.get(\"BRAVE_API_KEY\")**: A function that retrieves an environment variable named \"BRAVE_API_KEY\". This provides an alternative way to obtain the API key.\n* **is_valid_source**: An optional function that takes a URL as input and returns True if the URL is considered valid and False otherwise.\n\n## Output \n\n* **None**: This function likely doesn't return a value. Its primary purpose is to initialize an object with required configuration. \n\n\n\n"
    },
    "knowledge_storm__rm__VectorRM___check_collection": {
        "label": "_check_collection",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 210,
        "endLineNo": 225,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L210-L225&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "**Quick Summary**\n\nThis function checks if a Qdrant collection exists. If it does, it loads the collection for use with embeddings generated by a specified model. If the collection doesn't exist, it raises an error. The purpose is to ensure a Qdrant collection is available for efficient embedding indexing and retrieval. \n\n**Inputs**\n\n*  `self.client`:  A Qdrant client object used to interact with the Qdrant database.\n*  `self.collection_name`: The name of the Qdrant collection to check and load.\n*  `self.model`:  A machine learning model used for generating embeddings. Likely a text embedding model.\n\n**Output**\n\n* A `Qdrant` object if the collection exists, ready for use with embeddings.\n* A `ValueError` if the collection does not exist. \n\n\n"
    },
    "knowledge_storm__rm__VectorRM__init_offline_vector_db": {
        "label": "init_offline_vector_db",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 247,
        "endLineNo": 262,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L247-L262&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Summary, Inputs & Output\n\n**[Quick Summary]** This function initializes a Qdrant client to interact with an offline vector store. It takes the path to the vector store folder as input and establishes a connection. It also performs a basic check to ensure the collection exists within the store.\n\n**[Inputs]**\n\n*  `vector_store_path`: String representing the absolute path to the folder containing the offline vector store.\n\n**[Output]**\n\n* `self.client`: A QdrantClient object representing the connection to the offline vector store.\n\n\n\n"
    },
    "knowledge_storm__rm__YouRM____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 16,
        "endLineNo": 31,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L16-L31&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick Summary] This code snippet initializes an object, likely responsible for interacting with a Youdao Dictionary API (YDC). It sets up API key handling, usage tracking, and a validation function for source URLs.  \n\n[Inputs]\n* `k`: Likely an integer representing some configuration parameter for the YDC API interaction.\n* `ydc_api_key`: A string containing the API key for accessing YDC services.\n* `os.environ.get(\"YDC_API_KEY\")`: Retrieves an API key from environment variables.\n* `is_valid_source`: An optional function that takes a URL as input and returns `True` if it's considered a valid source, otherwise `False`.\n\n[Output]\n*  An initialized object ready to interact with the YDC API.\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner__post_run": {
        "label": "post_run",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 220,
        "endLineNo": 235,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L220-L235&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**[Quick summary]** This function performs post-processing tasks after a model run. It saves the run configuration to a JSON file and dumps the history of LLM calls (excluding `kwargs`) into a JSONL file within the specified output directory. The purpose is to provide a record of the run details and LLM interactions for analysis and debugging.\n\n**[Inputs]**\n\n\n*  `self.lm_configs`: Holds information about the LLM configurations used in the run.\n*  `self.article_output_dir`: Directory path where the output files will be saved.\n\n**[Output]**\n\n\n*  `run_config.json`:  A JSON file containing the complete run configuration.\n*  `llm_call_history.jsonl`: A JSONL file with each line containing a dictionary representing a single LLM call (excluding `kwargs`). \n\n\n"
    },
    "knowledge_storm__interface__Engine__summary": {
        "label": "summary",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 417,
        "endLineNo": 431,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L417-L431&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis of Code Snippet\n\n**Quick Summary:** This function prints a detailed performance report after a machine learning task has been executed. It displays execution time for different stages, token usage by language models, and the number of queries made to retrieval models. The purpose is likely to analyze the efficiency and resource consumption of the machine learning pipeline.\n\n**Inputs:**\n\n* `self.time`:  A dictionary likely containing execution times for different stages of the process.\n* `self.lm_cost`: A dictionary containing token usage statistics for various language models.\n* `self.rm_cost`: A dictionary containing the number of queries made to different retrieval models.\n\n**Output:**\n\n* A formatted text report showing:\n    * Execution times for each stage\n    * Token usage by language model and model name\n    * Number of queries for each retrieval model\n\n\n\n"
    },
    "knowledge_storm__lm__AzureOpenAIModel____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 200,
        "endLineNo": 214,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L200-L214&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[**Quick Summary**]\nThis Python function initializes a new object for interacting with an OpenAI API, likely for generating text using the GPT-3.5 model. It sets up basic configurations like API base URL, model name, API key, and initializes tracking for token usage. \n\n[**Inputs**]\n* `api_base`: (Optional) Base URL for the OpenAI API.\n* `api_version`: (Optional) API version to use.\n* `model`: (Required) Name of the OpenAI model to use (e.g., \"gpt-3.5-turbo-instruct\").\n* `api_key`: (Optional) Your OpenAI API key for authentication.\n* `model_type`: (Required)  Specifies the type of interaction (\"chat\" or \"text\").\n* `**kwargs`:  Additional keyword arguments to pass to the parent class.\n\n[**Output**]\n*  A new object configured to make requests to the OpenAI API.\n\n\n"
    },
    "knowledge_storm__lm__DeepSeekModel___create_completion": {
        "label": "_create_completion",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 153,
        "endLineNo": 167,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L153-L167&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function sends a user prompt to the DeepSeek API to generate a completion (a response).  It configures the request with the chosen model and any additional keyword arguments.\n\n## Inputs\n\n* **self.api_key**: An API key for authentication with the DeepSeek service.\n* **self.model**:  The name or identifier of the specific DeepSeek model to use for completion.\n* **prompt**: The user's input text that will serve as the prompt for the model.\n* **kwargs**:  Additional keyword arguments that may be required by the DeepSeek API for customizing the completion request (e.g., temperature, max tokens).\n\n## Output\n\n*  A JSON object containing the DeepSeek API's response, which likely includes the generated completion text.  \n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner__run_article_generation_module": {
        "label": "run_article_generation_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 192,
        "endLineNo": 206,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L192-L206&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown:\n\nThis function generates a draft news article based on a provided topic and information. It utilizes a combination of an outline, pre-defined information, and potentially a callback handler for dynamic content generation. \n\n**Inputs:**\n* `topic`: The subject or theme of the intended news article.\n* `information_table`: A structured table of facts and details related to the topic.\n* `outline`:  A structured outline providing the article's content organization.\n* `callback_handler`: A function that can be called during article generation for additional content handling or customization.\n\n**Output:**\n* `draft_article`: A  `StormArticle` object containing the generated news article content. \n* The function also saves:\n    * The article as plain text to a file named 'storm_gen_article.txt' in the `article_output_dir`.\n    * A JSON file 'url_to_info.json' containing references to source information. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__WriteSection": {
        "label": "WriteSection",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 132,
        "endLineNo": 146,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L132-L146&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis code defines a simple function that takes information about a Wikipedia article topic, a specific section, and some collected facts as input. It then generates a formatted Wikipedia section based on the provided details.  The purpose is likely to assist in quickly creating structured content for Wikipedia pages.\n\n## Inputs\n\n* **\"The collected information:\"** \n    *  A string containing facts or data relevant to the Wikipedia section.\n* **\"The topic of the page:\"** \n    *  A string specifying the name of the Wikipedia article.\n* **\"The section you need to write:\"**\n    *  A string indicating the specific section within the Wikipedia article.\n\n## Output\n\n* **Formatted Wikipedia section:**\n    * A string containing a properly structured Wikipedia section based on the input data. \n    * Follows Wikipedia's formatting guidelines (e.g., use of `#`, `##`, `###` for headings, and inline citations). \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__ConvToSection__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 117,
        "endLineNo": 131,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L117-L131&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**[Quick Summary]** \nThis function processes storm information, limits its word count, and generates a structured response using a language model. It likely aims to summarize and present storm data in an  understandable format.\n\n**[Inputs]**\n\n* `collected_info`:  A list of storm data dictionaries, each containing `snippets` (likely textual information about the storm).\n* `topic`: The topic or theme related to the storm information (e.g., \"Hurricane Updates\").\n* `section`: Potentially a pre-existing section or context for the generated response.\n* `self.engine`:  A language model instance (possibly from a library like `dspy`).\n\n**[Output]**\n\n* `dspy.Prediction`: An object containing a generated `section` of text summarizing the storm information based on the provided inputs and the language model. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__WritePageOutlineFromConv": {
        "label": "WritePageOutlineFromConv",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 125,
        "endLineNo": 139,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L125-L139&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the selection you would like me to analyze.  \n\n"
    },
    "knowledge_storm__storm_wiki__modules__retriever__StormRetriever": {
        "label": "StormRetriever",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/retriever.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/retriever.py",
        "lineNo": 236,
        "endLineNo": 250,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fretriever.py%23L236-L250&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Summary\n\nThis function retrieves information from a specified data source (`rm`) based on a user query. It processes the retrieved data by removing citations from each snippet and then returns a list of `StormInformation` objects, each containing the processed information. The purpose of this code is likely to provide relevant and concise information extracted from a knowledge base while simplifying the output by removing citations.\n\n## Inputs\n\n* `query`:\n    * This can be a single string or a list of strings representing the user's search query.\n* `exclude_urls`: \n    * A list of URLs that the function should exclude from the retrieval results.\n\n## Output\n\n* A list of `StormInformation` objects. \n    * Each object represents a piece of retrieved information from the source. \n    * It is expected to contain processed snippets (with citations removed). \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__DialogueTurn__log": {
        "label": "log",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 81,
        "endLineNo": 95,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L81-L95&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis Python function converts an object's internal data into a JSON-formatted string. It likely represents a conversational agent's interaction history, storing the agent's utterance, user utterance, search queries, and the results of those searches. The function's purpose is to serialize this data for external use, such as logging, storage, or transmission. \n\n## Inputs\n\n* `self`:  Refers to the current instance of the class containing this function.\n* `data`:  Likely represents individual search results within `self.search_results`. \n\n## Output\n\n* A JSON object containing:\n    * `agent_utterance`: The text spoken by the agent.\n    * `user_utterance`: The text spoken by the user.\n    * `search_queries`: A list of search terms used.\n    * `search_results`: A list of dictionaries, each representing a search result.\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformation____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 27,
        "endLineNo": 41,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L27-L41&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis Python function initializes an object called `StormInformation` with details about a storm.  It takes information like a unique ID, description, snippets, and title and stores it within the object, which can then be used to represent and work with storm data.\n\n## Inputs\n\n* `uuid`: A unique string identifier for the storm information.\n* `description`:  A detailed textual description of the storm.\n* `snippets`: A list of short excerpts or summarized pieces of information about the storm.\n* `title`: A title or headline summarizing the storm information.\n\n## Output\n\n* Initializes a `StormInformation` object with the provided data.\n* The object will store the `uuid`, `description`, `snippets`, `title`, and automatically sets `url` to the `uuid`.   \n\n\n"
    },
    "knowledge_storm__utils__load_api_key": {
        "label": "load_api_key",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 24,
        "endLineNo": 38,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L24-L38&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Summary\n\nThis Python function loads data from a TOML configuration file, parses it, and sets the values as environment variables. Its purpose is to configure the application by reading settings from an external file.\n\n## Inputs:\n\n* `toml_file_path`: A string representing the path to the TOML configuration file. \n\n## Output:\n\n*  Environment variables are set with keys and values from the TOML file.\n* If the file is not found or cannot be decoded, an error message is printed to standard error and the function exits.  \n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__remove_citations": {
        "label": "remove_citations",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 281,
        "endLineNo": 295,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L281-L295&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function cleans a string by removing all citations within square brackets. Citations can be single numbers or comma-separated lists of numbers.  The purpose is to extract the core text from a document, stripping away any numerical references. \n\n## Inputs\n\n*  `s (str)`: This is the input string containing the text potentially with citations.\n\n## Output\n\n*  `str`: The function returns a modified string with all citation patterns removed. \n"
    },
    "knowledge_storm__utils__QdrantVectorStoreManager___init_offline_vector_db": {
        "label": "_init_offline_vector_db",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 97,
        "endLineNo": 111,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L97-L111&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown \n\n**Quick Summary:** \nThis Python function initializes a Qdrant client to connect to a local vector store located at the specified folder path.  It then checks if a specified collection name exists and, if not, creates it with a predefined model.\n\n**Inputs:**\n\n*  `vector_store_path` (str):  The directory where the Qdrant vector store is stored.\n*  `collection_name` (str): The name of the collection to work with within the vector store.\n* `model` (str):  The type or name of the machine learning model to use for the collection.\n\n\n**Outputs:**\n\n* A QdrantVectorStoreManager object:  Representing the connection to the vector store and the  collection specified. If the collection doesn't exist, it is created with the provided model. \n"
    },
    "knowledge_storm__interface__ArticleGenerationModule__generate_article": {
        "label": "generate_article",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 266,
        "endLineNo": 279,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L266-L279&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick Summary** \n\nThis function `generate_article` generates a complete article based on a given topic. It utilizes pre-existing knowledge curated from a `InformationTable` and an article outline provided in `article_with_outline`.  The goal is to synthesize informative and structured articles.\n\n**Inputs**\n\n*  `topic`: A string representing the subject of the article.\n*  `information_table`: A structured data repository containing curated information related to the topic.\n*  `article_with_outline`: An article structure with a pre-defined outline, likely generated by a separate module.\n*  `**kwargs`: Additional keyword arguments that might offer further customization options for article generation.\n\n**Output**\n\n*  `Article`: A complete, fully-formed article based on the provided topic, information, and outline. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner__run_outline_generation_module": {
        "label": "run_outline_generation_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 178,
        "endLineNo": 191,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L178-L191&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis of Code Snippet\n\n**[Quick Summary]** This Python function generates a structured outline for a storm-related article. \n\nIt uses a `StormOutlineGenerationModule` to produce an outline based on a provided topic and storm information, and saves both the generated outline and a draft outline to files.\n\n**[Inputs]** \n\n* `topic`:  A string representing the subject of the article (likely about a specific storm).\n* `information_table`:  An object likely containing structured data about the storm (e.g., dates, location, intensity).\n* `callback_handler`: An optional object that can handle callbacks during the outline generation process.\n\n**[Output]**\n\n* `outline`: An object representing the generated outline for the storm article.  \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__AnswerQuestion": {
        "label": "AnswerQuestion",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 134,
        "endLineNo": 147,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L134-L147&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze.  \n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable__construct_url_to_info": {
        "label": "construct_url_to_info",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 112,
        "endLineNo": 125,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L112-L125&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown\n\n**[Quick Summary]**  This function aggregates snippets of information from search results related to different URLs. It merges results from multiple conversations and removes duplicate snippets, ultimately organizing information by URL.   \n\n**[Inputs]**\n\n* **conversations:**  A structure (likely a list of tuples) where each tuple represents a conversation and contains a list of turns.\n* **turns:**  Individual messages within a conversation, likely containing information like user input and system responses.\n\n **[Output]**\n\n*  **url_to_info:** A dictionary where keys are URLs and values are objects containing summarized information (likely including a list of unique snippets) associated with that URL. \n\n\n\n\n"
    },
    "knowledge_storm__interface__Information": {
        "label": "Information",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 12,
        "endLineNo": 24,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L12-L24&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis Python code defines an abstract base class named `Information` designed to hold basic information like a unique identifier (UUID) and associated metadata. This class aims to provide a template for other classes representing specific types of information, ensuring they all have a consistent structure with UUID and meta data. \n\n## Inputs\n\n* `uuid`:  A unique identifier string for the information. \n* `meta`: A dictionary containing additional metadata about the information.\n\n\n## Output\n\n* Creates an instance of `Information` with the provided UUID and metadata. \n"
    },
    "knowledge_storm__interface__KnowledgeCurationModule__research": {
        "label": "research",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 223,
        "endLineNo": 235,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L223-L235&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis \n\n**Quick Summary:** This function aims to gather and organize information related to a provided topic.  It's designed to collect knowledge on a specific subject and present it in a structured format.\n\n**Inputs:**\n* **topic:**  A natural language string representing the subject the function should research.\n\n**Output:**\n* **collected_information:**  Likely a custom data structure (InformationTable) containing the compiled information about the given topic.  \n\n\n"
    },
    "knowledge_storm__lm__OllamaClient": {
        "label": "OllamaClient",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 406,
        "endLineNo": 418,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L406-L418&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis \n\n**[Quick Summary]** \n\nThis Python code defines a class (`OllamaClientWrapper`) that wraps the functionality of `dspy.OllamaClient`. It essentially creates a convenient interface for interacting with an Ollama model by handling the connection setup (URL, port) and allowing for additional keyword arguments to be passed during model generation.\n\n**[Inputs]**\n\n* `model`:  The name or identifier of the Ollama model to be used.\n* `port`: The port number on which the Ollama server is running.\n* `url`: The base URL of the Ollama server (defaults to \"http://localhost\").\n* `**kwargs`:  Additional keyword arguments that will be passed to the `generate` method of the underlying `OllamaClient`.\n\n**[Output]**\n\nThis code does not directly produce an output. Instead, it defines a class (`OllamaClientWrapper`) that can be instantiated and used to interact with a remote Ollama model.  \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner__run_article_polishing_module": {
        "label": "run_article_polishing_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 207,
        "endLineNo": 219,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L207-L219&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]**\n\nThis function takes a draft news article, refines it using a dedicated polishing module, and saves the polished article to a file.  The purpose is to improve the quality and coherence of articles generated by the system.\n\n**[Inputs]**\n\n* `draft_article`: A `StormArticle` object representing the initial news article draft.\n* `remove_duplicate`: A boolean flag indicating whether to remove duplicate sentences from the article.\n* `topic`: The topic of the news article, likely used by the polishing module for context.\n\n**[Output]**\n\n* A polished `StormArticle` object, containing the refined version of the input article. \n* The polished article is also saved as a text file named 'storm_gen_article_polished.txt' in the specified `article_output_dir`. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__QuestionToQuery": {
        "label": "QuestionToQuery",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 121,
        "endLineNo": 133,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L121-L133&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Okay, let's break down this code snippet.\n\n**Quick Summary**\n\nThis function simulates the process of formulating search queries based on a given topic and question. It aims to mimic how a user might interactively refine their search on a search engine.\n\n**Inputs**\n* `topic`: A string describing the subject matter of the discussion.\n* `question`: A string representing the specific question to be answered.\n\n**Output**\n* `queries`: A string containing a list of search queries, each separated by a line break. \n\n\nLet me know if you have any other code snippets you'd like me to analyze!  \n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__ConvSimulator____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 28,
        "endLineNo": 40,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L28-L40&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the code snippet you provided:\n\n**[Quick Summary]**\n\nThis Python function initializes a conversational agent designed to answer questions and potentially generate Wikipedia articles. It leverages two specialized models: one for question answering and another for topic expertise, using a retriever to access external knowledge.\n\n**[Inputs]**\n\n*  `question_asker_engine`: A language model specializing in answering questions.\n*  `retriever`: A component responsible for retrieving relevant information from a knowledge base.\n*  `max_search_queries_per_turn`: The maximum number of queries the topic expert can make within a single conversation turn.\n*  `search_top_k`: The number of top results to return from the retriever for each query.\n*  `max_turn`: The maximum number of turns allowed in a conversation.\n\n**[Output]**\n\nThis function doesn't directly produce an output.  Instead, it sets up an instance of the conversational agent, ready to process user questions and potentially engage in a multi-turn dialogue. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__NaiveOutlineGen": {
        "label": "NaiveOutlineGen",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 112,
        "endLineNo": 124,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L112-L124&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis Python function takes a topic as input and generates a structured outline for a webpage using a pre-trained language model.  Its purpose is to automate the creation of webpage outlines based on user-provided topics.\n\n## Inputs\n\n* **topic:** A string representing the subject or theme of the webpage.\n\n## Output\n\n* **outline:** A structured representation of the webpage content organized into headings and subheadings. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformation__from_dict": {
        "label": "from_dict",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 43,
        "endLineNo": 55,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L43-L55&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown: \n\n**[Quick summary]** \n\nThis Python function `StormInformation.from_dict`  creates a `StormInformation` object from a dictionary. It essentially takes pre-existing data about a storm (like description, snippets, and title) and organizes it into a structured `StormInformation` object. \n\n**[Inputs]**\n\n* `info_dict`: A dictionary containing information about a storm:\n    * 'uuid': A unique identifier for the storm (purpose not specified).\n    * 'description': A textual description of the storm.\n    * 'snippets': Possibly short textual extracts or summaries related to the storm.\n    * 'title': A title or name for the storm.\n\n**[output]**\n\n*  An instance of `StormInformation`: A new object containing the structured storm data extracted from the input dictionary. \n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__parse_citation_indices": {
        "label": "parse_citation_indices",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 297,
        "endLineNo": 309,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L297-L309&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick summary]\nThis Python function extracts citation indexes from a text string. It looks for patterns enclosed in square brackets  like \"[12]\" representing citations and converts them into a list of integers. This is likely used for processing research papers or similar documents where citations need to be identified and tracked. \n\n[Inputs]\n*  `content` (str): The text string where citations might be found, assumed to follow the format \"[number]\". \n\n[Output]\n*  List[int]: A list containing each unique citation number found in the input text as integers. \n\n\n"
    },
    "knowledge_storm__interface__Article__prune_empty_nodeXs": {
        "label": "prune_empty_nodes",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 151,
        "endLineNo": 162,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L151-L162&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function likely traverses a tree-like data structure (e.g., a file system representation). It simplifies the tree by recursively removing empty nodes (nodes with no children and no content) and pruning them from the structure.\n\n## Inputs\n\n* `node`:  The starting point for traversing the tree. \n    *  Potentially a special root node indicating the start of the tree.\n\n* `self.prune_empty_nodes`: A function used to determine if a given node should be removed as empty.\n\n## Output\n\n*  A node: The function returns the modified node, recursively filtered and potentially pruned after removing empty nodes.\n*  None: If the input node and all its descendants are empty nodes, the function returns `None`. \n\n\n\n"
    },
    "knowledge_storm__interface__Engine__log_execution_time_and_lm_rm_usage__wrapper": {
        "label": "wrapper",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 374,
        "endLineNo": 385,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L374-L385&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:**  This function times the execution of a given function (`func`), calculates and logs the time taken, and also tracks the usage of language model (LM) and retriever (if available) resources. Its purpose is to profile the performance and resource consumption of the function.\n\n**Inputs:**\n\n* `func`: The function to be executed.\n* `*args`: Positional arguments to be passed to the function.\n* `**kwargs`: Keyword arguments to be passed to the function.\n  \n**Output:**\n\n* Execution time of the function (logged)\n* LM usage cost (logged and stored)\n* Retriever usage cost (logged and stored if retriever is available)\n* The return value of the `func`. \n\n\n"
    },
    "knowledge_storm__lm__AzureOpenAIModel__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 224,
        "endLineNo": 235,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L224-L235&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**[Quick Summary]**\n\nThis function calculates and returns the total number of tokens used (prompt and completion) for a given model or engine. It then resets the token counters for the next usage. The purpose is likely to track token usage for billing or resource management purposes.\n\n**[Inputs]**\n\n*  `self.kwargs`: This likely refers to keyword arguments passed to the class instance that created this function.\n    *  `model` or `engine`: A string representing the name of the language model or engine used. \n*  `self.prompt_tokens`: An integer representing the number of tokens in the prompt used for the model.\n*  `self.completion_tokens`: An integer representing the number of tokens in the model's generated completion.\n\n\n**[Output]**\n\n* `usage`:  A dictionary containing the total prompt and completion tokens for the specified model/engine.\n\n\n\n\n"
    },
    "knowledge_storm__lm__OpenAIModel____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 24,
        "endLineNo": 35,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L24-L35&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick summary]\nThis Python function initializes a class likely used for interacting with an OpenAI API, specifically with the GPT-3.5 Turbo model.  It sets up internal tracking for token usage and inherits functionality from a parent class.  The purpose is to provide a structured way to manage interactions with the GPT-3.5 Turbo model, possibly for applications requiring token usage monitoring or specific conversational flow. \n\n[Inputs]\n*  `model`: (str) Specifies the name of the OpenAI model to use (defaults to \"gpt-3.5-turbo-instruct\").\n* `api_key`: (Optional[str])  Your API key for accessing the OpenAI API.\n* `model_type`: (Literal[\"chat\", \"text\"])  Indicates the intended usage of the model (chat or text), although it's not used in the provided snippet.\n* `**kwargs`:  Additional keyword arguments that may be passed to the parent class's constructor.\n\n[Output]\n*  An instance of the class, ready for interaction with the GPT-3.5 Turbo model. \n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__PolishPageModule__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 79,
        "endLineNo": 90,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L79-L90&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown\n\n**Quick Summary:** \n\nThis function takes a topic and a draft page as input. It uses different language models to generate a lead section and optionally polish the entire page. Finally, it returns a structured prediction containing the lead section and the polished page.  \n\nThis code aims to improve the quality of written content by automatically generating a compelling lead section and polishing the overall writing style.\n\n**Inputs:**\n* `topic`: The subject of the writing.\n* `draft_page`: The initial text content to be improved.\n* `polish_whole_page`: A boolean flag indicating whether to polish the entire page or just generate the lead section.\n\n**Output:**\n* `lead_section`:  The generated lead section for the given topic.\n* `page`: The draft page, either left unchanged or polished based on the `polish_whole_page` flag. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__AskQuestionWithPersona": {
        "label": "AskQuestionWithPersona",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 109,
        "endLineNo": 120,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L109-L120&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Let's break down this code snippet.  \n\n**[Quick summary]** This function appears to be designed to facilitate a conversational interaction within a specific topic. It likely aims to guide a Wikipedia writer (in a defined persona) to gather information from an expert by posing relevant questions and maintaining a conversation history.\n\n**[Inputs]**\n*  `topic`: A string representing the subject the Wikipedia writer wants to write about.\n* `persona`: A string outlining the Wikipedia writer's specialized role or expertise beyond being a writer.\n* `conv`: A string containing the history of previous questions and answers in the conversation. \n\n **[Output]**\n* `question`: A string representing the next question the Wikipedia writer will ask the expert.  \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze! \n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__WritePageOutline": {
        "label": "WritePageOutline",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 100,
        "endLineNo": 111,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L100-L111&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze.  \n\n"
    },
    "knowledge_storm__lm__ClaudeModel__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 275,
        "endLineNo": 285,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L275-L285&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown\n\n**[Quick summary]**\n\nThis function calculates and returns the total tokens used for prompting and generating completion text for a specific language model.  It then resets the token counters for future use. The purpose is to track and manage the consumption of tokens, which are fundamental units of text in language models.\n\n**[Inputs]**\n\n*  `self.model`:  Represents the language model instance. \n*  `self.prompt_tokens`:  An accumulated count of tokens used in the prompt.\n*  `self.completion_tokens`: An accumulated count of tokens in the generated completion text.\n\n**[Output]**\n\n* A dictionary `usage` containing:\n    * The model name as the key.\n    * A nested dictionary with 'prompt_tokens' and 'completion_tokens' as keys, holding the respective token counts. \n\n\n"
    },
    "knowledge_storm__lm__GoogleModel__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 653,
        "endLineNo": 663,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L653-L663&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis function calculates and returns the total number of tokens used for prompts and completions for a given language model. It then resets the token counters for future use. This mechanism likely helps track and manage token consumption within a system using the language model.\n\n\n## Inputs \n\n* `self.model`: This refers to the specific language model instance being used.\n* `self.prompt_tokens`:  The number of tokens used in the prompt for the language model.\n* `self.completion_tokens`: The number of tokens generated by the language model as a response (completion).\n\n## Output\n\n*  A dictionary `usage` containing:\n    *  The model name as the key.\n    *  A nested dictionary with 'prompt_tokens' and 'completion_tokens' as keys, holding the corresponding token counts. \n\n\n\n"
    },
    "knowledge_storm__lm__OpenAIModel__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 44,
        "endLineNo": 54,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L44-L54&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary\n\nThis function tracks the number of tokens used in a prompt and completion for a specific model (or engine) and then resets the token counters. It likely represents a tracking mechanism within a larger system that manages token usage for AI model interactions.\n\n## Inputs\n\n* `self.kwargs.get('model') or self.kwargs.get('engine')`:  Identifies the specific model or engine being used.\n*  `self.kwargs`:  A dictionary containing keyword arguments passed to the function or class instance.\n\n## Output\n\n* `usage`: A dictionary containing the total prompt and completion tokens used for the specified model. \n\n\n\n\n\n"
    },
    "knowledge_storm__lm__TogetherClient__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 522,
        "endLineNo": 532,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L522-L532&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis: \n\n**[Quick Summary]**\n\nThis function calculates and returns the total tokens used for a specific model (in this case, `self.model`) across both prompt and completion parts. It then resets the token counters for prompt and completion tokens.\n\n**[Inputs]**\n\n* **self:**  Likely refers to an object instance belonging to a class that manages token usage.\n\n**[Output]**\n\n* **usage:** A dictionary containing the total tokens used for the prompt and completion for the specific model.  \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__StormArticleGenerationModule__generate_section": {
        "label": "generate_section",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 31,
        "endLineNo": 41,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L31-L41&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick Summary:**  This function extracts relevant information from a data source (potentially a database or API), generates content for a specific section of a document based on a topic and outline, and returns a dictionary containing the section name, generated content, and retrieved information.  Its purpose is likely to build structured documents by dynamically assembling content and data.\n\n**Inputs:**\n\n* `information_table`: An object (possibly a database interface or API client) capable of retrieving information based on queries.\n* `section_query`: A query string or list of criteria used to retrieve information from `information_table`.\n* `section_outline`: A structured representation of the desired content for the section, likely a list or dictionary defining headings and subheadings.\n* `section_name`:  The name of the section being generated. \n* `topic`: A high-level subject or theme for the section content.\n\n**Output:**\n\n* `section_name`: The name of the section.\n* `section_content`: The generated text content for the section.\n* `collected_info`: The list of data retrieved from `information_table` using the `section_query`. \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__WriteLeadSection": {
        "label": "WriteLeadSection",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 52,
        "endLineNo": 62,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L52-L62&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze. \n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__StormArticlePolishingModule____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 17,
        "endLineNo": 27,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L17-L27&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown\n\n**Quick Summary:** \n\nThis Python code initializes a class, likely for news article generation or refinement. It sets up two language models (`article_gen_lm` and `article_polish_lm`), presumably for generating initial drafts and polishing them respectively. It then creates an instance of a `PolishPageModule`, which uses these language models to enhance article quality.\n\n**Inputs:**\n\n* `article_gen_lm`:  A language model used to generate the initial draft of an article.\n* `article_polish_lm`: A language model used to refine and polish the generated article.\n\n**Output:**\n\n* An instance of the `PolishPageModule` class, ready to process and improve articles. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__TopicExpert____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 156,
        "endLineNo": 166,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L156-L166&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Breakdown:\n\n**Quick Summary:** This Python function initializes an object that combines question answering with document retrieval. It leverages a pre-trained model for generating queries from questions, retrieving relevant documents, and generating answers from the retrieved information. \n\n**Inputs:**\n\n*  `max_search_queries`: Maximum number of search queries to execute.\n*  `search_top_k`: Number of top documents to retrieve for each query.\n*  `retriever`: An object presumably responsible for retrieving documents based on queries.\n*  `engine`: An unspecified object potentially related to the question answering process.\n\n**Output:**\n\n* An initialized object ready to process questions and generate answers. \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__retriever__is_valid_wikipedia_source": {
        "label": "is_valid_wikipedia_source",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/retriever.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/retriever.py",
        "lineNo": 225,
        "endLineNo": 235,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fretriever.py%23L225-L235&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**[Quick summary]**\n\nThis function determines if a given URL is likely safe to access. It parses the URL to extract the domain and checks if it's present in a set of domains known to be unreliable, deprecated, or blacklisted. The function returns `True` if the domain is safe and `False` otherwise.\n\n**[Inputs]**\n\n* `url`:  A URL string to be evaluated.\n\n\n**[Output]**\n\n* `True`: The URL is considered safe.\n* `False`: The URL is considered unsafe. \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable__construct_log_dict": {
        "label": "construct_log_dict",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 127,
        "endLineNo": 137,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L127-L137&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary \n\nThis function processes a collection of conversations, structuring each conversation into a dictionary containing the persona involved and a list of dialogue turns. This appears to be a function designed for organizing and storing conversational data. \n\n\n## Inputs\n\n* **conversations:** A collection of conversations, likely structured as a list of tuples.\n* Each tuple presumably contains:\n    * **persona:** A string representing the persona involved in the conversation.\n    * **conv:** A list of `Turn` objects representing individual turns within the conversation.\n\n## Output\n\n* **conversation_log:** A list of dictionaries.\n* Each dictionary represents a single conversation and contains:\n    * **perspective:** A string representing the persona involved.\n    * **dlg_turns:** A list of strings, each representing a log of a turn in the conversation.  \n"
    },
    "knowledge_storm__interface__ArticleSectionNode____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 49,
        "endLineNo": 58,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L49-L58&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis of Provided Code\n\n**Quick Summary:** This code defines a class structure, likely representing a hierarchical element in a document or knowledge base.  Each instance can have a name, content, child elements, and a preference value. This structure could be used to represent sections of a book, articles, or even organizational hierarchies.\n\n\n**Inputs:**\n\n* `section_name`: A string representing the name or title of the section.\n* `content`:  The data content of the section (format is unspecified).\n\n**Output:**\n\n* An instance of the class representing a single section with the provided name and content. \n* This instance can hold child sections and a preference value.  \n\n\n"
    },
    "knowledge_storm__interface__LMConfigs__log": {
        "label": "log",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 353,
        "endLineNo": 362,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L353-L362&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick Summary]\n\nThis function extracts keyword arguments (`kwargs`) from attributes of an object that have the substring \"_lm\" in their names and contain a 'kwargs' attribute themselves. It returns these extracted keyword arguments in an `OrderedDict`, preserving the order of the attribute names.\n\n[Inputs]\n\n- `self`: A reference to the current instance of the object. \n\n[Output]\n\n- An `OrderedDict` where the keys are attribute names containing \"_lm\" and values are the corresponding keyword arguments (`kwargs`) from those attributes. \n\n\n"
    },
    "knowledge_storm__lm__DeepSeekModel__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 136,
        "endLineNo": 145,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L136-L145&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**[Quick Summary]**\n\nThis function calculates the total number of prompt and completion tokens used by a specific language model, then resets the token counters for future use. It provides a summary of token usage for tracking and potential billing purposes.\n\n**[Inputs]**\n\n*  `self.model`:  A string likely representing the name or identifier of the language model used.\n* `self.prompt_tokens`: An integer representing the number of tokens used in the user's prompt.\n* `self.completion_tokens`: An integer representing the number of tokens generated by the model as a completion.\n\n**[Output]**\n\n*  A dictionary `usage` containing: \n    * The model name as the key\n    * A nested dictionary with 'prompt_tokens' and 'completion_tokens' as keys, containing the respective token counts. \n* The function also resets `self.prompt_tokens` and `self.completion_tokens` to 0. \n\n\n\n\n\n"
    },
    "knowledge_storm__lm__OllamaClient____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 409,
        "endLineNo": 418,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L409-L418&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code initializes a class (likely for interacting with a HuggingFace model) using a specified URL and port. It inherits from a parent class (`super().__init__`) and stores additional keyword arguments (`**kwargs`) for later use, particularly in the `generate` method.\n\n## Inputs\n\n* `url`: The hostname or address of the HuggingFace API endpoint.\n* `port`: The port number for the HuggingFace API endpoint.\n* `model`: Name or identifier of the model to interact with.\n* `kwargs`: Additional keyword arguments to be passed to the constructor and potentially the `generate` method.\n\n## Output\n\n* An initialized instance of the class, ready to interact with the specified HuggingFace model. \n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__StormArticleGenerationModule____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 21,
        "endLineNo": 30,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L21-L30&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary:\n\nThis function defines a class (likely part of a larger system) designed for generating articles. It leverages a pre-trained language model (`article_gen_lm`) to generate text, potentially in sections.  It's purpose seems to be breaking down article generation into manageable chunks.\n\n## Inputs:\n\n*  `article_gen_lm`: Specifies the language model to be used for text generation (either a DistilPy SerpApi (`dsp.dsp.LM`) or HuggingFace (`dsp.dsp.HFModel`).\n*  `retrieve_top_k`: An integer defining the number of top candidates to retrieve during some processing step (likely related to text generation or selection).\n* `max_thread_num`: An integer setting a limit on the number of concurrent threads used during processing.\n\n## Output:\n\n*  A new instance of the class is created, ready to generate article content. \n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__AskQuestion": {
        "label": "AskQuestion",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 99,
        "endLineNo": 108,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L99-L108&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the function or code you would like me to analyze.  \n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__GenPersona": {
        "label": "GenPersona",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 48,
        "endLineNo": 57,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L48-L57&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Feedback\n\n**[Quick Summary]**\n\nThis function aims to assist in building a Wikipedia article by recommending a diverse group of editors (\"personas\") based on a given topic.  It leverages example outlines from related Wikipedia pages for inspiration.\n\n**[Inputs]**\n\n*  `topic of interest:` A string describing the subject for the new Wikipedia article.\n*  `Wiki page outlines of related topics for inspiration:` A string containing links to existing Wikipedia pages that provide a structure for similar articles.\n\n**[Output]**\n\n*  `personas:` A string containing descriptions of the recommended editors (\"personas\") and their areas of focus for the new article. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable__prepare_table_for_retrieval": {
        "label": "prepare_table_for_retrieval",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 154,
        "endLineNo": 163,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L154-L163&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function preprocesses text snippets extracted from URLs, encoding them into numerical representations using a pre-trained sentence transformer model. The purpose is likely to enable similarity comparisons or clustering of these snippets based on their semantic meaning. \n\n## Inputs\n\n* **self.url_to_info:** A dictionary mapping URLs to information objects containing snippets.\n* **self.encoder:** A pre-trained SentenceTransformer model specifically 'paraphrase-MiniLM-L6-v2'. \n\n## Output\n\n* **self.collected_urls:** A list of unique URLs from the input dictionary.\n* **self.collected_snippets:** A list of all snippets extracted from the information objects.\n* **self.encoded_snippets:**  A  matrix of numerical embeddings representing each snippet, generated by the SentenceTransformer model.  \n\n\n"
    },
    "knowledge_storm__utils__WebPageHelper__download_webpage": {
        "label": "download_webpage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 582,
        "endLineNo": 591,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L582-L591&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function sends a GET request to a specified URL using the `httpx_client`. It checks for successful responses and raises an exception for any HTTP error codes (400 and above). If successful, it returns the content of the response; otherwise, it returns `None`.  The purpose is to safely retrieve data from a given URL.\n\n## Inputs\n\n* `url`: The URL to make the request to\n* `self.httpx_client`: An instance of the httpx client library, used for making the HTTP request. \n* `timeout=4`: The maximum amount of time (in seconds) to wait for a response from the server.\n\n## Output\n\n* `res.content`: The content of the HTTP response if successful, otherwise `None`. \n\n\n\n"
    },
    "knowledge_storm__interface__ArticlePolishingModule__polish_article": {
        "label": "polish_article",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 287,
        "endLineNo": 295,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L287-L295&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze.  I need the actual code snippet to give you a summary, inputs, and output description. \n\n"
    },
    "knowledge_storm__interface__Engine__apply_decorators": {
        "label": "apply_decorators",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 388,
        "endLineNo": 396,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L388-L396&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis\n\n[Quick Summary] This Python function traverses an object's methods, identifying those starting with \"run_\" and decorating them with a function called `log_execution_time_and_lm_rm_usage`. The purpose is likely to monitor the execution time and usage of Language Model (LM) and Resource Manager (RM) resources for these methods.\n\n[Inputs]\n\n*  `self`: A reference to the object the function is called upon.\n\n[Output]\n*   Modified object with decorated \"run_\" methods.  These decorated methods will now log execution time and LM/RM usage. \n\n\n\n"
    },
    "knowledge_storm__interface__LMConfigs__collect_and_reset_lm_history": {
        "label": "collect_and_reset_lm_history",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 327,
        "endLineNo": 335,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L327-L335&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function gathers histories from all attributes of an object that have a '_lm' substring in their name and possess a 'history' attribute. It then clears the histories from these attributes and returns a consolidated list of collected histories. This likely serves as a mechanism to track and potentially process or analyze historical data associated with specific model parameters or states within an object.\n\n## Inputs\n\n*  `self`:  A reference to the object itself.\n\n## Output\n\n*  `history`: A list containing all histories collected from the object's attributes. \n\n\n"
    },
    "knowledge_storm__interface__log_execution_time__wrapper": {
        "label": "wrapper",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 300,
        "endLineNo": 308,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L300-L308&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:** This function wraps another function (`func`) to measure and log its execution time. It records the start time, calls the function, records the end time, calculates the execution time, logs it, and stores it in a dictionary (`self.time`).\n\n**Inputs:**\n\n*  `self`:  Likely refers to an instance of a class containing this function.\n* `*args`:  Arbitrary positional arguments passed to the wrapped function.\n* `**kwargs`: Arbitrary keyword arguments passed to the wrapped function.\n\n**Output:**\n\n* Returns the result of the executed function (`func`).   \n* Logs the name of the executed function and its execution time (formatted to four decimal places).\n* Stores the execution time for the function in the `self.time` dictionary. \n\n\n\n"
    },
    "knowledge_storm__lm__AzureOpenAIModel__log_usage": {
        "label": "log_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 215,
        "endLineNo": 223,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L215-L223&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function logs the total number of tokens used by the OpenAI API in a given response. It updates internal counters for prompt and completion tokens to track overall usage, likely for billing or monitoring purposes. \n\n## Inputs\n\n* `response`: An OpenAI API response object, presumably containing usage data.\n \n## Output\n\n*  Updates internal variables:\n    * `self.prompt_tokens`:  The number of tokens used in the user's prompt.\n    * `self.completion_tokens`: The number of tokens used in the API's response. \n\n\n\n\n"
    },
    "knowledge_storm__rm__VectorRM__get_vector_count": {
        "label": "get_vector_count",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 269,
        "endLineNo": 277,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L269-L277&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown: Vector Count\n\n**Quick Summary**\n\nThis function determines and returns the number of vectors stored within a specific QDRant collection. It is likely part of a larger application that interacts with a vector database.\n\n**Inputs**\n\n* `self.qdrant`:  A QDRant client object, likely representing a connection to the database.\n* `self.collection_name`: A string representing the name of the QDRant collection to check.\n\n**Output**\n\n* `int`: The total count of vectors present in the specified QDRant collection. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner___load_draft_article_from_local_fs": {
        "label": "_load_draft_article_from_local_fs",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 246,
        "endLineNo": 254,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L246-L254&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick Summary]\nThis function takes a topic name, a draft article path, and a URL to information path as inputs. It asserts that both files exist and then loads the article text and references from the files. Finally, it creates and returns a StormArticle object populated with the provided information. This function likely aims to prepare an article for further processing or rendering based on a given topic.\n\n[Inputs]\n- `topic_name`: A string representing the topic of the article.\n- `draft_article_path`: A string pointing to the location of a file containing the draft article text.\n- `url_to_info_path`: A string pointing to the location of a file containing information about URLs related to the article.\n\n[Output]\n- A `StormArticle` object containing:\n    - `topic_name`: The topic of the article.\n    - `article_text`: The content of the draft article.\n    - `references`:  A list of references extracted from the URLs. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__from_string": {
        "label": "from_string",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 485,
        "endLineNo": 493,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L485-L493&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]** This function takes article text and reference data, processes the article into a structured dictionary, creates an Article object, populates it with the processed data and references, and returns the complete article object. The purpose is likely to build and organize articles from raw text and associated reference information.\n\n**[Inputs]**\n\n* `article_text`: The raw text content of the article.\n* `topic_name`:  The name or topic associated with the article.\n* `references`: A dictionary containing reference information, likely with keys like \"url_to_info\" mapping URLs to reference data.\n\n**[Output]**\n\n* A fully populated `Article` object. This object likely contains:\n    *  `topic_name`: The topic name.\n    *  `article_dict`: The structured dictionary representation of the article.\n    *  `reference`:  The `references` dictionary, now containing instantiated `StormInformation` objects for each reference. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__get_outline_tree": {
        "label": "get_outline_tree",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 408,
        "endLineNo": 416,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L408-L416&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis Python function `build_tree` recursively builds a dictionary representation of a tree-like data structure.  It takes a root node as input and constructs a nested dictionary where each key is a child node's \"section_name\" and the value is a dictionary representing the subtree rooted at that child.\n\n## Inputs\n\n*  `node`:  Represents a single node in the tree-like structure.\n    * It likely has an attribute called `children` which is a list of child nodes.\n*  `section_name`: A string attribute of a node representing its unique identifier or label.\n\n## Output\n\n* A dictionary representing the entire tree structure.\n    *  The dictionary is nested, with keys corresponding to section names and values representing subtrees (also dictionaries). \n    * An empty dictionary is returned if the input `node` has no children. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable__from_conversation_log_file": {
        "label": "from_conversation_log_file",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 145,
        "endLineNo": 153,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L145-L153&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis:\n\n**[Quick summary]** This function loads a JSON file containing conversation logs, parses each log into dialogue turns and persona information, and constructs an instance of a class (`cls`) representing a collection of conversations. Its purpose is to deserialize conversation data from a JSON file into a usable format.\n\n**[Inputs]**\n\n*  `path`: The path to the JSON file containing the conversation logs.\n*  `cls`: A class that is expected to initialize with a list of conversations.\n\n**[Output]**\n\n* An instance of the class `cls` containing a list of conversations, where each conversation is represented as a tuple of (persona, dialogue_turns). \n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__update_citation_index": {
        "label": "update_citation_index",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 456,
        "endLineNo": 464,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L456-L464&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Summary, Inputs, and Output \n\n**Quick Summary:** This function updates citations within a string based on a provided `citation_map`. It replaces original citations with placeholders and then substitutes those placeholders with unified citations according to the mapping.  The purpose is to standardize citations in a text.\n\n**Inputs:**\n\n* `s`: A string containing citations.\n* `citation_map`: A dictionary where keys are original citations and values are unified citations.\n\n**Output:**\n\n* A modified string with updated citations based on the `citation_map`. \n"
    },
    "knowledge_storm__lm__ClaudeModel__log_usage": {
        "label": "log_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 267,
        "endLineNo": 274,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L267-L274&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick summary:** This function is designed to track token usage from an Anthropic API response. \n\nIt takes an API response object and updates internal counters for prompt and completion token counts. These counters likely help monitor API usage and potentially for billing purposes.\n\n**Inputs:**\n\n* `response`: An object representing the response from the Anthropic API. \n* `usage_data`:  A nested attribute within the `response` object, presumably containing token usage information. \n\n**Output:**\n\n*  Updates the internal `prompt_tokens` and `completion_tokens` counters within the class instance.  \n\n\n"
    },
    "knowledge_storm__lm__DeepSeekModel__log_usage": {
        "label": "log_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 128,
        "endLineNo": 135,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L128-L135&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function calculates and tracks the number of tokens used by the DeepSeek API for both prompts and completions. It ensures thread safety when multiple requests are made concurrently. \n\n## Inputs\n\n* `response`: Likely a dictionary containing data returned from a DeepSeek API call.\n\n## Output \n\n* Updates the instance variables `prompt_tokens` and `completion_tokens` with the number of tokens used for each purpose. \n"
    },
    "knowledge_storm__lm__GoogleModel__log_usage": {
        "label": "log_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 645,
        "endLineNo": 652,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L645-L652&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary:\n\nThis function processes Google API response data to track the number of tokens used for prompting and generating completions. It calculates and accumulates these token counts within a locked context to ensure thread-safety.\n\n## Inputs:\n- `response`:  Likely an object returned from a Google API call related to text generation or language modeling.\n\n<h2> Outputs:\n-None:  This function updates internal variables (`prompt_tokens`, `completion_tokens`) but doesn't directly return any value. \n"
    },
    "knowledge_storm__lm__OpenAIModel__log_usage": {
        "label": "log_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 36,
        "endLineNo": 43,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L36-L43&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary**\n\nThis function logs the number of prompt tokens and completion tokens consumed from an OpenAI API response. The purpose is to track API usage for billing and monitoring purposes.\n\n**Inputs**\n\n* `response`:  An API response object from OpenAI.\n\n**Output**\n\n* None. The function modifies internal state variables (`self.prompt_tokens`, `self.completion_tokens`) to track the total tokens used. \n\n\n\n"
    },
    "knowledge_storm__lm__TogetherClient__log_usage": {
        "label": "log_usage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 514,
        "endLineNo": 521,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L514-L521&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code snippet tracks token usage from an OpenAI API response. It calculates the number of prompt tokens and completion tokens used and updates a running total. This is likely part of a larger system for monitoring and managing API usage costs.\n\n## Inputs\n\n*  **response:** An API response object from OpenAI, presumably containing usage information. \n\n* **self._token_usage_lock:** A lock object used to ensure exclusive access to the token usage variables, preventing race conditions when updating them concurrently.\n\n## Output\n\n* **Updates**: The `prompt_tokens` and `completion_tokens` attributes of the object are incremented with the values retrieved from the API response.  \n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__PolishPageModule____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 71,
        "endLineNo": 78,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L71-L78&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown\n\n**Quick Summary:** This code defines a class that combines two text generation models, likely for refining written content. It takes a \"write lead\" model and a \"polish\" model, and uses them sequentially to first generate an initial section and then refine the overall text quality.\n\n**Inputs:**\n\n* `write_lead_engine`: A text generation model specialized in creating introductory sections.\n* `polish_engine`: A text generation model trained to improve the overall quality and style of text.\n\n**Output:**\n\n*  Refined text that includes a well-written lead section and polished content. \n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__StormKnowledgeCurationModule___run_conversation__run_conv": {
        "label": "run_conv",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 258,
        "endLineNo": 265,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L258-L265&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:** \nThis Python function likely initiates a conversation simulation. It calls another function (`conv_simulator`) passing in parameters like the conversation topic, a reference to ground truth, a persona for the simulated agent, and a callback function for handling responses.  The purpose is likely to test or evaluate a conversational AI system.\n\n**Inputs:**\n\n* `topic`: The subject or theme of the conversation.\n* `ground_truth_url`: A URL pointing to a reference or dataset containing expected conversation outcomes.\n* `persona`:  A set of characteristics or attributes defining the simulated agent's personality or role in the conversation.\n* `callback_handler`: A function that will be executed to process and potentially modify the simulated agent's responses.\n\n**Output:**\n\n* The output of the `conv_simulator` function, which could be:\n    *  A simulated conversation transcript.\n    *  Metrics evaluating the performance of the conversation.\n    *  An indication of success or failure in completing the simulation. \n\n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__FindRelatedTopic": {
        "label": "FindRelatedTopic",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 40,
        "endLineNo": 47,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L40-L47&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the Python function code you want me to analyze.  I need the code to give you a summary, inputs, and output. \n\n"
    },
    "knowledge_storm__storm_wiki__modules__retriever__StormRetriever__retrieve": {
        "label": "retrieve",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/retriever.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/retriever.py",
        "lineNo": 243,
        "endLineNo": 250,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fretriever.py%23L243-L250&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Breakdown\n\n**Quick Summary:**  \n\nThis function retrieves data using a method `_rm` potentially querying a knowledge base or database. It processes the retrieved data, specifically removing citations from article snippets, and then constructs StormInformation objects from each data point before returning a list of them.  The overall purpose is likely to prepare structured information from a source for further processing or analysis. \n\n**Inputs:**\n\n* `query`: A search query or a list of queries used to retrieve data.\n* `exclude_urls`: A list of URLs to exclude from the retrieved data.\n\n**Output:**\n\n* A list of `StormInformation` objects, where each object represents a processed data point containing information extracted from the source. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__to_string__preorder_traverse": {
        "label": "preorder_traverse",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 359,
        "endLineNo": 366,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L359-L366&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function recursively traverses a tree data structure, likely representing a hierarchical document or outline. It performs a preorder traversal, printing the node names and content indented based on their depth in the tree.  The generated output is formatted with hashtags (#) for each level of indentation.\n\n## Inputs\n\n*  `node`: A node object representing a point in the tree structure. It likely has attributes for `section_name`, `content`, and a list of `children` nodes.\n*  `level`: An integer indicating the current depth of the node in the tree.\n*  `result`: A list to store the formatted output.\n\n## Output\n\n*  A formatted list of strings, representing the hierarchical structure of the tree.\n*  Each string in the list corresponds to a node in the tree.\n*  Node names are prefixed with a series of hashtags (`#`) which correspond to their depth in the tree. \n    \n"
    },
    "knowledge_storm__interface__LMConfigs__init_check": {
        "label": "init_check",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 320,
        "endLineNo": 326,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L320-L326&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:** This code snippet iterates through an object's attributes. If an attribute name contains \"_lm\" and its corresponding value is `None`, it logs a warning indicating that the associated language model hasn't been initialized and suggests calling a specific setter method (`set_{attr_name}()`). This likely ensures that all required language models are properly set up before using them.\n\n**Inputs:**\n\n* `self.__dict__`: A dictionary containing the object's attributes and their values.\n\n**Output:**\n\n* Log warnings for missing language models.  \n"
    },
    "knowledge_storm__lm__VLLMClient____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 364,
        "endLineNo": 370,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L364-L370&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:\n\n**Quick Summary:** This code snippet initializes a class (likely for interacting with a language model via a specific API).  It inherits from a parent class (`super().__init__`) and sets up connection parameters (`model`, `port`, `url`, `kwargs`).  Importantly, it also stores any additional keyword arguments passed during instantiation to be used later in the `generate` method.\n\n**Inputs:**\n* `model`: Specifies the language model to interact with.\n* `port`:  Likely the port number for the API connection.\n* `url`:  The base URL for the API endpoint.\n* `kwargs`:  A dictionary of keyword arguments to customize the initialisation or later method calls (including the `generate` method).\n\n**Output:** None. This code snippet only sets up the initial state of the class instance. The actual output would result from calling methods of this instance, particularly the `generate` method, which would utilize the stored `kwargs`.  \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 30,
        "endLineNo": 36,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L30-L36&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Okay, here's a breakdown of the code snippet you provided:\n\n**[Quick Summary]**\n\nThis code snippet likely defines the initial state of a multi-module AI system designed for article creation. It sets up placeholders for various large language models (LLMs) that would be specialized in different stages of the article writing process, such as conversation simulation, question answering, outline generation, main article generation, and final polishing. \n\nThe purpose is to clearly indicate which LLMs are used in each stage of article development.\n\n**[Inputs]**\n\n*  None explicitly stated.\n     This could be part of a class initialization where the model instances would be assigned during object creation.\n\n**[Output]**\n\n*  Object initialization. \n*  Creates an object with attributes representing the potential LLMs used for different article writing tasks.\n*  `self.conv_simulator_lm`, `self.question_asker_lm`, etc. will likely be assigned actual LLM objects later in the code. \n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__modules__article_polish__PolishPage": {
        "label": "PolishPage",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_polish.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_polish.py",
        "lineNo": 63,
        "endLineNo": 69,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_polish.py%23L63-L69&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown:\n\n**Quick Summary:**\n\nThis code defines two interactive fields for displaying and manipulating text. The user inputs text in one field (\"draft article\") and the code processes it to remove repetitions, outputting the revised text in another field (\"Your revised article\").\n\n**Inputs:**\n\n* **draft_page:** A string representing the user's initial text input containing the article. \n\n**Output:**\n\n* **page:** A string representing the processed text with repetitions removed. \n\n\nLet me know if you'd like me to elaborate on any specific aspect or provide code examples!\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 192,
        "endLineNo": 198,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L192-L198&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": " \n##  Code Snippet Analysis \n\n**[Quick Summary]**\n\nThis code initializes a class, likely a data structure for managing information related to a specific topic. It sets up a `reference` dictionary with two sections: one to store URLs pointing to a unified index and another to hold general information about URLs. \n\n**[Inputs]**\n\n* `topic_name`:  A string representing the name or identifier of the topic the data structure is associated with. \n\n**[Output]**\n\n* An initialized object with the specified `topic_name` and an empty `reference` dictionary ready to store URL mappings and information. \n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__from_outline_file": {
        "label": "from_outline_file",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 424,
        "endLineNo": 430,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L424-L430&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Summary\n\nThis function takes a file path and a topic, reads the content of the file, and creates an instance of the `StormArticle` class using the outline structure within the file. The purpose of this code is to generate StormArticle objects from pre-defined outline formats. \n\n## Inputs\n\n* `file_path`:  The path to a file containing the article outline.\n* `topic`: The topic of the article.\n\n## Output\n\n*  An instance of the `StormArticle` class populated with the outline data and topic. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__get_outline_as_list__preorder_traverse": {
        "label": "preorder_traverse",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 336,
        "endLineNo": 342,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L336-L342&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "```python\ndef preorder_traverse(node, level=0, add_hashtags=True):\n    prefix = \"#\" * level if add_hashtags else \"\"  # Adjust level if excluding root\n    result.append(f\"{prefix} {node.section_name}\".strip() if add_hashtags else node.section_name)\n    for child in node.children:\n        preorder_traverse(child, level + 1) \n\n```\n\n**[Quick Summary]**\nThis function performs a preorder traversal of a hierarchical tree-like data structure. It recursively visits each node, appending its `section_name` to a `result` list, optionally prefixed with hashtags based on its depth.\n\n**[Inputs]**\n* `node`: The current node being visited in the tree.\n\n* `level`: The depth of the current node in the tree (default: 0).\n\n* `add_hashtags`: A boolean flag indicating whether to add hashtags as prefixes for nodes (default: True).\n\n **[Output]**\n*  `result`: A list containing the `section_name` of each node in the tree, with optional hashtags based on depth. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__reorder_reference_index__pre_order_find_index": {
        "label": "pre_order_find_index",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 376,
        "endLineNo": 382,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L376-L382&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick Summary:**\n\nThis recursive function `pre_order_find_index` traverses a hierarchical tree-like data structure. It aims to identify and extract indices associated with citations within the content of each node.  The extracted indices are added to a list called `ref_indices`.\n\n**Inputs:**\n\n*  `node`: A node object representing an element within the hierarchical structure. It likely has attributes like `content` and `children`.\n*  `ref_indices`: A list which accumulates the extracted citation indices.\n\n**Output:**\n\n*  `ref_indices`: A list containing the indices of citations found within the tree.\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__reorder_reference_index__pre_order_update_index": {
        "label": "pre_order_update_index",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 391,
        "endLineNo": 397,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L391-L397&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:** This function recursively traverses a tree-like data structure (likely representing an article's structure).  It updates the content of nodes conditionally, likely replacing citations with updated indices based on a provided mapping. \n\n**Inputs:**\n\n* `node`: The current node being processed in the tree.\n* `ref_index_mapping`: Likely a dictionary mapping old citation indices to new ones.\n\n**Output:**\n\n*  Modified tree structure with updated citation indices within node content. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformation__to_dict": {
        "label": "to_dict",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 56,
        "endLineNo": 62,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L56-L62&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary**\n\nThis function generates a dictionary containing information about a resource, likely a web page or document. The dictionary includes a unique identifier (uuid), a description, a list of snippets (possibly excerpts), and a title. This function is likely used to serialize an object containing resource data for storage, transmission, or display.\n\n**Inputs**\n\n*  `self.uuid`: A unique identifier for the resource.\n*  `self.description`: A textual description of the resource.\n*  `self.snippets`: A list of strings, possibly excerpts or summaries of the resource.\n*  `self.title`: The title of the resource.\n\n**Output**\n\n* A dictionary with the following keys and values:\n    * `\"url\"`: The uuid of the resource.\n    * `\"description\"`: The description of the resource.\n    * `\"snippets\"`: The list of snippets.\n    * `\"title\"`: The title of the resource. \n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__remove_uncompleted_sentences_with_citations__deduplicate_group": {
        "label": "deduplicate_group",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 332,
        "endLineNo": 338,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L332-L338&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function extracts unique citations from a string, sorts them numerically, and returns the sorted list as a string.  It aims to clean and standardize a list of citations presented in a potentially messy format.\n\n## Inputs\n\n* **citations:** A string containing citations, possibly interspersed with other text.  \n\n## Output\n\n* A string containing the sorted, unique citations in numerical order. Each citation is represented as \"[number]\". \n"
    },
    "knowledge_storm__interface__Article__from_string": {
        "label": "from_string",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 145,
        "endLineNo": 150,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L145-L150&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide me with the code selection you'd like me to analyze. I need the actual code to give you a summary, inputs, and output.  \n\n"
    },
    "knowledge_storm__interface__Article__get_first_level_section_names": {
        "label": "get_first_level_section_names",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 137,
        "endLineNo": 142,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L137-L142&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown:\n\n**Quick Summary:** This function extracts the names of all immediate child sections from a hierarchical data structure (\"self.root\") and returns them as a list.  Its purpose is likely to provide a list of top-level section headings for display or navigation. \n\n**Inputs:**\n* `self.root`:  Represents the root node of the hierarchical data structure.  It presumably has a collection of \"children\" nodes.\n\n\n**Output:**\n* A list of strings, where each string is the \"section_name\" of a first-level child of `self.root`. \n"
    },
    "knowledge_storm__interface__Article__get_outline_tree__build_tree": {
        "label": "build_tree",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 129,
        "endLineNo": 134,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L129-L134&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick Summary]\nThis function recursively builds a hierarchical tree-like data structure from a set of nodes. Each node has a `section_name` and potentially child nodes, forming a nested structure represented as a dictionary. The purpose is to organize and represent hierarchical data in a tree format.\n\n[Inputs]\n- `node`: The current node being processed in the recursion. It likely has:\n    - a `section_name` attribute\n    - a `children` attribute, containing a list of child nodes\n\n[Output]\n- A dictionary representing the tree structure. \n    - Keys are `section_names` from the nodes.\n    - Values are dictionaries representing the subtrees rooted at each child node. \n    - If there are no children (an empty list), the function returns an empty dictionary. \n"
    },
    "knowledge_storm__interface__ArticleSectionNode__add_child": {
        "label": "add_child",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 59,
        "endLineNo": 64,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L59-L64&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:** This code snippet handles adding a new child node to a hierarchical structure. It checks if  `insert_to_front` is True; if so, the new child node is added to the beginning of the `children` list, otherwise, it's added to the end. This allows for controlled insertion of children based on a specific order. \n\n**Inputs:**\n\n*  `insert_to_front`: A boolean value indicating whether to insert the new child at the front or end.\n*  `new_child_node`: The node object to be added as a child. \n\n**Output:**\n\n* The `children` list is modified to include the `new_child_node`. \n"
    },
    "knowledge_storm__interface__Engine____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 364,
        "endLineNo": 369,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L364-L369&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown:\n\n**Quick Summary:** This code likely initializes an object used for tracking the performance and costs of a system that combines language models (LMs) and retriever models (RM). It stores configuration settings for the language models, timestamps, costs associated with language model usage, and costs associated with retriever queries. \n\n**Purpose:**  The code likely prepares data structures for monitoring and analyzing the efficiency of a hybrid LM/RM system, allowing for comparisons and optimizations.\n\n\n**Inputs:**\n\n*  `lm_configs`: Likely a dictionary or object containing configurations for the language models being used.\n*  `time`:  Potentially an empty dictionary intended to store timestamps related to system operations.\n\n**Output:** \n\n*  Modified object with initialized attributes: \n    *  `lm_configs`\n    *  `time`\n    *  `lm_cost`: An empty dictionary to store language model costs.\n    *  `rm_cost`: An empty dictionary to store retriever model costs. \n"
    },
    "knowledge_storm__interface__KnowledgeCurationModule____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 216,
        "endLineNo": 221,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L216-L221&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:** This function likely initializes an object (presumably a class) by storing a provided `retriever` object. The overall purpose seems to be setting up a component that relies on a retrieval mechanism.\n\n**Inputs:**\n\n* `retriever`: This is likely an object, possibly an instance of a class designed to perform some type of retrieval operation (e.g., searching for information).\n\n**Output:**\n\n*  None. This function appears to perform initialization and store an attribute, without directly returning a value. \n\n\n\nLet me know if you'd like me to analyze any other code snippets! \n"
    },
    "knowledge_storm__rm__BingSearch__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 115,
        "endLineNo": 120,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L115-L120&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "**Quick Summary**\n\nThis function updates the usage count for a BingSearch feature from the `self.usage` variable, sets the usage count to 0, and returns a dictionary containing the usage information.  It likely manages resource usage or tracking for a Bing Search API integration.\n\n**Inputs**\n\n*  `self.usage`: Represents the current usage count for BingSearch.\n\n**Output**\n\n*  A dictionary containing a key 'BingSearch' with the value being the usage count.  \n\n\n\n\nLet me know if you have any other code snippets you'd like me to analyze.\n"
    },
    "knowledge_storm__rm__BraveRM__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 463,
        "endLineNo": 468,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L463-L468&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown:\n\n**Quick summary:** This function, likely part of a resource management system, records the current usage of a resource called 'BraveRM'. It then resets the usage to zero and returns a dictionary containing the recorded usage.  The purpose is to track and clear the usage of this resource.\n\n**Inputs:**\n\n*  `self.usage`:  An existing value representing the current usage of 'BraveRM'. \n\n**Output:**\n\n* A dictionary with a single key-value pair: \n    * Key: 'BraveRM'\n    * Value:  The recorded usage value of 'BraveRM' before it was reset\n\n\n\n\nLet me know if you have any more code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__rm__VectorRM__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 263,
        "endLineNo": 268,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L263-L268&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick Summary]**\n\nThis function appears to track the usage of a resource called \"VectorRM\". It retrieves the current usage value, resets the usage to zero, and returns a dictionary containing the previous usage. The purpose is likely to monitor and manage resource consumption.\n\n\n**[Inputs]**\n\n* `self`: This refers to the instance of the class containing this function.\n\n**[Output]** \n\n* Dictionary containing a single key-value pair:\n    *  Key: \"VectorRM\"\n    * Value: The previous usage value of \"VectorRM\". \n\n\n\n\nLet me know if you'd like me to elaborate on any specific aspect! \n"
    },
    "knowledge_storm__rm__YouRM__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 32,
        "endLineNo": 37,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L32-L37&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick Summary] \nThis function appears to track and return the usage of a resource possibly called \"YouRM.\" It resets the usage counter to zero before returning the previously recorded usage.  \n\n[Inputs]\n -  `self`: This likely refers to the instance of the class containing this function.\n\n[Output]\n - A dictionary containing a key `'YouRM'` and a value representing the previously recorded usage. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__WikiWriter____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 73,
        "endLineNo": 78,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L73-L78&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:** \n\nThis code initializes a class that likely interacts with a language model. It sets up two chains of thought called `ask_question_with_persona` and `ask_question`, both utilizing the `AskQuestionWithPersona` and `AskQuestion` classes. It also initializes a `engine` which likely represents the underlying language model. This suggests the code is designed for question answering, potentially with persona-based role-playing.\n\n**Inputs:**\n\n*  `dspy`:  A library or module presumably related to dialogue systems or prompting.\n* `AskQuestionWithPersona`: A class or function definition likely handling questions with a designated persona.\n*  `AskQuestion`: A class or function definition likely handling general question-asking.\n* `engine`: An object representing the underlying language model.\n\n**Output:**\n\n* A functional object of the class, ready to process questions and potentially engage in persona-based dialogue. \n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__NaiveOutlineGen__forward": {
        "label": "forward",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 119,
        "endLineNo": 124,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L119-L124&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary**\nThis function takes a topic as input and generates a structured outline for a text based on it. It likely uses a pre-existing method `write_outline(topic=topic)` to create the outline, and then packages it into a `dspy.Prediction` object, suggesting a larger machine learning or AI model where this function is part of.\n\n**Inputs**\n* `topic`: A string representing the subject or theme of the desired text. \n\n**Output**\n* `dspy.Prediction`: An object containing the generated outline for the text related to the provided topic.  \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__StormOutlineGenerationModule____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 17,
        "endLineNo": 22,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L17-L22&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:**\n\nThis code defines a class that leverages a Large Language Model (LLM) for generating outlines. It inherits from a parent class (`__init__`) and initializes an instance of `WriteOutline` which uses the provided LLM (`outline_gen_lm`) for generating outlines.  The overall purpose is to create a system for automatically generating outlines based on user input.\n\n**Inputs:**\n\n* `outline_gen_lm`: This is the LLM used for outline generation. It can be either a `dspy.dsp.LM` object or a `dspy.dsp.HFModel` object. \n\n**Output:**\n\n*  A new instance of the class, ready to generate outlines using the provided LLM. \n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__WriteOutline____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 69,
        "endLineNo": 74,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L69-L74&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "**Quick Summary**\n\nThis code initializes a class (likely a component or module within a larger system) designed to generate page outlines for a text document. It utilizes two prediction models (`draft_page_outline` and `write_page_outline`) and an engine (`engine`) to achieve this. The purpose is to provide a mechanism for automatically creating structured outlines for written content.\n\n**Inputs**\n\n*  **dspy:**  Probably a library or framework related to machine learning or deep learning models.\n*  **WritePageOutline:**  A function defining the logic for generating the initial page outline.\n*  **WritePageOutlineFromConv:** A function presumably responsible for refining the outline based on some form of conversation or feedback.\n*  **engine:** An engine or processing unit that drives the outline generation process, potentially involving the aforementioned models and functions.\n\n**Output**\n\n* A `PageOutline`:  The generated structured representation of the document's content. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__CreateWriterWithPersona____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 61,
        "endLineNo": 66,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L61-L66&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:**\n\nThis code initializes a Python class that appears to be designed for persona-based dialogue generation. It utilizes two separate chains of thought models (`FindRelatedTopic` and `GenPersona`) to potentially identify relevant topics and generate a persona for a conversational agent. The `engine` likely represents a core language model used for generating the actual responses.\n\n**Inputs:**\n\n* `dspy`: A library or framework likely providing tools for building and managing dialogue systems.\n* `ChainOfThought`: A class or function within `dspy`  for creating chains of thought models.\n* `FindRelatedTopic`: This could be a custom class defining a model for finding related topics in a conversation.\n* `GenPersona`: This could be a custom class defining a model for generating a persona for the dialogue agent.\n* `engine`: This likely refers to a language model (e.g., GPT-3) used for generating text based on the inputted chains of thought.\n\n**Output:**\n\n* A newly initialized instance of the class, capable of:\n    * Identifying related topics using the `FindRelatedTopic` chain of thought model.\n    * Generating a persona using the `GenPersona` chain of thought model.\n    * Utilizing the provided `engine` for text generation based on the chains of thought. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__retriever__StormRetriever____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/retriever.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/retriever.py",
        "lineNo": 237,
        "endLineNo": 242,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fretriever.py%23L237-L242&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**[Quick summary]**\n\nThis function initializes a class (likely a subclass of another class) used for searching. It sets up internal variables:  `search_top_k` (controlling the number of top results), `_rm` ( referring to some  RetrievalModel), and  `is_valid_wikipedia_source`  (a validation check for Wikipedia sources)\n\n\n**[Inputs]**\n\n*  `k`: An integer specifying the number of top search results to retrieve.\n*  `rm`: An instance of a RetrievalModel, likely responsible for performing the actual search.\n*  `is_valid_wikipedia_source`: A function (likely) used to determine if a source is considered valid for Wikipedia context.\n\n**[Output]**\n\n*   None (This function likely focuses on initialization and setup rather than producing direct output) \n\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__dump_reference_to_file": {
        "label": "dump_reference_to_file",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 474,
        "endLineNo": 479,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L474-L479&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Breakdown\n\n**Quick Summary**\n\nThis function takes a dictionary-like `reference` object containing URLs and associated information. It creates a deep copy of this reference, converts the information linked to each URL into a standard dictionary format, and then saves this processed reference to a JSON file specified by `file_path`. It likely serves to persist or share the reference data in a structured and portable way.\n\n**Inputs**\n\n* `self.reference`:  A dictionary-like object containing URLs as keys and associated information as values.  \n* `file_path`:  A string representing the path to the JSON file where the data will be saved. \n\n**Output**\n\n* A JSON file located at `file_path` containing the processed `reference` data. This file will store the `reference` with URLs converted to dictionaries. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__get_first_level_section_names": {
        "label": "get_first_level_section_names",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 417,
        "endLineNo": 422,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L417-L422&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown:\n\n**Quick Summary:** This function extracts the names of all first-level sections within a hierarchical data structure (likely a document or file).  The purpose is to provide a list of top-level section headings for navigation or processing.\n\n**Inputs:**\n\n* `self.root`: This likely represents the root node of the hierarchical data structure. \n\n**Output:**\n\n* A list of strings, where each string is the name of a first-level section. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__get_outline_tree__build_tree": {
        "label": "build_tree",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 409,
        "endLineNo": 414,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L409-L414&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:** This function recursively builds a nested dictionary representation of a tree-like data structure.  It takes a node as input and constructs a dictionary where keys are section names and values are sub-trees. It returns an empty dictionary if the node has no children.\n\n**Inputs:**\n\n* `node`:  Represents a single node in the tree structure. It likely has attributes like `children` (a list of child nodes) and `section_name` (a string identifying the node's section).\n\n**Output:**\n\n* A nested dictionary where:\n    * Keys are section names from the nodes in the tree.\n    * Values are the dictionary representations of the sub-trees rooted at those nodes.\n\n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable__dump_url_to_info": {
        "label": "dump_url_to_info",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 138,
        "endLineNo": 143,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L138-L143&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis\n\n**Quick Summary:** This function takes a dictionary (`url_to_info`) containing website URLs and associated information, converts each value (presumably a complex data structure) to a dictionary, and then saves this modified dictionary to a JSON file at the specified `path`.\n\nThis is likely part of a system for storing and retrieving website data in a structured, persistent way.\n\n**Inputs:**\n\n* `self.url_to_info`: A dictionary where keys are URLs and values are some type of website information.\n* `path`: A string representing the file path where the JSON file should be saved.\n\n**Output:**\n\n* A JSON file at the specified `path` containing website URLs as keys and their associated information (now represented as dictionaries) as values. \n\n\n\n\n"
    },
    "knowledge_storm__utils__WebPageHelper__urls_to_snippets": {
        "label": "urls_to_snippets",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 612,
        "endLineNo": 617,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L612-L617&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**[Quick Summary]** This function processes a list of URLs, converting them into articles with extracted text and split snippets. Its purpose is likely to prepare text data for indexing, analysis, or summarization.\n\n**[Inputs]**\n\n* `urls`: A list of website URLs.\n\n**[Output]**\n\n* A dictionary where keys are URLs and values are dictionaries containing:\n    * \"text\": The extracted text content from the URL.\n    * \"snippets\": A list of shorter text segments extracted from the \"text\". \n\n\n\n"
    },
    "knowledge_storm__interface__Article__to_string": {
        "label": "to_string",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 93,
        "endLineNo": 97,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L93-L97&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Let's break down the code snippet you provided.\n\n**[Quick Summary]**\n\nThis function aims to convert an \"Article\" object into a human-readable string.  Its purpose is likely to facilitate the representation or logging of article data in a textual format.\n\n**[Inputs]**\n\n*  **article:** An object presumably representing an article with various attributes (title, content, author, etc.).\n\n**[Output]**\n\n*  A string containing a textual representation of the \"article\" object. \n\n\n"
    },
    "knowledge_storm__interface__Information____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 20,
        "endLineNo": 24,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L20-L24&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick summary]\n\nThis code snippet appears to be initializing an object, likely within a class definition. It assigns a unique identifier (UUID) and metadata (`meta`) to the object, suggesting its purpose is to represent some data entity with a persistent ID and associated information.\n\n[Inputs]\n\n* `uuid`: A unique identifier (likely a UUID string)\n\n* `meta`: Meta data associated with the object (could be a dictionary, object, etc.)\n\n[Output]\n\n*  An object with assigned UUID and metadata.  \n\n"
    },
    "knowledge_storm__rm__SerperRM__get_usage_and_reset": {
        "label": "get_usage_and_reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/rm.py",
        "relativePath": "knowledge_storm/rm.py",
        "lineNo": 368,
        "endLineNo": 372,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Frm.py%23L368-L372&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Analysis \n\n**[Quick Summary]** This function records the current usage of a resource called  \"SerperRM\" and returns it as part of a dictionary.  It then resets the usage counter to zero.  The overall purpose could be to track and report resource consumption.\n\n**[Inputs]**\n\n*  `self.usage`: Represents the current usage of  \"SerperRM\"  (likely a numerical value).\n\n**[Output]**\n\n* `{'SerperRM': usage}`: A dictionary containing the string \"SerperRM\" as the key and the recorded usage value  as the value. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner___load_information_table_from_local_fs": {
        "label": "_load_information_table_from_local_fs",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 236,
        "endLineNo": 240,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L236-L240&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Analysis\n\n**Quick Summary**\n\nThis function loads and processes a conversation log file (`conversation_log.json`) to create a `StormInformationTable` object. It asserts the existence of the file, raising an error if it's missing. The purpose is likely to retrieve conversation data for a specific topic and structure it into a format usable by the \"Storm\" system.\n\n**Inputs**\n\n*  `information_table_local_path`:  The file path to the `conversation_log.json` file.\n\n**Output**\n\n*  `StormInformationTable`: A structured object containing information extracted from the conversation log. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiRunner___load_outline_from_local_fs": {
        "label": "_load_outline_from_local_fs",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 241,
        "endLineNo": 245,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L241-L245&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis function loads and processes a storm article outline from a local file.\n\nIt assumes a file called `storm_gen_outline.txt` exists and contains the outline for a given `topic`. The purpose is to generate a  `StormArticle` object based on the pre-existing outline.\n\n## Inputs\n\n* `topic`:  A string representing the subject of the article.\n* `outline_local_path`: A string pointing to the location of the `storm_gen_outline.txt` file.\n\n## Output\n\n* `StormArticle`: An object containing the structured content of the article derived from the provided outline. \n"
    },
    "knowledge_storm__storm_wiki__modules__article_generation__ConvToSection____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/article_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/article_generation.py",
        "lineNo": 112,
        "endLineNo": 116,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Farticle_generation.py%23L112-L116&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:** This function initializes a component likely used in a data processing pipeline. It sets up a \"Predict\" object named `write_section` based on a class called `WriteSection`, and stores an `engine` object for potential utilization. This suggests the purpose is to handle writing data based on predictions made by a model.\n\n**Inputs:**\n\n*  `dspy`:  A library or framework likely providing machine learning or prediction functionalities.\n* `WriteSection`: A class defining the logic for writing data to a specific location or format.\n* `engine`: An object providing computational resources or a data processing context.\n\n**Output:**\n\n* An initialized component ready to receive input data and potentially write it based on predictions from the `WriteSection` object and the capabilities of the `engine`. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormInformationTable____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 106,
        "endLineNo": 110,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L106-L110&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:\n\n**Quick Summary:** \n\nThis Python function initializes a class object responsible for handling storm information extracted from conversations. It populates a dictionary `url_to_info` that maps URLs to corresponding `StormInformation` objects based on data parsed from the input `conversations`.  The purpose is likely to organize and access storm-related information efficiently.\n\n**Inputs:**\n\n*  `conversations`: Likely a list or collection of text conversations containing information about storms.\n*  `StormInformationTable`:  A class or function responsible for constructing `StormInformation` objects from conversation data.\n\n**Output:**\n\n*  `self.url_to_info`: A dictionary where keys are URLs and values are `StormInformation` objects extracted from the `conversations`.  \n\n\n\n"
    },
    "knowledge_storm__utils__ArticleTextProcessing__remove_uncompleted_sentences_with_citations__replace_with_individual_brackets": {
        "label": "replace_with_individual_brackets",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 327,
        "endLineNo": 331,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L327-L331&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Let's break down this code snippet.\n\n**[Quick Summary]** \n\nThis Python function extracts a list of numerical values from a string, presumably representing citations, formats them within square brackets ([ ]), and returns them as a space-separated string.  The code likely aims to standardize the representation of citations for further processing or storage.\n\n**[Inputs]**\n\n*  match: This suggests this function is part of a larger process that utilizes regular expressions (`re` module) and relies on a previous `match` object capturing the relevant citation data.\n* match.group(1): This part extracts the specific capture group from the `match` object. We assume this capture group contains the citation numbers within a delimited string (in this case, comma-separated with spaces).\n\n**[Output]**\n\n* A string containing each extracted numerical value enclosed in square brackets. These bracketed values are then separated by spaces. \n\n\nLet me know if you have any other code snippets you'd like analyzed!\n"
    },
    "knowledge_storm__utils__FileIOHelper__load_pickle": {
        "label": "load_pickle",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 541,
        "endLineNo": 545,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L541-L545&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Quick Summary \n\nThis function reads a file (`path`) in binary mode, deserializes the content using Python's `pickle` library, and returns the resulting Python object. Its purpose is to load pre-saved Python objects from a file for later use.\n\n## Inputs\n\n* **`path`**:\n   - A string representing the file path of the pickled object.\n\n## Output\n\n* A Python object that was previously serialized and saved in the specified file. \n"
    },
    "knowledge_storm__interface__ArticleSectionNode__remove_child": {
        "label": "remove_child",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 65,
        "endLineNo": 68,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L65-L68&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis: \n\n**Quick Summary:**\n\nThis code snippet removes a specific child object from a container (`self.children`). Its purpose is likely part of a larger data structure or object management system, allowing for the dynamic modification of its internal components.\n\n**Inputs:**\n\n* **child:** An object representing a child element within the container (`self.children`).\n\n**Output:**\n\n* The `child` is no longer present in the `self.children` container.\n\n\n"
    },
    "knowledge_storm__interface__Engine__reset": {
        "label": "reset",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 432,
        "endLineNo": 435,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L432-L435&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code snippet appears to be initializing an object for tracking time and costs associated with left-most (lm) and right-most (rm) operations.  It likely forms part of a larger algorithm or system that analyzes or optimizes the performance of these operations.\n\n## Inputs\n\n\n*  No explicit inputs are shown.  \n\n * The code assumes the existence of an object (likely a class instance)  \n   which it will modify by initializing dictionaries `time`, `lm_cost`, and \n   `rm_cost`.\n\n## Output\n\n* The object's internal state is modified, with three new dictionaries:\n    * **`self.time`**:  Likely holds time measurements for different operations or stages. \n    * **`self.lm_cost`**: Likely stores costs associated with left-most operations.\n    * **`self.rm_cost`**: Likely stores costs associated with right-most operations. \n"
    },
    "knowledge_storm__interface__InformationTable__retrieve_information": {
        "label": "retrieve_information",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 39,
        "endLineNo": 42,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L39-L42&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze.  \n"
    },
    "knowledge_storm__lm__ClaudeModel__request": {
        "label": "request",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 327,
        "endLineNo": 330,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L327-L330&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:** \n\nThis Python function aims to retrieve text completions from an API provided by Anthropic. It's designed to be robust by handling potential API errors gracefully through a method called `basic_request`.  \n\n**Inputs:**\n\n*  `prompt`:  The text input used to generate the completion.\n*  `**kwargs`: Additional keyword arguments that might be needed by the `basic_request` method to configure the API call (e.g., temperature, max length).\n\n**Output:**\n\n*  The generated text completion from the Anthropic API.\n\n\nLet me know if you'd like a deeper dive into how the `basic_request` method might work! \n"
    },
    "knowledge_storm__lm__GoogleModel__request": {
        "label": "request",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 694,
        "endLineNo": 697,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L694-L697&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis:\n\n**Quick Summary**\n\nThis function is designed to retrieve text completions from the Google API.  It aims to provide a user-friendly way to interact with the API, gracefully handling any potential errors encountered during the retrieval process.\n\n**Inputs**\n\n* `prompt`: This is the text input that the user wants the model to complete.\n* `**kwargs`: This allows for passing additional keyword arguments to the underlying `basic_request` function. These arguments likely control aspects like temperature, max length, or other fine-tuning parameters.\n\n**Output**\n\n*  The function returns the text completion generated by the Google API in response to the given prompt. \n*  In case of an API error, the function likely returns an error message or handles the error in some way (logging, re-trying, etc.), depending on the implementation of `basic_request`. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs__set_article_polish_lm": {
        "label": "set_article_polish_lm",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 81,
        "endLineNo": 84,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L81-L84&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown\n\n**Quick Summary:** \n\nThis code snippet is likely setting up a language model called `article_polish_lm` to be used for processing and generating Polish text. The specific purpose would depend on the application, but it might be used for tasks like text generation, summarization, or translation.\n\n\n**Inputs:**\n\n\n*   `model`:  This is likely an instance of a pre-trained language model specifically designed for Polish text.\n\n**Output:**\n\n\n\n*   `self.article_polish_lm`: This line creates an attribute named `article_polish_lm` within a class. This attribute will store the reference to the `model` object, making it accessible within the class's methods. \n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_dialogue_turn_end": {
        "label": "on_dialogue_turn_end",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 16,
        "endLineNo": 19,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L16-L19&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Let's break down this code snippet. \n\n**[Quick Summary]** \n\nThis function is designed to be triggered at the end of a question-and-answer (Q&A) interaction. It's likely part of a larger system that handles conversational exchanges, and its purpose seems to be to execute any necessary cleanup, logging, or analysis after each question-answer pair is processed.\n\n**[Inputs]**\n\n*   None explicitly stated. \n\n*  Potentially, it could receive information about the completed question and answer as implicit context.\n\n**[Output]**\n\n*   None explicitly stated.\n\n*   The function would likely perform actions rather than returning a direct output value.   \n\n\nLet me know if you have any other code snippets you'd like analyzed! \n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_direct_outline_generation_end": {
        "label": "on_direct_outline_generation_end",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 28,
        "endLineNo": 31,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L28-L31&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick summary]\nThis function is a placeholder, designed to be called after a direct outline generation process has completed. Its purpose is to trigger any actions or processing that should occur following the outline generation.\n\n[Inputs]\n* None -  The function appears to take no explicit inputs.\n\n\n[Output]\n* None - It does not explicitly return any value. \n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_identify_perspective_end": {
        "label": "on_identify_perspective_end",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 8,
        "endLineNo": 11,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L8-L11&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "[Quick Summary]\n\nThis function is a placeholder. It's designed to be executed once a task related to perspective identification is completed.  The purpose is to trigger actions or processes dependent on the identified perspective.\n\n[Inputs] \n\n*  There are no explicit inputs defined within the code snippet.\n\n[Output]\n\n*  It's unclear what output this function is intended to produce, as the `pass` statement indicates no operations are currently performed. \n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_identify_perspective_start": {
        "label": "on_identify_perspective_start",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 4,
        "endLineNo": 7,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L4-L7&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n[Quick summary]\nThis function is a placeholder waiting to be filled with code. It's designed to be executed when a process involving perspective identification begins. The purpose is likely to handle initialization or setup tasks before the actual perspective analysis takes place.\n\n[Inputs]\n*  None (currently)\n\n[Output]\n*   None (currently) \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_information_gathering_end": {
        "label": "on_information_gathering_end",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 20,
        "endLineNo": 23,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L20-L23&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the code snippet:\n\n**Quick Summary**\n\nThis Python function is a placeholder designed to be executed after a process of gathering information. It currently does nothing (`pass` is a placeholder statement), but it's intended to house the logic that should be run once the information collection is complete.\n\n **Inputs**\n\n\n*   There are no explicit inputs defined within this function snippet.\n\n**Output**\n\n*   The function doesn't have any explicit output. \n\n\n\n\nLet me know if you have any other code snippets you'd like me to analyze!\n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_information_gathering_start": {
        "label": "on_information_gathering_start",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 12,
        "endLineNo": 15,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L12-L15&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:**\n\nThis function is a placeholder designed to be executed when an information gathering process begins. Currently, it does nothing (`pass`), but would likely contain code to initiate data collection or set up the gathering process. \n\n**Inputs:**\n\n*  None (The function appears to have no explicit inputs).\n\n**Output:**\n\n*  None (The function does not currently produce any output). \n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_information_organization_start": {
        "label": "on_information_organization_start",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 24,
        "endLineNo": 27,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L24-L27&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Here's a breakdown of the provided code snippet:\n\n**[Quick Summary]**\n\nThis Python function appears to be a placeholder.  It's designed to be executed when an information organization system begins running. Currently, it doesn't perform any specific actions (indicated by the `pass` statement), but it's likely intended to be populated with initialization logic later.\n\n\n**[Inputs]**\n\n* None explicitly stated in the code.\n\n**[Output]**\n\n* None explicitly stated in the code. \n"
    },
    "knowledge_storm__storm_wiki__modules__outline_generation__NaiveOutlineGen____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/outline_generation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/outline_generation.py",
        "lineNo": 115,
        "endLineNo": 118,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Foutline_generation.py%23L115-L118&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis:\n\n**Quick Summary:** This Python code snippet initializes a class inheriting from another class (likely a base class). It then creates an object of the `dspy.Predict` class, passing in a function `WritePageOutline` as its input. This suggests the code is setting up a mechanism for predicting or generating page outlines.\n\n**Inputs:**\n\n*  `dspy.Predict`: A class likely related to prediction or model evaluation, possibly from a library called \"dspy\".\n*  `WritePageOutline`: A function that takes some input and likely generates a page outline.\n\n**Output:**\n\n* An object `self.write_outline` of type `dspy.Predict` configured to use the `WritePageOutline` function. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__dump_article_as_plain_text": {
        "label": "dump_article_as_plain_text",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 480,
        "endLineNo": 483,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L480-L483&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Analysis:\n\n**[Quick Summary]**\n\nThis code snippet appears to be part of a class method that takes some internal data (likely represented as `self`), converts it into a string using `self.to_string()`, and then writes that string to a file specified by `file_path`. The overall purpose is to save the object's data in a text file.\n\n**[Inputs]**\n\n- `self`:  A reference to the object the method belongs to.\n- `file_path`: A string representing the location and name of the file to write to.\n\n**[Output]**\n\n-  The data contained within the object, represented as a string, is written to the specified file. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__dump_outline_to_file": {
        "label": "dump_outline_to_file",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 470,
        "endLineNo": 473,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L470-L473&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis\n\n**Quick summary:** This function retrieves an outline of a document or piece of text (presumably stored within the `self` object), formats it as a list, adds hashtags to each item, and saves the formatted outline as a string to a specified file. \n\n**Inputs:**\n\n* `add_hashtags`: A boolean indicating whether to include hashtags in the outline.\n* `include_root`: A boolean indicating whether to include the root element of the outline.\n* `file_path`: The path to the file where the outline should be saved.\n\n**Output:**\n\n* The formatted outline is written as a string to the specified file path. \n"
    },
    "knowledge_storm__utils__makeStringRed": {
        "label": "makeStringRed",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 39,
        "endLineNo": 42,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L39-L42&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary:**\n\nThis function takes a message as input and returns that message formatted in red text within a terminal. It uses ANSI escape codes to control the text color.\n\n**Inputs:**\n\n*  `message`: A string containing the text to be displayed in red.\n\n**Output:**\n\n*  A string containing the input message colored red within a terminal. \n"
    },
    "knowledge_storm__utils__FileIOHelper__dump_json": {
        "label": "dump_json",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 512,
        "endLineNo": 515,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L512-L515&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Python Code Explanation \n\n**Quick Summary:**\n\nThis code snippet serializes a Python object (`obj`) into a JSON formatted string and writes it to a file (`file_name`) with the specified encoding (`encoding`). The `FileIOHelper.handle_non_serializable` function likely handles objects that cannot be directly serialized to JSON.\n\n **Inputs:**\n\n* `file_name`:  The path and name of the file where the JSON data will be saved.\n* `obj`: The Python object to be converted into JSON format.\n* `encoding`: The encoding scheme for writing the file (e.g., 'utf-8'). \n\n**Output:**\n\n* JSON formatted data representing the `obj` is written to the specified file. \n\n\n\n\n"
    },
    "knowledge_storm__utils__FileIOHelper__dump_pickle": {
        "label": "dump_pickle",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 536,
        "endLineNo": 539,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L536-L539&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown:\n\n**Quick Summary:**\n\nThis Python code snippet serializes a Python object (`obj`) and saves it to a binary file (`path`) using the `pickle` module. This allows for the persistence and later retrieval of complex data structures.\n\n**Inputs:**\n\n* `path`:  A string representing the file path where the object will be saved.\n* `obj`: A Python object, such as a list, dictionary, or custom class instance, that needs to be serialized.\n\n**Output:**\n\n* A binary file at the specified `path` containing the serialized representation of the `obj`. \n\n\n"
    },
    "knowledge_storm__utils__FileIOHelper__load_json": {
        "label": "load_json",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 521,
        "endLineNo": 524,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L521-L524&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:**  This function reads a JSON file specified by `file_name` using the given `encoding`, parses the JSON content, and returns the resulting Python data structure. Its purpose is to load data from a JSON file into a program for processing. \n\n**Inputs:**\n- `file_name`: The path to the JSON file.\n- `encoding`:  The encoding scheme used to read the file (e.g., 'utf-8').\n\n\n**Output:**\n- A Python data structure (e.g., dictionary, list) representing the parsed JSON content. \n"
    },
    "knowledge_storm__utils__FileIOHelper__load_str": {
        "label": "load_str",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 531,
        "endLineNo": 534,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L531-L534&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n[Quick summary]\nThis Python function reads the contents of a file specified by the \"path\" argument and returns the entire file content as a single string, with each line separated by a newline character. Essentially, it efficiently reads and combines the lines of a text file. \n\n[Inputs]\n*  `path`: A string representing the location of the file to be read.\n\n[Output]\n* A single string containing the entire contents of the file, with each line separated by a newline character. \n\n\n"
    },
    "knowledge_storm__utils__FileIOHelper__write_str": {
        "label": "write_str",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 526,
        "endLineNo": 529,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L526-L529&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Breakdown:\n\n**[Quick Summary]**\nThis code snippet opens a file specified by the `path` variable in write mode ('w') and writes the content of the string variable `s` into the file.  The purpose is to create a new file or overwrite an existing one with the given string data.\n\n**[Inputs]**\n\n* `path`:  A string representing the location and name of the file to be created or overwritten. \n* `s`: A string containing the data to be written to the file.\n\n**[Output]**\n\n* A file is created or overwritten at the specified `path` location containing the string data from `s`. \n"
    },
    "knowledge_storm__interface__Article____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 70,
        "endLineNo": 72,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L70-L72&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze. I need the code to determine the function's purpose, inputs, and output. \ud83d\ude0a  \n\n"
    },
    "knowledge_storm__interface__Engine__run": {
        "label": "run",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 406,
        "endLineNo": 408,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L406-L408&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze.  I need the code to give you a summary, inputs, and outputs. \ud83d\ude04  \n"
    },
    "knowledge_storm__interface__Engine__run_article_generation_module": {
        "label": "run_article_generation_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 406,
        "endLineNo": 408,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L406-L408&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze.  I need the code to give you a summary, inputs, and output. \ud83d\ude0a \n"
    },
    "knowledge_storm__interface__Engine__run_article_polishing_module": {
        "label": "run_article_polishing_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 410,
        "endLineNo": 412,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L410-L412&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze. \ud83d\ude0a  \n"
    },
    "knowledge_storm__interface__Engine__run_knowledge_curation_module": {
        "label": "run_knowledge_curation_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 398,
        "endLineNo": 400,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L398-L400&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze. I need the code to give you a summary of its function, inputs, and expected output.  \n\n"
    },
    "knowledge_storm__interface__Engine__run_outline_generation_module": {
        "label": "run_outline_generation_module",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 402,
        "endLineNo": 404,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L402-L404&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze. I need the code to give you a summary, inputs, and output.  \n\n"
    },
    "knowledge_storm__interface__InformationTable____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 35,
        "endLineNo": 37,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L35-L37&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze.  I need the code to give you a summary, inputs, and output. \ud83d\ude0a  \n\n"
    },
    "knowledge_storm__interface__LMConfigs____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 317,
        "endLineNo": 319,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L317-L319&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze!  \n\n"
    },
    "knowledge_storm__interface__Retriever____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 172,
        "endLineNo": 174,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L172-L174&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze!  I need to see the code to give you a quick summary, list the inputs/outputs, and explain their purpose. \ud83d\ude0a \n"
    },
    "knowledge_storm__interface__Retriever__update_search_top_k": {
        "label": "update_search_top_k",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/interface.py",
        "relativePath": "knowledge_storm/interface.py",
        "lineNo": 175,
        "endLineNo": 177,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Finterface.py%23L175-L177&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis \n\n**Quick Summary:** This code snippet likely sets a parameter `search_top_k`  for a search algorithm or function.  The value of `k` determines the maximum number of results returned by the search.\n\n**Inputs:**\n\n* `self.search_top_k = k`: \n    * `self`:  This suggests the code is within a class definition.\n    * `search_top_k`: This is a likely an instance variable within the class.\n    * `k`: An integer value representing the desired number of top search results.\n\n**Output:**\n\n*  Sets the `search_top_k` instance variable to the integer value `k`. \n\n\n"
    },
    "knowledge_storm__lm__TGIClient____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/lm.py",
        "relativePath": "knowledge_storm/lm.py",
        "lineNo": 420,
        "endLineNo": 422,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Flm.py%23L420-L422&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Summary\n\nThis code snippet initializes a class (likely a custom client or wrapper) that interacts with a model via an API endpoint. It inherits from a parent class and sets up communication parameters like the model, port, API URL, and optional HTTP request configurations.\n\n## Inputs\n\n* `model`: The name or identifier of the model to interact with.\n* `port`:  The port number the API is running on.\n* `url`:  The base URL of the API endpoint.\n* `http_request_kwargs`:  Additional keyword arguments for making HTTP requests.\n* `kwargs`:  Any additional keyword arguments specific to the child class.\n\n## Output\n\n*  An initialized instance of the child class, ready to make API requests to the specified model. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs__set_article_gen_lm": {
        "label": "set_article_gen_lm",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 78,
        "endLineNo": 80,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L78-L80&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze.  I need the code to determine the summary, inputs, and outputs. \ud83d\ude0a \n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs__set_conv_simulator_lm": {
        "label": "set_conv_simulator_lm",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 69,
        "endLineNo": 71,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L69-L71&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you'd like me to analyze. I need the code to give you a quick summary, inputs, and outputs.  \ud83d\ude0a  \n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs__set_outline_gen_lm": {
        "label": "set_outline_gen_lm",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 75,
        "endLineNo": 77,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L75-L77&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "```python\n        self.outline_gen_lm = model\n```\n\n[Quick Summary]\n\nThis line of code assigns a pre-trained language model, likely designed for text generation, to the attribute `self.outline_gen_lm` within a class.  This suggests the class is intended for tasks involving generating outlines from text or other inputs.\n\n[Inputs]\n\n* `model`:  A pre-trained language model object.\n\n[Output]\n\n* `self.outline_gen_lm`:  The class instance now has a reference to the provided language model. \n\n\n"
    },
    "knowledge_storm__storm_wiki__engine__STORMWikiLMConfigs__set_question_asker_lm": {
        "label": "set_question_asker_lm",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/engine.py",
        "relativePath": "knowledge_storm/storm_wiki/engine.py",
        "lineNo": 72,
        "endLineNo": 74,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fengine.py%23L72-L74&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "```python\n        self.question_asker_lm = model\n```\n\n**Quick summary:** This line of code assigns a language model (`model`) to an instance variable called `question_asker_lm`. This suggests it's setting up a component for a program designed to answer questions using the provided language model.  \n\n**Inputs:**\n\n* `model`:  A pre-trained language model object. \n\n**Output:**\n\n* `self.question_asker_lm`: An instance variable holding the reference to the language model. \n"
    },
    "knowledge_storm__storm_wiki__modules__callback__BaseCallbackHandler__on_outline_refinement_end": {
        "label": "on_outline_refinement_end",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/callback.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/callback.py",
        "lineNo": 32,
        "endLineNo": 34,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fcallback.py%23L32-L34&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Function Breakdown\n\n**Quick Summary:** This Python function, likely part of a larger program, is designed to execute actions *after* a process called \"outline refinement\" completes.  Its current placeholder indicates it's awaiting specific instructions to be filled in.\n\n**Inputs:**\n\n* None explicitly stated\n\n**Output:** \n\n*  N/A -  The function itself does nothing currently, pending further implementation. \n\n\n\n\nLet me know if you'd like me to elaborate on any aspect or make assumptions about the context!\n"
    },
    "knowledge_storm__storm_wiki__modules__knowledge_curation__StormKnowledgeCurationModule___get_considered_personas": {
        "label": "_get_considered_personas",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/knowledge_curation.py",
        "lineNo": 230,
        "endLineNo": 232,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fknowledge_curation.py%23L230-L232&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Function Breakdown\n\n**Quick Summary:** This function generates multiple fictional personas related to a given topic. It utilizes a `persona_generator` object to create these personas, limiting the number of personas generated based on the `max_num_persona` input.\n\n**Inputs:**\n\n* **topic:** A string representing the subject or theme for the personas.\n* **max_num_persona:** An integer specifying the maximum number of personas to generate.\n\n**Output:**\n\n* A list of dictionaries, each representing a generated persona with relevant attributes. \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__persona_generator__StormPersonaGenerator____init__": {
        "label": "__init__",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/persona_generator.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/persona_generator.py",
        "lineNo": 115,
        "endLineNo": 117,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fpersona_generator.py%23L115-L117&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "## Code Analysis\n\n**Quick Summary**\n\nThis code snippet initializes an object named `create_writer_with_persona` from the class `CreateWriterWithPersona`. This object likely has the functionality to create AI writers with specific personalities or writing styles, utilizing the provided `engine` which presumably represents an AI language model.\n\n**Inputs**\n\n* `engine`: An object representing an AI language model.\n\n**Output**\n\n*  An object of type `CreateWriterWithPersona` ready to be used for creating AI writers with defined personas.  \n\n\n"
    },
    "knowledge_storm__storm_wiki__modules__storm_dataclass__StormArticle__post_processing": {
        "label": "post_processing",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "relativePath": "knowledge_storm/storm_wiki/modules/storm_dataclass.py",
        "lineNo": 494,
        "endLineNo": 496,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Fstorm_wiki%2Fmodules%2Fstorm_dataclass.py%23L494-L496&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "Please provide the code selection you would like me to analyze.  I need to see the code to give you a summary, inputs, and output. \n\n"
    },
    "knowledge_storm__utils__FileIOHelper__handle_non_serializable": {
        "label": "handle_non_serializable",
        "systemPath": "/home/sanjay/Development/explore/storm/knowledge_storm/utils.py",
        "relativePath": "knowledge_storm/utils.py",
        "lineNo": 517,
        "endLineNo": 519,
        "emgithubIframeLink": "https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fstanford-oval%2Fstorm%2Fblob%2Fmain%2Fknowledge_storm%2Futils.py%23L517-L519&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on",
        "description": "##  Code Analysis \n\n**Quick Summary:**  This function likely attempts to serialize some data but encounters an issue with non-serializable elements. It returns a warning message \"non-serializable contents\" to indicate the problem.  The purpose is to identify and flag data that cannot be safely converted into a persistent format. \n\n**Inputs:**\n*   The full function context is needed to determine the exact inputs. It's likely designed to accept an object or data structure intended for serialization.\n\n**Output:**\n*   \"non-serializable contents\" (string) \n\n\n"
    }
}